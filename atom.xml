<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sung&#39;s Blog</title>
  
  <subtitle>Debug the World</subtitle>
  <link href="https://sun-ruijiang.github.io/atom.xml" rel="self"/>
  
  <link href="https://sun-ruijiang.github.io/"/>
  <updated>2021-05-13T04:04:30.477Z</updated>
  <id>https://sun-ruijiang.github.io/</id>
  
  <author>
    <name>Sung</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>深入理解计算机系统——LAB-3_BombLab</title>
    <link href="https://sun-ruijiang.github.io/2021/05/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94LAB-3_BombLab/"/>
    <id>https://sun-ruijiang.github.io/2021/05/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94LAB-3_BombLab/</id>
    <published>2021-05-12T16:00:00.000Z</published>
    <updated>2021-05-13T04:04:30.477Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深入理解计算机系统——LAB-3-Bomb-Lab"><a href="#深入理解计算机系统——LAB-3-Bomb-Lab" class="headerlink" title="深入理解计算机系统——LAB-3_Bomb_Lab"></a>深入理解计算机系统——LAB-3_Bomb_Lab</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>Bomb Lab</code>对应<code>CS:APP</code>中第三章内容：<strong>程序的机器级表示的<code>lab</code></strong></p><p>程序运行在**<code>linux</code>环境**中。</p><p>程序运行中有6个关卡（6个<code>phase</code>），每个<code>phase</code>需要用户在终端上<strong>输入特定的字符或者数字</strong>才能<strong>通关</strong>，否则会引爆炸弹！</p><p>那么如何才能知道输入什么内容呢？</p><p>这需要你使用<code>gdb</code>工具<strong>反汇编</strong>出汇编代码，结合c语言文件找到<strong>每个关卡的入口函数</strong>。</p><p>然后<strong>分析汇编代码</strong>，找到在每个phase程序段中，引导程序<strong>跳转到<code>explode_bomb</code>程序段</strong>的地方，并分<strong>析其成功跳转的条件</strong>，以此为突破口寻找应该在命令行输入何种字符通关。</p><h2 id="实验环境和使用工具"><a href="#实验环境和使用工具" class="headerlink" title="实验环境和使用工具"></a>实验环境和使用工具</h2><ul><li><p>主机为<code>Windows10</code></p></li><li><p>运行炸弹的虚拟机<code>Ubuntu12.04.5</code></p></li><li><p><code>gdb7.4</code>版本</p></li><li><p><code>objdump2.22</code>版本</p></li><li><p><code>VS code</code>编辑器，下载了<code>x86 and x86_64 Assembly</code>插件，提供汇编代码高亮功能</p></li></ul><h2 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h2><h3 id="准备工作，研究bomb-c源代码"><a href="#准备工作，研究bomb-c源代码" class="headerlink" title="准备工作，研究bomb.c源代码"></a>准备工作，研究<code>bomb.c</code>源代码</h3><p>一共有两个文件：<code>bomb.c</code>和<code>bomb</code>。</p><p><code>bomb.c</code>编译得到<code>bomb</code>文件，所以我先研究一下<code>bomb.c</code>的代码</p><ul><li>代码如下（随便看看）：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***************************************************************************</span></span><br><span class="line"><span class="comment"> * Dr. Evil&#x27;s Insidious Bomb, Version 1.1</span></span><br><span class="line"><span class="comment"> * Copyright 2011, Dr. Evil Incorporated. All rights reserved.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * LICENSE:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Dr. Evil Incorporated (the PERPETRATOR) hereby grants you (the</span></span><br><span class="line"><span class="comment"> * VICTIM) explicit permission to use this bomb (the BOMB).  This is a</span></span><br><span class="line"><span class="comment"> * time limited license, which expires on the death of the VICTIM.</span></span><br><span class="line"><span class="comment"> * The PERPETRATOR takes no responsibility for damage, frustration,</span></span><br><span class="line"><span class="comment"> * insanity, bug-eyes, carpal-tunnel syndrome, loss of sleep, or other</span></span><br><span class="line"><span class="comment"> * harm to the VICTIM.  Unless the PERPETRATOR wants to take credit,</span></span><br><span class="line"><span class="comment"> * that is.  The VICTIM may not distribute this bomb source code to</span></span><br><span class="line"><span class="comment"> * any enemies of the PERPETRATOR.  No VICTIM may debug,</span></span><br><span class="line"><span class="comment"> * reverse-engineer, run &quot;strings&quot; on, decompile, decrypt, or use any</span></span><br><span class="line"><span class="comment"> * other technique to gain knowledge of and defuse the BOMB.  BOMB</span></span><br><span class="line"><span class="comment"> * proof clothing may not be worn when handling this program.  The</span></span><br><span class="line"><span class="comment"> * PERPETRATOR will not apologize for the PERPETRATOR&#x27;s poor sense of</span></span><br><span class="line"><span class="comment"> * humor.  This license is null and void where the BOMB is prohibited</span></span><br><span class="line"><span class="comment"> * by law.</span></span><br><span class="line"><span class="comment"> ***************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;support.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;phases.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * Note to self: Remember to erase this file so my victims will have no</span></span><br><span class="line"><span class="comment"> * idea what is going on, and so they will all blow up in a</span></span><br><span class="line"><span class="comment"> * spectaculary fiendish explosion. -- Dr. Evil </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">FILE *infile;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *input;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Note to self: remember to port this bomb to Windows and put a </span></span><br><span class="line"><span class="comment">     * fantastic GUI on it. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* When run with no arguments, the bomb reads its input lines </span></span><br><span class="line"><span class="comment">     * from standard input. */</span></span><br><span class="line">    <span class="keyword">if</span> (argc == <span class="number">1</span>) &#123;  </span><br><span class="line">infile = <span class="built_in">stdin</span>;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="comment">/* When run with one argument &lt;file&gt;, the bomb reads from &lt;file&gt; </span></span><br><span class="line"><span class="comment">     * until EOF, and then switches to standard input. Thus, as you </span></span><br><span class="line"><span class="comment">     * defuse each phase, you can add its defusing string to &lt;file&gt; and</span></span><br><span class="line"><span class="comment">     * avoid having to retype it. */</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (argc == <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (!(infile = fopen(argv[<span class="number">1</span>], <span class="string">&quot;r&quot;</span>))) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s: Error: Couldn&#x27;t open %s\n&quot;</span>, argv[<span class="number">0</span>], argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">8</span>);</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* You can&#x27;t call the bomb with more than 1 command line argument. */</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Usage: %s [&lt;input_file&gt;]\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">8</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Do all sorts of secret stuff that makes the bomb harder to defuse. */</span></span><br><span class="line">    initialize_bomb();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Welcome to my fiendish little bomb. You have 6 phases with\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;which to blow yourself up. Have a nice day!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Hmm...  Six phases must be more secure than one phase! */</span></span><br><span class="line">    input = read_line();             <span class="comment">/* Get input                   */</span></span><br><span class="line">    phase_1(input);                  <span class="comment">/* Run the phase               */</span></span><br><span class="line">    phase_defused();                 <span class="comment">/* Drat!  They figured it out!</span></span><br><span class="line"><span class="comment">      * Let me know how they did it. */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Phase 1 defused. How about the next one?\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* The second phase is harder.  No one will ever figure out</span></span><br><span class="line"><span class="comment">     * how to defuse this... */</span></span><br><span class="line">    input = read_line();</span><br><span class="line">    phase_2(input);</span><br><span class="line">    phase_defused();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;That&#x27;s number 2.  Keep going!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* I guess this is too easy so far.  Some more complex code will</span></span><br><span class="line"><span class="comment">     * confuse people. */</span></span><br><span class="line">    input = read_line();</span><br><span class="line">    phase_3(input);</span><br><span class="line">    phase_defused();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Halfway there!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Oh yeah?  Well, how good is your math?  Try on this saucy problem! */</span></span><br><span class="line">    input = read_line();</span><br><span class="line">    phase_4(input);</span><br><span class="line">    phase_defused();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;So you got that one.  Try this one.\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* Round and &#x27;round in memory we go, where we stop, the bomb blows! */</span></span><br><span class="line">    input = read_line();</span><br><span class="line">    phase_5(input);</span><br><span class="line">    phase_defused();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Good work!  On to the next...\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* This phase will never be used, since no one will get past the</span></span><br><span class="line"><span class="comment">     * earlier ones.  But just in case, make this one extra hard. */</span></span><br><span class="line">    input = read_line();</span><br><span class="line">    phase_6(input);</span><br><span class="line">    phase_defused();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Wow, they got it!  But isn&#x27;t something... missing?  Perhaps</span></span><br><span class="line"><span class="comment">     * something they overlooked?  Mua ha ha ha ha! */</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>首先，我们看到一个有趣的<code>license</code>，（Google翻译）意思是</p><blockquote><p>Evil Incorporated博士（PERPETRATOR）特此授予您（VICTIM）使用该炸弹（BOMB）的明确许可。 </p><p>这是一个有时间限制的许可证，在VICTIM死亡时到期。 </p><p>PERPETRATOR对损坏，挫败，精神错乱，虫眼，腕隧道综合症，睡眠不足或对VICTIM造成的其他伤害不承担任何责任。 除非PERPETRATOR想要获得信誉，否则就是这样。</p><p> VICTIM不得将此炸弹源代码分发给PERPETRATOR的任何敌人。                     <strong>//重点，问问别人</strong></p><p> VICTIM不得调试，反向工程，在其上运行“字符串”，反编译，解密或使用任何其他技术来了解和拆除BOMB。 处理此程序时，不能穿防弹衣。                                                                                                <strong>//重点，使用上述所提到的技术拆除炸弹，穿防弹衣</strong></p><p>PERPETRATOR不会因PERPETRATOR糟糕的幽默感而道歉。                            <strong>//哈哈（强颜欢笑）</strong></p><p> 在法律禁止BOMB的情况下，此许可无效。                                                                </p></blockquote></li><li><p>,四个头文件，波浪线的两个我们没有，很好，过！<br><img src="/2021/05/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94LAB-3_BombLab/image-20210428143806306.png" alt="image-20210428143806306"></p></li><li><p>注释意思是</p><blockquote><p>提醒自己：记得把这个文件删掉，这样我的受害者就不会知道发生了什么事，这样他们就会在一场可怕的恐怖爆炸中全部引爆。——邪恶博士                                                                                                           <strong>//重点，看这个文件，我们就知道炸弹怎么做的了</strong></p></blockquote></li><li><p><code>FILE *infile；</code>全局变量，文件指针</p></li><li><p><code>int main(int argc, char *argv[])</code>主函数，参数<code>argc</code>是提供给主函数的参数个数，参数<code>argv[]</code>是参数的字符串数组的指针。</p><blockquote><p>举例：./bomb answer.txt   此时，argc=2，argv[0]=”./bomb”，argv[1]=”answer.txt”</p></blockquote></li><li><p><code>char *input;</code>输入字符串的地址</p></li><li><p>注释环节</p><blockquote><p>提醒自己：记得将炸弹移植到Windows并在上面放上精美的GUI。                     //老师拿来考试的</p></blockquote></li><li><p>后面的太多了，又看注释又看代码太累，我直接写意思，用法：</p><ol><li><code>./bomb</code>，然后自己一个一个输入</li><li><code>./bomb xxx.txt</code>，不用输入，直接看炸没炸</li></ol><p>显然我们选第二种，一个一个答案存起来。</p></li><li><p><code>initialize_bomb();</code>做炸弹函数，我们显然没有这个函数所需要的头文件。</p></li><li><p>输出文件开始执行的提示信息</p></li><li><p>接下来是6个<code>phase</code>，<code>phase</code>流程：</p><ul><li><code>input=read_line();</code>没有函数所需的头文件，功能就是输入字符串或者数字，也就是<code>phase</code>的答案</li><li><code>phase_x(input);</code>将输入作为参数运行第x个<code>phase</code>函数</li><li><code>phase_defused();</code>看答案是否匹配。</li><li>输出成功的提示信息</li></ul></li><li><p>至此，<code>bomb.c</code>已经看完了，我们已经知道炸弹是怎么做的了！</p></li><li><p>接下来，我们需要反汇编<code>bomb</code>文件，看看这些<code>phase</code>函数都是干什么的！</p></li></ul><h3 id="反汇编bomb文件"><a href="#反汇编bomb文件" class="headerlink" title="反汇编bomb文件"></a>反汇编<code>bomb</code>文件</h3><ul><li>在<code>Ubuntu</code>虚拟机中，实验文件夹下，我们执行命令</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objdump -d bomb &gt; bomb.asm</span><br></pre></td></tr></table></figure><ul><li>然后将<code>bomb.asm</code>移动到本机，用<code>vscode</code>打开，有1716行汇编代码<br><img src="/2021/05/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94LAB-3_BombLab/image-20210428154937224.png" alt="image-20210428154937224">、</li><li>用<code>objdump</code>反汇编得到的文件，方便我们全局查找，<code>gdb</code>用来调试</li></ul><h3 id="分析汇编代码"><a href="#分析汇编代码" class="headerlink" title="分析汇编代码"></a>分析汇编代码</h3><p>我们将代码拆成一个函数一个函数进行分析。</p><ul><li><p>在文件夹下输入命令行使用gdb反汇编函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gdb bomb</span><br><span class="line">gdb&gt; disassemble &lt;函数名&gt;           </span><br></pre></td></tr></table></figure></li></ul><h4 id="read-line："><a href="#read-line：" class="headerlink" title="read_line："></a><code>read_line</code>：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">Dump of assembler code for function read_line:</span><br><span class="line">   0x0804911d &lt;+0&gt;:sub    $0x2c,%esp                     &#x2F;&#x2F;栈帧预留0x2c字节的空间</span><br><span class="line">   0x08049120 &lt;+3&gt;:mov    %ebx,0x20(%esp)                &#x2F;&#x2F;M(0x20+esp)&#x3D;ebx</span><br><span class="line">   0x08049124 &lt;+7&gt;:mov    %esi,0x24(%esp)                &#x2F;&#x2F;M(0x24+esp)&#x3D;esi</span><br><span class="line">   0x08049128 &lt;+11&gt;:mov    %edi,0x28(%esp)            &#x2F;&#x2F;M(0x28+esp)&#x3D;edi</span><br><span class="line">   0x0804912c &lt;+15&gt;:call   0x80490b0 &lt;skip&gt;           &#x2F;&#x2F;调用skip()</span><br><span class="line">   0x08049131 &lt;+20&gt;:test   %eax,%eax                  &#x2F;&#x2F;eax &amp; eax</span><br><span class="line">   0x08049133 &lt;+22&gt;:jne    0x80491a1 &lt;read_line+132&gt;  &#x2F;&#x2F;if zf&#x3D;0, jump 0x80491a1 &lt;read_line+132&gt;</span><br><span class="line">   0x08049135 &lt;+24&gt;:mov    0x804c3a4,%eax             &#x2F;&#x2F;eax&#x3D;M(0x804c3a4)</span><br><span class="line">   &#x2F;&#x2F;0x804c3a4 &lt;stdin@@GLIBC_2.0&gt;: &quot;&quot;</span><br><span class="line">   0x0804913a &lt;+29&gt;:cmp    %eax,0x804c3d0             &#x2F;&#x2F;compare M(0x804c3d0) with eax</span><br><span class="line">   &#x2F;&#x2F;0x804c3d0 &lt;infile&gt;: &quot;&quot;</span><br><span class="line">   0x08049140 &lt;+35&gt;:jne    0x804915a &lt;read_line+61&gt;   &#x2F;&#x2F;if zf&#x3D;0, jump 0x804915a &lt;read_line+61&gt;</span><br><span class="line">   0x08049142 &lt;+37&gt;:movl   $0x804a383,(%esp)          &#x2F;&#x2F;M(esp)&#x3D;0x804a383</span><br><span class="line">   &#x2F;&#x2F;0x804a383: &quot;Error: Premature EOF on stdin&quot;</span><br><span class="line">   0x08049149 &lt;+44&gt;:call   0x8048800 &lt;puts@plt&gt;       &#x2F;&#x2F;puts(0x804a383)</span><br><span class="line">   0x0804914e &lt;+49&gt;:movl   $0x8,(%esp)                &#x2F;&#x2F;M(esp)&#x3D;0x8</span><br><span class="line">   0x08049155 &lt;+56&gt;:call   0x8048840 &lt;exit@plt&gt;       &#x2F;&#x2F;exit(0x8)</span><br><span class="line">   0x0804915a &lt;+61&gt;:movl   $0x804a3a1,(%esp)          &#x2F;&#x2F;M(esp)&#x3D;0x804a3a1</span><br><span class="line">   &#x2F;&#x2F;0x804a3a1: &quot;GRADE_BOMB&quot;</span><br><span class="line">   0x08049161 &lt;+68&gt;:call   0x80487f0 &lt;getenv@plt&gt;     &#x2F;&#x2F;getenv@plt(0x804a3a1)</span><br><span class="line">   0x08049166 &lt;+73&gt;:test   %eax,%eax                  &#x2F;&#x2F;eax&amp;eax</span><br><span class="line">   0x08049168 &lt;+75&gt;:je     0x8049176 &lt;read_line+89&gt;   &#x2F;&#x2F;if zf&#x3D;1, jump 0x8049176 &lt;read_line+89&gt;</span><br><span class="line">   0x0804916a &lt;+77&gt;:movl   $0x0,(%esp)                &#x2F;&#x2F;M(esp)&#x3D;0x0</span><br><span class="line">   0x08049171 &lt;+84&gt;:call   0x8048840 &lt;exit@plt&gt;       &#x2F;&#x2F;exit(0x0)</span><br><span class="line">   0x08049176 &lt;+89&gt;:mov    0x804c3a4,%eax             &#x2F;&#x2F;eax&#x3D;M(0x804c3a4)</span><br><span class="line">   &#x2F;&#x2F;0x804c3a4 &lt;stdin@@GLIBC_2.0&gt;: &quot;&quot;</span><br><span class="line">   0x0804917b &lt;+94&gt;:mov    %eax,0x804c3d0             &#x2F;&#x2F;M(0x804c3d0)&#x3D;eax</span><br><span class="line">   &#x2F;&#x2F;0x804c3d0 &lt;infile&gt;: &quot;&quot;</span><br><span class="line">   0x08049180 &lt;+99&gt;:call   0x80490b0 &lt;skip&gt;           &#x2F;&#x2F;调用skip()</span><br><span class="line">   0x08049185 &lt;+104&gt;:test   %eax,%eax                  &#x2F;&#x2F;eax &amp; eax</span><br><span class="line">   0x08049187 &lt;+106&gt;:jne    0x80491a1 &lt;read_line+132&gt;  &#x2F;&#x2F;if zf&#x3D;0, jump 0x80491a1 &lt;read_line+132&gt;</span><br><span class="line">   0x08049189 &lt;+108&gt;:movl   $0x804a383,(%esp)          &#x2F;&#x2F;M(esp)&#x3D;0x804a383</span><br><span class="line">   &#x2F;&#x2F;0x804a383: &quot;Error: Premature EOF on stdin&quot;</span><br><span class="line">   0x08049190 &lt;+115&gt;:call   0x8048800 &lt;puts@plt&gt;       &#x2F;&#x2F;puts(0x804a383)</span><br><span class="line">   0x08049195 &lt;+120&gt;:movl   $0x0,(%esp)                &#x2F;&#x2F;M(esp)&#x3D;0x0</span><br><span class="line">   0x0804919c &lt;+127&gt;:call   0x8048840 &lt;exit@plt&gt;       &#x2F;&#x2F;exit(0x0)</span><br><span class="line">   0x080491a1 &lt;+132&gt;:mov    0x804c3cc,%edx             &#x2F;&#x2F;edx&#x3D;M(0x804c3cc)</span><br><span class="line">   &#x2F;&#x2F;0x804c3cc &lt;num_input_strings&gt;:0x00   记录关卡数</span><br><span class="line">   0x080491a7 &lt;+138&gt;:lea    (%edx,%edx,4),%ebx         &#x2F;&#x2F;ebx&#x3D;edx+edx*4&#x3D;5*edx</span><br><span class="line">   0x080491aa &lt;+141&gt;:shl    $0x4,%ebx                  &#x2F;&#x2F;ebx&lt;&lt;4</span><br><span class="line">   0x080491ad &lt;+144&gt;:add    $0x804c3e0,%ebx            &#x2F;&#x2F;ebx&#x3D;ebx+0x804c3e0</span><br><span class="line">   0x080491b3 &lt;+150&gt;:mov    %ebx,%edi                  &#x2F;&#x2F;edi&#x3D;ebx</span><br><span class="line">   0x080491b5 &lt;+152&gt;:mov    $0x0,%eax                  &#x2F;&#x2F;eax&#x3D;0x0</span><br><span class="line">   0x080491ba &lt;+157&gt;:mov    $0xffffffff,%ecx           &#x2F;&#x2F;ecx&#x3D;-1</span><br><span class="line">   0x080491bf &lt;+162&gt;:repnz scas %es:(%edi),%al         &#x2F;&#x2F;?</span><br><span class="line">   0x080491c1 &lt;+164&gt;:not    %ecx                       &#x2F;&#x2F;ecx&#x3D;-ecx</span><br><span class="line">   0x080491c3 &lt;+166&gt;:sub    $0x1,%ecx                  &#x2F;&#x2F;ecx&#x3D;ecx-1</span><br><span class="line">   0x080491c6 &lt;+169&gt;:cmp    $0x4e,%ecx                 &#x2F;&#x2F;compare ecx with 0x4e</span><br><span class="line">   0x080491c9 &lt;+172&gt;:jle    0x8049202 &lt;read_line+229&gt;  &#x2F;&#x2F;if ecx&lt;&#x3D;0x4e, jump 0x8049202 &lt;read_line+229&gt;</span><br><span class="line">   0x080491cb &lt;+174&gt;:movl   $0x804a3ac,(%esp)          &#x2F;&#x2F;M(esp)&#x3D;0x804a3ac</span><br><span class="line">   &#x2F;&#x2F;0x804a3ac: &quot;Error: Input line too long&quot;</span><br><span class="line">   0x080491d2 &lt;+181&gt;:call   0x8048800 &lt;puts@plt&gt;       &#x2F;&#x2F;puts(0x804a3ac)</span><br><span class="line">   0x080491d7 &lt;+186&gt;:mov    0x804c3cc,%eax             &#x2F;&#x2F;eax&#x3D;M(0x804c3cc)</span><br><span class="line">   &#x2F;&#x2F;0x804c3cc &lt;num_input_strings&gt;:0x00   记录关卡数</span><br><span class="line">   0x080491dc &lt;+191&gt;:lea    0x1(%eax),%edx             &#x2F;&#x2F;edx&#x3D;0x1+eax         </span><br><span class="line">   0x080491df &lt;+194&gt;:mov    %edx,0x804c3cc             &#x2F;&#x2F;M(0x804c3cc)&#x3D;edx</span><br><span class="line">   0x080491e5 &lt;+200&gt;:imul   $0x50,%eax,%eax            &#x2F;&#x2F;eax&#x3D;eax*0x50</span><br><span class="line">   0x080491e8 &lt;+203&gt;:add    $0x804c3e0,%eax            &#x2F;&#x2F;eax&#x3D;eax+0x804c3e0</span><br><span class="line">   0x080491ed &lt;+208&gt;:mov    $0x804a3c7,%edx            &#x2F;&#x2F;edx&#x3D;0x804a3c7</span><br><span class="line">   &#x2F;&#x2F;0x804a3c7: &quot;***truncated***&quot;</span><br><span class="line">   0x080491f2 &lt;+213&gt;:mov    $0x4,%ecx                  &#x2F;&#x2F;ecx&#x3D;0x4   </span><br><span class="line">   0x080491f7 &lt;+218&gt;:mov    %eax,%edi                  &#x2F;&#x2F;edi&#x3D;eax</span><br><span class="line">   0x080491f9 &lt;+220&gt;:mov    %edx,%esi                  &#x2F;&#x2F;esi&#x3D;edx</span><br><span class="line">   0x080491fb &lt;+222&gt;:rep movsl %ds:(%esi),%es:(%edi)   &#x2F;&#x2F;?</span><br><span class="line">   0x080491fd &lt;+224&gt;:call   0x80490f6 &lt;explode_bomb&gt;   &#x2F;&#x2F;explode_bomb()</span><br><span class="line">   0x08049202 &lt;+229&gt;:lea    (%edx,%edx,4),%eax         &#x2F;&#x2F;eax&#x3D;5*edx</span><br><span class="line">   0x08049205 &lt;+232&gt;:shl    $0x4,%eax                  &#x2F;&#x2F;eax&#x3D;eax&lt;&lt;4</span><br><span class="line">   0x08049208 &lt;+235&gt;:movb   $0x0,0x804c3df(%ecx,%eax,1) &#x2F;&#x2F;M(0x804c3df+ecx+eax)&#x3D;0x0</span><br><span class="line">   0x08049210 &lt;+243&gt;:add    $0x1,%edx                  &#x2F;&#x2F;edx&#x3D;edx+1</span><br><span class="line">   0x08049213 &lt;+246&gt;:mov    %edx,0x804c3cc             &#x2F;&#x2F;M(0x804c3cc)&#x3D;edx</span><br><span class="line">   0x08049219 &lt;+252&gt;:mov    %ebx,%eax                  &#x2F;&#x2F;eax&#x3D;ebx</span><br><span class="line">   0x0804921b &lt;+254&gt;:mov    0x20(%esp),%ebx            &#x2F;&#x2F;ebx&#x3D;M(0x20+esp)</span><br><span class="line">   0x0804921f &lt;+258&gt;:mov    0x24(%esp),%esi            &#x2F;&#x2F;esi&#x3D;M(0x24+esp)</span><br><span class="line">   0x08049223 &lt;+262&gt;:mov    0x28(%esp),%edi            &#x2F;&#x2F;edi&#x3D;M(0x28+esp)</span><br><span class="line">   0x08049227 &lt;+266&gt;:add    $0x2c,%esp                 &#x2F;&#x2F;栈帧释放空间</span><br><span class="line">   0x0804922a &lt;+269&gt;:ret                               &#x2F;&#x2F;返回地址出栈，并跳转到返回地址</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><ul><li>主函数中多次调用的函数，我们可以得知<ul><li><code>0x804c3cc</code>地址存的是关卡数</li><li>返回值是字符串地址，并且赋给了<code>input</code></li><li><code>0x804c4d0</code>存的是第四关的字符串</li></ul></li></ul><h4 id="phase-1："><a href="#phase-1：" class="headerlink" title="phase_1："></a><code>phase_1</code>：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Dump of assembler code for function phase_1:          &#x2F;&#x2F;函数phase_1(inpput)</span><br><span class="line">   0x08048b50 &lt;+0&gt;:    sub    $0x1c,%esp            &#x2F;&#x2F;在栈中预留0x1c字节的空间                      </span><br><span class="line">   0x08048b53 &lt;+3&gt;:     movl   $0x804a1c4,0x4(%esp)  &#x2F;&#x2F;M(0x4+esp)&#x3D;0x804a1c4</span><br><span class="line">   0x08048b5b &lt;+11&gt;:mov    0x20(%esp),%eax       &#x2F;&#x2F;eax&#x3D;M(0x20+esp)&#x3D;input</span><br><span class="line">   0x08048b5f &lt;+15&gt;:mov    %eax,(%esp)           &#x2F;&#x2F;M(esp)&#x3D;eax&#x3D;input</span><br><span class="line">   0x08048b62 &lt;+18&gt;:call   0x8048fe4 &lt;strings_not_equal&gt; &#x2F;&#x2F;调用strings_not_equal(input,0x804a1c4)函数</span><br><span class="line">   0x08048b67 &lt;+23&gt;:test   %eax,%eax             &#x2F;&#x2F;eax保存函数返回值,执行eax&amp;eax</span><br><span class="line">   0x08048b69 &lt;+25&gt;:je     0x8048b70 &lt;phase_1+32&gt; &#x2F;&#x2F;if zf&#x3D;1, jump 0x8048b70 &lt;phase_1+32&gt;</span><br><span class="line">   0x08048b6b &lt;+27&gt;:call   0x80490f6 &lt;explode_bomb&gt; &#x2F;&#x2F;调用 explode_bomb函数</span><br><span class="line">   0x08048b70 &lt;+32&gt;:add    $0x1c,%esp             &#x2F;&#x2F;释放空间</span><br><span class="line">   0x08048b73 &lt;+35&gt;:ret                           &#x2F;&#x2F;返回地址出栈，并跳转到返回地址              </span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><ul><li><p>为了搞清楚这个过程，我们需要进行<code>gdb</code>调试，下面是一些<code>gdb</code>命令（列出来的我都用了）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gdb&gt; break *&lt;&lt;函数名&gt;+&lt;偏移值&gt;&gt;                             &#x2F;&#x2F;设置断点</span><br><span class="line">gdb&gt; run                                                  &#x2F;&#x2F;运行</span><br><span class="line">gdb&gt; step                                                 &#x2F;&#x2F;下一步</span><br><span class="line">gdb&gt; info registers &lt;寄存器&gt;                               &#x2F;&#x2F;列出寄存器的值，寄存器可选</span><br><span class="line">gdb&gt; set var &lt;寄存器或者变量&gt;&#x3D;&lt;0x111&gt;                        &#x2F;&#x2F;改变寄存器的值</span><br><span class="line">gdb&gt; set *&lt;内存地址&gt;&#x3D;&lt;0x11&gt;                                 &#x2F;&#x2F;改变内存的值</span><br><span class="line">gdb&gt; x&#x2F;nfu &lt;内存地址&gt;                  &#x2F;&#x2F;查看内存地址的值，examine简写为x，n长度，f显示格式，u一个地址单元的长度</span><br></pre></td></tr></table></figure></li><li><p>所以<code>phase_1</code>的过程就是：将<code>input</code>与<code>0x804a1c4</code>的字符串比较，如果想</p></li><li><p>执行命令，查看<code>0x804a1c4</code>地址的字符串<br><img src="/2021/05/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94LAB-3_BombLab/image-20210428220435495.png" alt="image-20210428220435495"></p></li><li><p>运行，输入与<code>0x804a1c4</code>地址的字符串相等的<code>input</code>字符串，提示炸弹已经被拆，下一关！<br><img src="/2021/05/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94LAB-3_BombLab/image-20210428220713564.png" alt="image-20210428220713564"></p></li></ul><h4 id="phase-2："><a href="#phase-2：" class="headerlink" title="phase_2："></a><code>phase_2</code>：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Dump of assembler code for function phase_2:      &#x2F;&#x2F;函数phase_2(input)</span><br><span class="line">   0x08048b74 &lt;+0&gt;:push   %esi                   &#x2F;&#x2F;将程序的入口地址压入栈中</span><br><span class="line">   0x08048b75 &lt;+1&gt;:push   %ebx                   &#x2F;&#x2F;将被调用者保存寄存器中的值压入栈中，以便在返回前可以恢复它们</span><br><span class="line">   0x08048b76 &lt;+2&gt;:sub    $0x34,%esp             &#x2F;&#x2F;栈帧预留0x34字节空间</span><br><span class="line">   0x08048b79 &lt;+5&gt;:lea    0x18(%esp),%eax        &#x2F;&#x2F;eax&#x3D;0x18+esp&#x3D;a[]</span><br><span class="line">   0x08048b7d &lt;+9&gt;:mov    %eax,0x4(%esp)         &#x2F;&#x2F;M(0x4+esp)&#x3D;eax&#x3D;0x18+esp&#x3D;a[]</span><br><span class="line">   0x08048b81 &lt;+13&gt;:mov    0x40(%esp),%eax    &#x2F;&#x2F;eax&#x3D;M(0x40+esp)&#x3D;input</span><br><span class="line">   0x08048b85 &lt;+17&gt;:mov    %eax,(%esp)        &#x2F;&#x2F;M(esp)&#x3D;eax&#x3D;input</span><br><span class="line">   0x08048b88 &lt;+20&gt;:call   0x804922b &lt;read_six_numbers&gt;    &#x2F;&#x2F;调用read_six_numbers(input,a[]&#x3D;0x18+esp)</span><br><span class="line">   0x08048b8d &lt;+25&gt;:cmpl   $0x1,0x18(%esp)    &#x2F;&#x2F;compare M(0x18+esp) with 0x1</span><br><span class="line">   0x08048b92 &lt;+30&gt;:je     0x8048b99 &lt;phase_2+37&gt; &#x2F;&#x2F;if zf&#x3D;1, jump 0x8048b99 &lt;phase_2+37&gt;</span><br><span class="line">   0x08048b94 &lt;+32&gt;:call   0x80490f6 &lt;explode_bomb&gt; &#x2F;&#x2F;调用explode_bomb()</span><br><span class="line">   0x08048b99 &lt;+37&gt;:lea    0x1c(%esp),%ebx    &#x2F;&#x2F;ebx&#x3D;0x1c+esp&#x3D;&amp;a[1]</span><br><span class="line">   0x08048b9d &lt;+41&gt;:lea    0x30(%esp),%esi    &#x2F;&#x2F;esi&#x3D;0x30+esp&#x3D;&amp;a[5]</span><br><span class="line">   0x08048ba1 &lt;+45&gt;:mov    -0x4(%ebx),%eax    &#x2F;&#x2F;eax&#x3D;M(-0x4+ebx)</span><br><span class="line">   0x08048ba4 &lt;+48&gt;:add    %eax,%eax          &#x2F;&#x2F;eax&#x3D;eax+eax&#x3D;2*M(-0x4+ebx)</span><br><span class="line">   0x08048ba6 &lt;+50&gt;:cmp    %eax,(%ebx)        &#x2F;&#x2F;compare M(ebx) with eax&#x3D;2*M(-0x4+ebx)</span><br><span class="line">   0x08048ba8 &lt;+52&gt;:je     0x8048baf &lt;phase_2+59&gt; &#x2F;&#x2F;if zf&#x3D;1, jump 0x8048baf &lt;phase_2+59&gt;</span><br><span class="line">   0x08048baa &lt;+54&gt;:call   0x80490f6 &lt;explode_bomb&gt; &#x2F;&#x2F;调用&lt;explode_bomb&gt;函数</span><br><span class="line">   0x08048baf &lt;+59&gt;:add    $0x4,%ebx          &#x2F;&#x2F;ebx&#x3D;ebx+4</span><br><span class="line">   0x08048bb2 &lt;+62&gt;:cmp    %esi,%ebx          &#x2F;&#x2F;compare ebx with esi&#x3D;0x30+esp&#x3D;&amp;a[5]</span><br><span class="line">   0x08048bb4 &lt;+64&gt;:jne    0x8048ba1 &lt;phase_2+45&gt; &#x2F;&#x2F;if zf&#x3D;0, jump 0x8048ba1 &lt;phase_2+45&gt;</span><br><span class="line">   0x08048bb6 &lt;+66&gt;:add    $0x34,%esp         &#x2F;&#x2F;释放栈帧空间</span><br><span class="line">   0x08048bb9 &lt;+69&gt;:pop    %ebx               &#x2F;&#x2F;恢复ebx原先的数据</span><br><span class="line">   0x08048bba &lt;+70&gt;:pop    %esi               &#x2F;&#x2F;弹出程序的入口地址</span><br><span class="line">   0x08048bbb &lt;+71&gt;:ret                       &#x2F;&#x2F;返回地址出栈，并跳转到返回地址</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><ul><li>分析可得<code>phase_2</code>的过程是：输入6个数并将其地址保存在栈中，第一个数<code>a[0]</code>要等于1，否则爆炸；从第二个数<code>a[1]</code>开始，每个数都必须等于它前一个数的2倍，否则爆炸。</li><li>所以我们得到的六个数字是：<code>1 2 4 8 16 32 64</code>，测试，成功！<br><img src="/2021/05/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94LAB-3_BombLab/image-20210430085749377.png" alt="image-20210430085749377"></li></ul><h4 id="phase-3："><a href="#phase-3：" class="headerlink" title="phase_3："></a><code>phase_3</code>：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">Dump of assembler code for function phase_3:         &#x2F;&#x2F;函数phase_3(input)</span><br><span class="line">   0x08048bbc &lt;+0&gt;:    sub    $0x2c,%esp            &#x2F;&#x2F;栈帧预留0x2c字节的空间</span><br><span class="line">   0x08048bbf &lt;+3&gt;:    lea    0x1c(%esp),%eax       &#x2F;&#x2F;eax&#x3D;0x1c+esp</span><br><span class="line">   0x08048bc3 &lt;+7&gt;:    mov    %eax,0xc(%esp)        &#x2F;&#x2F;M(0xc+esp)&#x3D;eax</span><br><span class="line">   0x08048bc7 &lt;+11&gt;:lea    0x18(%esp),%eax       &#x2F;&#x2F;eax&#x3D;0x18+esp</span><br><span class="line">   0x08048bcb &lt;+15&gt;:mov    %eax,0x8(%esp)        &#x2F;&#x2F;M(0x8+esp)&#x3D;eax</span><br><span class="line">   0x08048bcf &lt;+19&gt;:movl   $0x804a3e3,0x4(%esp)  &#x2F;&#x2F;M(0x4+esp)&#x3D;0x804a3e3</span><br><span class="line">   0x08048bd7 &lt;+27&gt;:mov    0x30(%esp),%eax       &#x2F;&#x2F;eax&#x3D;M(0x30+esp)&#x3D;input</span><br><span class="line">   0x08048bdb &lt;+31&gt;:mov    %eax,(%esp)           &#x2F;&#x2F;M(esp)&#x3D;M(0x30+esp)&#x3D;input</span><br><span class="line">   0x08048bde &lt;+34&gt;:call   0x8048870 &lt;__isoc99_sscanf@plt&gt;  &#x2F;&#x2F;调用__isoc99_sscanf@plt(input,0x804a3e3,0x18+esp，0x1c+esp)</span><br><span class="line">   0x08048be3 &lt;+39&gt;:cmp    $0x1,%eax             &#x2F;&#x2F;compare eax with 0x1,eax返回值是参数个数</span><br><span class="line">   0x08048be6 &lt;+42&gt;:jg     0x8048bed &lt;phase_3+49&gt;  &#x2F;&#x2F;if eax&gt;0x1, jump 0x8048bed &lt;phase_3+49&gt;</span><br><span class="line">   0x08048be8 &lt;+44&gt;:call   0x80490f6 &lt;explode_bomb&gt;  &#x2F;&#x2F;调用explode_bomb()</span><br><span class="line">   0x08048bed &lt;+49&gt;:cmpl   $0x7,0x18(%esp)        &#x2F;&#x2F;compare M(0x18+esp) with 0x7</span><br><span class="line">   0x08048bf2 &lt;+54&gt;:ja     0x8048c30 &lt;phase_3+116&gt; &#x2F;&#x2F;if M(0x18+esp)&gt;0x7, jump 0x8048c30&lt;phase_3+116&gt;</span><br><span class="line">   0x08048bf4 &lt;+56&gt;:mov    0x18(%esp),%eax       &#x2F;&#x2F;eax&#x3D;M(0x18+esp)</span><br><span class="line">   0x08048bf8 &lt;+60&gt;:jmp    *0x804a220(,%eax,4)   &#x2F;&#x2F;jump M(0x804a220+4*eax)</span><br><span class="line">   0x08048bff &lt;+67&gt;:mov    $0x32d,%eax           &#x2F;&#x2F;eax&#x3D;0x32d</span><br><span class="line">   0x08048c04 &lt;+72&gt;:jmp    0x8048c41 &lt;phase_3+133&gt;  &#x2F;&#x2F;jump 0x8048c41 &lt;phase_3+133&gt;</span><br><span class="line">   0x08048c06 &lt;+74&gt;:mov    $0x36c,%eax           &#x2F;&#x2F;eax&#x3D;0x36c</span><br><span class="line">   0x08048c0b &lt;+79&gt;:jmp    0x8048c41 &lt;phase_3+133&gt;  &#x2F;&#x2F;jump 0x8048c41 &lt;phase_3+133&gt;</span><br><span class="line">   0x08048c0d &lt;+81&gt;:mov    $0x3db,%eax           &#x2F;&#x2F;eax&#x3D;0x3db</span><br><span class="line">   0x08048c12 &lt;+86&gt;:jmp    0x8048c41 &lt;phase_3+133&gt;  &#x2F;&#x2F;jump 0x8048c41 &lt;phase_3+133&gt;</span><br><span class="line">   0x08048c14 &lt;+88&gt;:mov    $0x16d,%eax           &#x2F;&#x2F;eax&#x3D;0x16d</span><br><span class="line">   0x08048c19 &lt;+93&gt;:jmp    0x8048c41 &lt;phase_3+133&gt;  &#x2F;&#x2F;jump 0x8048c41 &lt;phase_3+133&gt;</span><br><span class="line">   0x08048c1b &lt;+95&gt;:mov    $0x3d1,%eax            &#x2F;&#x2F;eax&#x3D;0x3d1</span><br><span class="line">   0x08048c20 &lt;+100&gt;:jmp    0x8048c41 &lt;phase_3+133&gt;  &#x2F;&#x2F;jump 0x8048c41 &lt;phase_3+133&gt;</span><br><span class="line">   0x08048c22 &lt;+102&gt;:mov    $0x3cb,%eax            &#x2F;&#x2F;eax&#x3D;0x3cb</span><br><span class="line">   0x08048c27 &lt;+107&gt;:jmp    0x8048c41 &lt;phase_3+133&gt;  &#x2F;&#x2F;jump 0x8048c41 &lt;phase_3+133&gt;</span><br><span class="line">   0x08048c29 &lt;+109&gt;:mov    $0x21c,%eax            &#x2F;&#x2F;eax&#x3D;0x21c</span><br><span class="line">   0x08048c2e &lt;+114&gt;:jmp    0x8048c41 &lt;phase_3+133&gt;  &#x2F;&#x2F;jump 0x8048c41 &lt;phase_3+133&gt;</span><br><span class="line">   0x08048c30 &lt;+116&gt;:call   0x80490f6 &lt;explode_bomb&gt; &#x2F;&#x2F;调用explode_bomb()</span><br><span class="line">   0x08048c35 &lt;+121&gt;:mov    $0x0,%eax              &#x2F;&#x2F;eax&#x3D;0x0</span><br><span class="line">   0x08048c3a &lt;+126&gt;:jmp    0x8048c41 &lt;phase_3+133&gt;  &#x2F;&#x2F;jump 0x8048c41 &lt;phase_3+133&gt;</span><br><span class="line">   0x08048c3c &lt;+128&gt;:mov    $0x283,%eax            &#x2F;&#x2F;eax&#x3D;0x283</span><br><span class="line">   0x08048c41 &lt;+133&gt;:cmp    0x1c(%esp),%eax        &#x2F;&#x2F;compare eax with M(0x1c+esp)</span><br><span class="line">   0x08048c45 &lt;+137&gt;:je     0x8048c4c &lt;phase_3+144&gt; &#x2F;&#x2F;if zf&#x3D;1, jump 0x8048c4c &lt;phase_3+144&gt;</span><br><span class="line">   0x08048c47 &lt;+139&gt;:call   0x80490f6 &lt;explode_bomb&gt;  &#x2F;&#x2F;调用explode_bomb()</span><br><span class="line">   0x08048c4c &lt;+144&gt;:add    $0x2c,%esp             &#x2F;&#x2F;释放栈帧空间</span><br><span class="line">   0x08048c4f &lt;+147&gt;:ret                           &#x2F;&#x2F;返回地址出栈，并跳转到返回地址</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><ul><li><code>__isoc99_sscanf@plt</code>的第二个参数是<code>0x804a3e3</code>，以字符串的形式查看内存，所以我们知道后两个参数地址存的都是整数。<br><img src="/2021/05/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94LAB-3_BombLab/image-20210430191833050.png" alt="image-20210430191833050">、</li><li><code>0x08048bed &lt;+49&gt;:    cmpl   $0x7,0x18(%esp)</code>可知，第一个整数范围是0-7，不能是负数因为<code>ja</code>是无符号比较，出范围就爆炸</li><li><code>0x08048bf8 &lt;+60&gt;:    jmp    *0x804a220(,%eax,4)</code>可知，根据第一个整数，决定跳转到什么位置<ul><li>查看这8个不同跳转位置<br><img src="/2021/05/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94LAB-3_BombLab/image-20210430200908533.png" alt="image-20210430200908533"></li><li>因此我们得到了八个不同的输入组合：<br><code>0 813</code>、<code>1  643</code>、<code>2  876</code>、<code>3  987</code>、<code>4  365</code>、<code>5  977</code>、<code>6  971</code>、<code>7 540 </code></li><li>经验证，这几个都是符合的答案</li></ul></li><li>我们选<code>0 813</code>输入，输出成功拆除的提示语，第三关结束。<br><img src="/2021/05/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94LAB-3_BombLab/image-20210430204301058.png" alt="image-20210430204301058"></li></ul><h4 id="phase-4："><a href="#phase-4：" class="headerlink" title="phase_4："></a><code>phase_4</code>：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Dump of assembler code for function phase_4:               &#x2F;&#x2F;函数phase(input)</span><br><span class="line">   0x08048cb9 &lt;+0&gt;:    sub    $0x2c,%esp                  &#x2F;&#x2F;栈帧预留0x2c字节的空间</span><br><span class="line">   0x08048cbc &lt;+3&gt;:    lea    0x1c(%esp),%eax             &#x2F;&#x2F;eax&#x3D;0x1c+esp</span><br><span class="line">   0x08048cc0 &lt;+7&gt;:    mov    %eax,0xc(%esp)              &#x2F;&#x2F;M(0xc+esp)&#x3D;eax</span><br><span class="line">   0x08048cc4 &lt;+11&gt;:lea    0x18(%esp),%eax             &#x2F;&#x2F;eax&#x3D;0x18+esp</span><br><span class="line">   0x08048cc8 &lt;+15&gt;:mov    %eax,0x8(%esp)              &#x2F;&#x2F;M(0x8+esp)&#x3D;eax</span><br><span class="line">   0x08048ccc &lt;+19&gt;:movl   $0x804a3e3,0x4(%esp)        &#x2F;&#x2F;M(0x4+esp)&#x3D;0x804a3e3</span><br><span class="line">   0x08048cd4 &lt;+27&gt;:mov    0x30(%esp),%eax             &#x2F;&#x2F;eax&#x3D;M(0x30+esp)&#x3D;input</span><br><span class="line">   0x08048cd8 &lt;+31&gt;:mov    %eax,(%esp)                 &#x2F;&#x2F;M(esp)&#x3D;input</span><br><span class="line">   0x08048cdb &lt;+34&gt;:call   0x8048870 &lt;__isoc99_sscanf@plt&gt; &#x2F;&#x2F;调用__isoc99_sscanf@plt(input,0x804a3e3,0x18+esp,0x1c+esp)</span><br><span class="line">   0x08048ce0 &lt;+39&gt;:cmp    $0x2,%eax                   &#x2F;&#x2F;compare eax with 0x2</span><br><span class="line">   0x08048ce3 &lt;+42&gt;:jne    0x8048cf2 &lt;phase_4+57&gt;      &#x2F;&#x2F;if zf&#x3D;0, jump 0x8048cf2 &lt;phase_4+57&gt;</span><br><span class="line">   0x08048ce5 &lt;+44&gt;:mov    0x18(%esp),%eax             &#x2F;&#x2F;eax&#x3D;M(0x18+esp)</span><br><span class="line">   0x08048ce9 &lt;+48&gt;:test   %eax,%eax                   &#x2F;&#x2F;eax &amp; eax</span><br><span class="line">   0x08048ceb &lt;+50&gt;:js     0x8048cf2 &lt;phase_4+57&gt;      &#x2F;&#x2F;if sf&#x3D;1, jump 0x8048cf2 &lt;phase_4+57&gt;</span><br><span class="line">   0x08048ced &lt;+52&gt;:cmp    $0xe,%eax                   &#x2F;&#x2F;compare eax with 0xe</span><br><span class="line">   0x08048cf0 &lt;+55&gt;:jle    0x8048cf7 &lt;phase_4+62&gt;      &#x2F;&#x2F;if eax&lt;&#x3D;0xe, jump 0x8048cf7 &lt;phase_4+62&gt;</span><br><span class="line">   0x08048cf2 &lt;+57&gt;:call   0x80490f6 &lt;explode_bomb&gt;    &#x2F;&#x2F;调用explode_bomb()</span><br><span class="line">   0x08048cf7 &lt;+62&gt;:movl   $0xe,0x8(%esp)              &#x2F;&#x2F;M(0x8+esp)&#x3D;0xe</span><br><span class="line">   0x08048cff &lt;+70&gt;:movl   $0x0,0x4(%esp)              &#x2F;&#x2F;M(0x4+esp)&#x3D;0x0</span><br><span class="line">   0x08048d07 &lt;+78&gt;:mov    0x18(%esp),%eax             &#x2F;&#x2F;eax&#x3D;M(0x18+esp)</span><br><span class="line">   0x08048d0b &lt;+82&gt;:mov    %eax,(%esp)                 &#x2F;&#x2F;M(esp)&#x3D;eax</span><br><span class="line">   0x08048d0e &lt;+85&gt;:call   0x8048c50 &lt;func4&gt;           &#x2F;&#x2F;调用fun4(M(0x18+esp), 0x0, 0xe)</span><br><span class="line">   0x08048d13 &lt;+90&gt;:cmp    $0x15,%eax                  &#x2F;&#x2F;compare eax with 0x15</span><br><span class="line">   0x08048d16 &lt;+93&gt;:jne    0x8048d1f &lt;phase_4+102&gt;     &#x2F;&#x2F;if zf&#x3D;0, jump 0x8048d1f &lt;phase_4+102&gt;</span><br><span class="line">   0x08048d18 &lt;+95&gt;:cmpl   $0x15,0x1c(%esp)            &#x2F;&#x2F;compare M(0x1c+esp) with 0x15</span><br><span class="line">   0x08048d1d &lt;+100&gt;:je     0x8048d24 &lt;phase_4+107&gt;     &#x2F;&#x2F;if zf&#x3D;1, jump 0x8048d24 &lt;phase_4+107&gt;</span><br><span class="line">   0x08048d1f &lt;+102&gt;:call   0x80490f6 &lt;explode_bomb&gt;    &#x2F;&#x2F;调用explode_bomb()</span><br><span class="line">   0x08048d24 &lt;+107&gt;:add    $0x2c,%esp                  &#x2F;&#x2F;栈帧释放空间</span><br><span class="line">   0x08048d27 &lt;+110&gt;:ret                                &#x2F;&#x2F;返回地址出栈，并跳转到返回地址</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><ul><li><p>查看<code>scanf</code>的参数，在<code>0x804a3e3</code>以字符串的形式输出，我们看到是两个整数</p><p><img src="/2021/05/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94LAB-3_BombLab/image-20210430230148066.png" alt="image-20210430230148066"></p></li><li><p><code>0x08048d18 &lt;+95&gt;:    cmpl   $0x15,0x1c(%esp)</code><br>我们分析<code>M(0x1c+%esp)</code>要等于<code>0x15</code></p></li><li><p><code>0x08048d13 &lt;+90&gt;:    cmp    $0x15,%eax</code><br>我们需要知道<code>M(0x18+%esp)</code>到底等于多少，才能作为参数让<code>fun4(M(0x18+esp), 0x0, 0xe)</code>的返回值等于<code>0x15</code></p></li></ul><h5 id="func4"><a href="#func4" class="headerlink" title="func4"></a><code>func4</code></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">Dump of assembler code for function func4:                  &#x2F;&#x2F;函数fun4(x,second,third)</span><br><span class="line">   0x08048c50 &lt;+0&gt;:sub    $0x1c,%esp                       &#x2F;&#x2F;栈帧预留0x1c字节的空间</span><br><span class="line">   0x08048c53 &lt;+3&gt;:    mov    %ebx,0x14(%esp)              &#x2F;&#x2F;M(0x14+esp)&#x3D;ebx</span><br><span class="line">   0x08048c57 &lt;+7&gt;:    mov    %esi,0x18(%esp)              &#x2F;&#x2F;M(0x18+esp)&#x3D;esi</span><br><span class="line">   0x08048c5b &lt;+11&gt;:mov    0x20(%esp),%eax              &#x2F;&#x2F;eax&#x3D;M(0x20+esp)&#x3D;x</span><br><span class="line">   0x08048c5f &lt;+15&gt;:mov    0x24(%esp),%edx              &#x2F;&#x2F;edx&#x3D;M(0x24+esp)&#x3D;second</span><br><span class="line">   0x08048c63 &lt;+19&gt;:mov    0x28(%esp),%esi              &#x2F;&#x2F;esi&#x3D;M(0x28+esp)&#x3D;third</span><br><span class="line">   0x08048c67 &lt;+23&gt;:mov    %esi,%ecx                    &#x2F;&#x2F;ecx&#x3D;esi&#x3D;third</span><br><span class="line">   0x08048c69 &lt;+25&gt;:sub    %edx,%ecx                    &#x2F;&#x2F;ecx&#x3D;ecx-edx&#x3D;third-second</span><br><span class="line">   0x08048c6b &lt;+27&gt;:mov    %ecx,%ebx                    &#x2F;&#x2F;ebx&#x3D;ecx&#x3D;third-second</span><br><span class="line">   0x08048c6d &lt;+29&gt;:shr    $0x1f,%ebx                   &#x2F;&#x2F;ebx逻辑右移31位,ebx&#x3D;(third-second)&lt;0 ? 1:0</span><br><span class="line">   0x08048c70 &lt;+32&gt;:add    %ebx,%ecx             &#x2F;&#x2F;ecx&#x3D;ebx+ecx&#x3D;third-second+(third-second)&lt;0 ? 1:0</span><br><span class="line">   0x08048c72 &lt;+34&gt;:sar    %ecx                         &#x2F;&#x2F;ecx默认算术右移1位,ecx&#x3D;ecx&#x2F;2</span><br><span class="line">   0x08048c74 &lt;+36&gt;:lea    (%ecx,%edx,1),%ebx           &#x2F;&#x2F;ebx&#x3D;ecx+edx&#x3D;ecx+second&#x3D;average</span><br><span class="line">   0x08048c77 &lt;+39&gt;:cmp    %eax,%ebx                    &#x2F;&#x2F;compare ebx&#x3D;average with eax&#x3D;x</span><br><span class="line">   0x08048c79 &lt;+41&gt;:jle    0x8048c92 &lt;func4+66&gt;   &#x2F;&#x2F;if ebx&#x3D;average&lt;&#x3D;eax&#x3D;x, jump 0x8048c92 &lt;func4+66&gt;</span><br><span class="line">   0x08048c7b &lt;+43&gt;:lea    -0x1(%ebx),%ecx              &#x2F;&#x2F;ecx&#x3D;-0x1+ebx&#x3D;average-1</span><br><span class="line">   0x08048c7e &lt;+46&gt;:mov    %ecx,0x8(%esp)               &#x2F;&#x2F;M(0x8+esp)&#x3D;ecx&#x3D;average-1</span><br><span class="line">   0x08048c82 &lt;+50&gt;:mov    %edx,0x4(%esp)               &#x2F;&#x2F;M(0x4+esp)&#x3D;edx&#x3D;second</span><br><span class="line">   0x08048c86 &lt;+54&gt;:mov    %eax,(%esp)                  &#x2F;&#x2F;M(esp)&#x3D;eax&#x3D;x</span><br><span class="line">   0x08048c89 &lt;+57&gt;:call   0x8048c50 &lt;func4&gt;            &#x2F;&#x2F;调用fun4(x,second,average-1)</span><br><span class="line">   0x08048c8e &lt;+62&gt;:add    %eax,%ebx                 &#x2F;&#x2F;ebx&#x3D;ebx+eax&#x3D;average+fun4(x,second,average-1)</span><br><span class="line">   0x08048c90 &lt;+64&gt;:jmp    0x8048cab &lt;func4+91&gt;         &#x2F;&#x2F;jump 0x8048cab &lt;func4+91&gt;</span><br><span class="line">   0x08048c92 &lt;+66&gt;:cmp    %eax,%ebx                    &#x2F;&#x2F;compare ebx&#x3D;average with eax&#x3D;x</span><br><span class="line">   0x08048c94 &lt;+68&gt;:jge    0x8048cab &lt;func4+91&gt;   &#x2F;&#x2F;if ebx&#x3D;average&gt;&#x3D;eax&#x3D;x, jump 0x8048cab &lt;func4+91&gt; </span><br><span class="line">   0x08048c96 &lt;+70&gt;:mov    %esi,0x8(%esp)               &#x2F;&#x2F;M(0x8+esp)&#x3D;esi&#x3D;third</span><br><span class="line">   0x08048c9a &lt;+74&gt;:lea    0x1(%ebx),%edx               &#x2F;&#x2F;edx&#x3D;0x1+ebx&#x3D;average+1</span><br><span class="line">   0x08048c9d &lt;+77&gt;:mov    %edx,0x4(%esp)               &#x2F;&#x2F;M(0x4+esp)&#x3D;edx&#x3D;average+1</span><br><span class="line">   0x08048ca1 &lt;+81&gt;:mov    %eax,(%esp)                  &#x2F;&#x2F;M(esp)&#x3D;eax&#x3D;x</span><br><span class="line">   0x08048ca4 &lt;+84&gt;:call   0x8048c50 &lt;func4&gt;            &#x2F;&#x2F;调用fun4(x,average+1,third)</span><br><span class="line">   0x08048ca9 &lt;+89&gt;:add    %eax,%ebx                   &#x2F;&#x2F;ebx&#x3D;ebx+eax&#x3D;average+fun4(x,average+1,third)</span><br><span class="line">   0x08048cab &lt;+91&gt;:mov    %ebx,%eax                    &#x2F;&#x2F;eax&#x3D;ebx</span><br><span class="line">   0x08048cad &lt;+93&gt;:mov    0x14(%esp),%ebx              &#x2F;&#x2F;ebx&#x3D;M(0x14+esp)</span><br><span class="line">   0x08048cb1 &lt;+97&gt;:mov    0x18(%esp),%esi              &#x2F;&#x2F;esi&#x3D;M(0x18+esp)</span><br><span class="line">   0x08048cb5 &lt;+101&gt;:add    $0x1c,%esp                   &#x2F;&#x2F;栈帧释放空间</span><br><span class="line">   0x08048cb8 &lt;+104&gt;:ret                                 &#x2F;&#x2F;返回地址出栈，并跳转到返回地址</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><ul><li>我们将<code>fun4</code>函数翻译成C语言代码，主函数遍历<code>func4</code>第一个参数<code>x</code>，如果返回值等于<code>0x15</code>也就是<code>21</code>，那就是正确答案</li></ul><h5 id="func4转换成C语言："><a href="#func4转换成C语言：" class="headerlink" title="func4转换成C语言："></a><code>func4</code>转换成C语言：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func4</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> second, <span class="keyword">int</span> third)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> average = second + (third - second + ((third - second) &lt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>)) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (x &lt; average) &#123;</span><br><span class="line"><span class="keyword">return</span> average + <span class="built_in">func4</span>(x, second, average - <span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; average) &#123;</span><br><span class="line"><span class="keyword">return</span> average + <span class="built_in">func4</span>(x, average + <span class="number">1</span>, third);</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> average;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">15</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">func4</span>(i, <span class="number">0</span>, <span class="number">15</span>) == <span class="number">21</span>)</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>输出结果如下：<br><img src="/2021/05/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94LAB-3_BombLab/image-20210501104004856.png" alt="image-20210501104004856"></li><li>所以第四关答案为：<code>6 21</code>，输入验证，输出过关提示语<br><img src="/2021/05/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94LAB-3_BombLab/image-20210501104406772.png" alt="image-20210501104406772"></li></ul><h4 id="phase-5："><a href="#phase-5：" class="headerlink" title="phase_5："></a><code>phase_5</code>：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">Dump of assembler code for function phase_5:                     &#x2F;&#x2F;函数phase_5(input)</span><br><span class="line">   0x08048d28 &lt;+0&gt;:sub    $0x2c,%esp                            &#x2F;&#x2F;栈帧预留0x2c字节的空间</span><br><span class="line">   0x08048d2b &lt;+3&gt;:    lea    0x1c(%esp),%eax                   &#x2F;&#x2F;eax&#x3D;0x1c+esp</span><br><span class="line">   0x08048d2f &lt;+7&gt;:    mov    %eax,0xc(%esp)                    &#x2F;&#x2F;M(0xc+esp)&#x3D;eax&#x3D;0x1c+esp</span><br><span class="line">   0x08048d33 &lt;+11&gt;:lea    0x18(%esp),%eax                   &#x2F;&#x2F;eax&#x3D;0x18+esp</span><br><span class="line">   0x08048d37 &lt;+15&gt;:mov    %eax,0x8(%esp)                    &#x2F;&#x2F;M(0x8+esp)&#x3D;eax&#x3D;0x18+esp</span><br><span class="line">   0x08048d3b &lt;+19&gt;:movl   $0x804a3e3,0x4(%esp)              &#x2F;&#x2F;M(0x4+esp)&#x3D;0x804a3e3</span><br><span class="line">   0x08048d43 &lt;+27&gt;:mov    0x30(%esp),%eax                   &#x2F;&#x2F;eax&#x3D;M(0x30+esp)&#x3D;input</span><br><span class="line">   0x08048d47 &lt;+31&gt;:mov    %eax,(%esp)                       &#x2F;&#x2F;M(esp)&#x3D;eax&#x3D;input</span><br><span class="line">   0x08048d4a &lt;+34&gt;:call   0x8048870 &lt;__isoc99_sscanf@plt&gt;   &#x2F;&#x2F;调用__isoc99_sscanf@plt(input,0x804a3e3,0x18+esp,0x1c+esp)</span><br><span class="line">   0x08048d4f &lt;+39&gt;:cmp    $0x1,%eax                         &#x2F;&#x2F;compare eax with 0x1</span><br><span class="line">   0x08048d52 &lt;+42&gt;:jg     0x8048d59 &lt;phase_5+49&gt;          &#x2F;&#x2F;if eax&gt;0x1, jump 0x8048d59 &lt;phase_5+49&gt;</span><br><span class="line">   0x08048d54 &lt;+44&gt;:call   0x80490f6 &lt;explode_bomb&gt;          &#x2F;&#x2F;调用explode_bomb()</span><br><span class="line">   0x08048d59 &lt;+49&gt;:mov    0x18(%esp),%eax                   &#x2F;&#x2F;eax&#x3D;M(0x18+esp)</span><br><span class="line">   0x08048d5d &lt;+53&gt;:and    $0xf,%eax                         &#x2F;&#x2F;eax&#x3D;eax &amp; 0xf</span><br><span class="line">   0x08048d60 &lt;+56&gt;:mov    %eax,0x18(%esp)                   &#x2F;&#x2F;M(0x18+esp)&#x3D;eax</span><br><span class="line">   0x08048d64 &lt;+60&gt;:cmp    $0xf,%eax                         &#x2F;&#x2F;compare eax with 0xf</span><br><span class="line">   0x08048d67 &lt;+63&gt;:je     0x8048d93 &lt;phase_5+107&gt;           &#x2F;&#x2F;if zf&#x3D;1, jump 0x8048d93 &lt;phase_5+107&gt;</span><br><span class="line">   0x08048d69 &lt;+65&gt;:mov    $0x0,%ecx                         &#x2F;&#x2F;ecx&#x3D;0x0</span><br><span class="line">   0x08048d6e &lt;+70&gt;:mov    $0x0,%edx                         &#x2F;&#x2F;edx&#x3D;0x0</span><br><span class="line">   0x08048d73 &lt;+75&gt;:add    $0x1,%edx                         &#x2F;&#x2F;edx&#x3D;edx+1</span><br><span class="line">   0x08048d76 &lt;+78&gt;:mov    0x804a240(,%eax,4),%eax           &#x2F;&#x2F;eax&#x3D;M(0x804a240+4*eax)&#x3D;array[eax]</span><br><span class="line">   0x08048d7d &lt;+85&gt;:add    %eax,%ecx                         &#x2F;&#x2F;ecx&#x3D;ecx+eax</span><br><span class="line">   0x08048d7f &lt;+87&gt;:cmp    $0xf,%eax                         &#x2F;&#x2F;compare eax with 0xf</span><br><span class="line">   0x08048d82 &lt;+90&gt;:jne    0x8048d73 &lt;phase_5+75&gt;            &#x2F;&#x2F;if zf&#x3D;0, jump 0x8048d73 &lt;phase_5+75&gt;</span><br><span class="line">   0x08048d84 &lt;+92&gt;:mov    %eax,0x18(%esp)                   &#x2F;&#x2F;M(0x18+esp)&#x3D;eax</span><br><span class="line">   0x08048d88 &lt;+96&gt;:cmp    $0xf,%edx                         &#x2F;&#x2F;compare edx with 0xf</span><br><span class="line">   0x08048d8b &lt;+99&gt;:jne    0x8048d93 &lt;phase_5+107&gt;           &#x2F;&#x2F;if zf&#x3D;0, jump 0x8048d93 &lt;phase_5+107&gt;</span><br><span class="line">   0x08048d8d &lt;+101&gt;:cmp    0x1c(%esp),%ecx                   &#x2F;&#x2F;compare ecx with M(0x1c+esp)</span><br><span class="line">   0x08048d91 &lt;+105&gt;:je     0x8048d98 &lt;phase_5+112&gt;           &#x2F;&#x2F;if zf&#x3D;1, jump 0x8048d98 &lt;phase_5+112&gt; </span><br><span class="line">   0x08048d93 &lt;+107&gt;:call   0x80490f6 &lt;explode_bomb&gt;          &#x2F;&#x2F;调用explode_bomb()</span><br><span class="line">   0x08048d98 &lt;+112&gt;:add    $0x2c,%esp                        &#x2F;&#x2F;栈帧释放空间</span><br><span class="line">   0x08048d9b &lt;+115&gt;:ret                                      &#x2F;&#x2F;返回地址出栈，且跳转到返回地址</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><ul><li><p>还是先看输入，还是两个整数<br><img src="/2021/05/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94LAB-3_BombLab/image-20210501104814076.png" alt="image-20210501104814076"></p></li><li><p>过程：保存求和结果的<code>ecx</code>和发挥计数作用的<code>edx</code>都初始化为0<br><code>edx</code>加1，输入的<code>M(0x18+esp)</code>作为下标将<code>array[M(0x18+esp)]</code>存到<code>eax</code>，<code>ecx</code>加上<code>eax</code>也就是这个元素值<code>array[M(0x18+esp)]</code><br><code>edx</code>加1，将<code>eax</code>作为数组元素的下标将元素<code>array[eax]</code>存到<code>eax</code>，<code>ecx</code>加上这个元素值<code>eax</code>；<br>。。。这个过程持续到<code>eax</code>等于<code>0xf</code>就是当下标等于<code>0xf</code>时结束，同时<code>edx</code>等于<code>0xf</code>也就是这个过程刚好进行15次。</p><ul><li>我们查看这个数组<br><img src="/2021/05/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94LAB-3_BombLab/image-20210501113814480.png" alt="image-20210501113814480"></li><li>发现<code>0xf</code>元素的下标为<code>6=0x6</code>，<br><code>0x6</code>元素的下标为<code>14=0xe</code>，<br><code>0xe</code>元素的下标为<code>2=0x2</code><br><code>0x2</code>元素的下表为<code>1=0x1</code>。。。。继续往下。。。。</li><li>我们得到的序列为：<code>f 6 e 2 1 a 0 8 4 9 d b 7 3 c 5 </code></li><li>所以第一个输入是<code>5</code></li></ul></li><li><p>第二个输入等于<code>%ecx</code>，因为只进行15次加法，所以最后和少了<code>array[15]=5</code>，所以是结果是<code>115</code></p></li><li><p>所以答案是<code>5 115</code>，验证，成功。<br><img src="/2021/05/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94LAB-3_BombLab/image-20210501120859183.png" alt="image-20210501120859183"></p></li></ul><h4 id="phase-6："><a href="#phase-6：" class="headerlink" title="phase_6："></a><code>phase_6</code>：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">Dump of assembler code for function phase_6:               &#x2F;&#x2F;phase_6(input)</span><br><span class="line">   0x08048d9c &lt;+0&gt;:    push   %esi                        &#x2F;&#x2F;esi入栈</span><br><span class="line">   0x08048d9d &lt;+1&gt;:    push   %ebx                        &#x2F;&#x2F;ebx入栈</span><br><span class="line">   0x08048d9e &lt;+2&gt;:    sub    $0x44,%esp                  &#x2F;&#x2F;栈帧预留0x44字节的空间</span><br><span class="line">   0x08048da1 &lt;+5&gt;:    lea    0x10(%esp),%eax             &#x2F;&#x2F;eax&#x3D;0x10+esp</span><br><span class="line">   0x08048da5 &lt;+9&gt;:    mov    %eax,0x4(%esp)              &#x2F;&#x2F;M(0x4+esp)&#x3D;eax&#x3D;0x10+esp</span><br><span class="line">   0x08048da9 &lt;+13&gt;:mov    0x50(%esp),%eax             &#x2F;&#x2F;eax&#x3D;M(0x50+esp)&#x3D;input</span><br><span class="line">   0x08048dad &lt;+17&gt;:mov    %eax,(%esp)                 &#x2F;&#x2F;M(esp)&#x3D;eax&#x3D;input</span><br><span class="line">   0x08048db0 &lt;+20&gt;:call   0x804922b &lt;read_six_numbers&gt;&#x2F;&#x2F;调用read_six_numbers(input,0x10+esp)</span><br><span class="line">   0x08048db5 &lt;+25&gt;:mov    $0x0,%esi                   &#x2F;&#x2F;esi&#x3D;0x0</span><br><span class="line">   0x08048dba &lt;+30&gt;:mov    0x10(%esp,%esi,4),%eax      &#x2F;&#x2F;eax&#x3D;M(0x10+esp+4*esi)&#x3D;array[esi]</span><br><span class="line">   0x08048dbe &lt;+34&gt;:sub    $0x1,%eax                   &#x2F;&#x2F;eax&#x3D;eax-1&#x3D;array[esi]-1</span><br><span class="line">   0x08048dc1 &lt;+37&gt;:cmp    $0x5,%eax                   &#x2F;&#x2F;compare eax&#x3D;array[esi]-1 with 0x5</span><br><span class="line">   0x08048dc4 &lt;+40&gt;:jbe    0x8048dcb &lt;phase_6+47&gt;      &#x2F;&#x2F;if 0&lt;&#x3D;eax&lt;&#x3D;5, jump 0x8048dcb &lt;phase_6+47&gt;</span><br><span class="line">   0x08048dc6 &lt;+42&gt;:call   0x80490f6 &lt;explode_bomb&gt;    &#x2F;&#x2F;调用explode_bomb()</span><br><span class="line">   0x08048dcb &lt;+47&gt;:add    $0x1,%esi                   &#x2F;&#x2F;esi&#x3D;esi+1</span><br><span class="line">   0x08048dce &lt;+50&gt;:cmp    $0x6,%esi                   &#x2F;&#x2F;compare esi with 0x6</span><br><span class="line">   0x08048dd1 &lt;+53&gt;:je     0x8048dee &lt;phase_6+82&gt;      &#x2F;&#x2F;if zf&#x3D;1, jump 0x8048dee &lt;phase_6+82&gt;</span><br><span class="line">   0x08048dd3 &lt;+55&gt;:mov    %esi,%ebx                   &#x2F;&#x2F;ebx&#x3D;esi</span><br><span class="line">   0x08048dd5 &lt;+57&gt;:mov    0x10(%esp,%ebx,4),%eax      &#x2F;&#x2F;eax&#x3D;M(0x10+esp+ebx*4)&#x3D;array[ebx]</span><br><span class="line">   0x08048dd9 &lt;+61&gt;:cmp    %eax,0xc(%esp,%esi,4)   &#x2F;&#x2F;compare M(0xc+esp+4*esi)&#x3D;array[esi-1] with eax</span><br><span class="line">   0x08048ddd &lt;+65&gt;:jne    0x8048de4 &lt;phase_6+72&gt;      &#x2F;&#x2F;if zf&#x3D;0, jump 0x8048de4 &lt;phase_6+72&gt;</span><br><span class="line">   0x08048ddf &lt;+67&gt;:call   0x80490f6 &lt;explode_bomb&gt;    &#x2F;&#x2F;调用explode_bomb()</span><br><span class="line">   0x08048de4 &lt;+72&gt;:add    $0x1,%ebx                   &#x2F;&#x2F;ebx&#x3D;ebx+1</span><br><span class="line">   0x08048de7 &lt;+75&gt;:cmp    $0x5,%ebx                   &#x2F;&#x2F;compare ebx with 0x5</span><br><span class="line">   0x08048dea &lt;+78&gt;:jle    0x8048dd5 &lt;phase_6+57&gt;      &#x2F;&#x2F;if ebx&lt;&#x3D;5,jump 0x8048dd5 &lt;phase_6+57&gt;</span><br><span class="line">   0x08048dec &lt;+80&gt;:jmp    0x8048dba &lt;phase_6+30&gt;      &#x2F;&#x2F;jump 0x8048dba &lt;phase_6+30&gt;</span><br><span class="line">   &#x2F;*输入六个数到array[x]，每一个数都进行限制，必须与它之后数字不同，而且必须处于范围1-6 *&#x2F;</span><br><span class="line">   0x08048dee &lt;+82&gt;:lea    0x10(%esp),%eax             &#x2F;&#x2F;eax&#x3D;0x10+esp</span><br><span class="line">   0x08048df2 &lt;+86&gt;:lea    0x28(%esp),%ebx           &#x2F;&#x2F;ebx&#x3D;0x28+esp&#x3D;0x10+esp+0x4*6</span><br><span class="line">   0x08048df6 &lt;+90&gt;:mov    $0x7,%ecx                   &#x2F;&#x2F;ecx&#x3D;0x7</span><br><span class="line">   0x08048dfb &lt;+95&gt;:mov    %ecx,%edx                   &#x2F;&#x2F;edx&#x3D;ecx&#x3D;0x7</span><br><span class="line">   0x08048dfd &lt;+97&gt;:sub    (%eax),%edx                 &#x2F;&#x2F;edx&#x3D;edx-M(eax)&#x3D;0x7-array[eax-(0x10+esp)]</span><br><span class="line">   0x08048dff &lt;+99&gt;:mov    %edx,(%eax)                 &#x2F;&#x2F;array[eax-(0x10+esp)]&#x3D;M(eax)&#x3D;edx</span><br><span class="line">   0x08048e01 &lt;+101&gt;:add    $0x4,%eax                   &#x2F;&#x2F;eax&#x3D;eax+0x4</span><br><span class="line">   0x08048e04 &lt;+104&gt;:cmp    %ebx,%eax                   &#x2F;&#x2F;compare eax with ebx&#x3D;0x10+esp+0x4*6</span><br><span class="line">   0x08048e06 &lt;+106&gt;:jne    0x8048dfb &lt;phase_6+95&gt;      &#x2F;&#x2F;if zf&#x3D;0, jump 0x8048dfb &lt;phase_6+95&gt;</span><br><span class="line">   &#x2F;*将这六个数组元素都分别被7减，所得结果还是存到他们原来的位置，也就是array[x]&#x3D;7-array[x] *&#x2F;</span><br><span class="line">   0x08048e08 &lt;+108&gt;:mov    $0x0,%ebx                   &#x2F;&#x2F;ebx&#x3D;0x0</span><br><span class="line">   0x08048e0d &lt;+113&gt;:jmp    0x8048e25 &lt;phase_6+137&gt;     &#x2F;&#x2F;jump 0x8048e25 &lt;phase_6+137&gt;</span><br><span class="line">   0x08048e0f &lt;+115&gt;:mov    0x8(%edx),%edx              &#x2F;&#x2F;edx&#x3D;M(0x8+edx)</span><br><span class="line">   0x08048e12 &lt;+118&gt;:add    $0x1,%eax                   &#x2F;&#x2F;eax&#x3D;eax+0x1</span><br><span class="line">   0x08048e15 &lt;+121&gt;:cmp    %ecx,%eax                   &#x2F;&#x2F;compare eax with ecx&#x3D;array[ebx]</span><br><span class="line">   0x08048e17 &lt;+123&gt;:jne    0x8048e0f &lt;phase_6+115&gt;     &#x2F;&#x2F;if zf&#x3D;0, jump 0x8048e0f &lt;phase_6+115&gt;</span><br><span class="line">   0x08048e19 &lt;+125&gt;:mov    %edx,0x28(%esp,%esi,4)      &#x2F;&#x2F;array[6+esi]&#x3D;M(0x28+esp+4*esi)&#x3D;edx</span><br><span class="line">   0x08048e1d &lt;+129&gt;:add    $0x1,%ebx                   &#x2F;&#x2F;ebx&#x3D;ebx+0x1</span><br><span class="line">   0x08048e20 &lt;+132&gt;:cmp    $0x6,%ebx                   &#x2F;&#x2F;compare ebx with 0x6</span><br><span class="line">   0x08048e23 &lt;+135&gt;:je     0x8048e3c &lt;phase_6+160&gt;     &#x2F;&#x2F;if zf&#x3D;1, jump 0x8048e3c &lt;phase_6+160&gt;</span><br><span class="line">   0x08048e25 &lt;+137&gt;:mov    %ebx,%esi                   &#x2F;&#x2F;esi&#x3D;ebx</span><br><span class="line">   0x08048e27 &lt;+139&gt;:mov    0x10(%esp,%ebx,4),%ecx      &#x2F;&#x2F;ecx&#x3D;M(0x10+esp+4*ebx)&#x3D;array[ebx]</span><br><span class="line">   0x08048e2b &lt;+143&gt;:mov    $0x1,%eax                   &#x2F;&#x2F;eax&#x3D;0x1</span><br><span class="line">   0x08048e30 &lt;+148&gt;:mov    $0x804c13c,%edx             &#x2F;&#x2F;edx&#x3D;0x804c13c</span><br><span class="line">   0x08048e35 &lt;+153&gt;:cmp    $0x1,%ecx                   &#x2F;&#x2F;compare ecx&#x3D;array[ebx] with 0x1</span><br><span class="line">   0x08048e38 &lt;+156&gt;:jg     0x8048e0f &lt;phase_6+115&gt;     &#x2F;&#x2F;if ecx&gt;0x1, jump 0x8048e0f &lt;phase_6+115&gt;</span><br><span class="line">   0x08048e3a &lt;+158&gt;:jmp    0x8048e19 &lt;phase_6+125&gt;     &#x2F;&#x2F;jump 0x8048e19 &lt;phase_6+125&gt;</span><br><span class="line">   &#x2F;* 0&lt;&#x3D;x&lt;&#x3D;5，初始化edx&#x3D;0x804c13c，循环array[x]-1次edx&#x3D;M(edx+0x8)，最后edx存到array[x+6]中 *&#x2F;</span><br><span class="line">   0x08048e3c &lt;+160&gt;:mov    0x28(%esp),%ebx             &#x2F;&#x2F;ebx&#x3D;M(0x28+esp)&#x3D;array[6]</span><br><span class="line">   0x08048e40 &lt;+164&gt;:mov    0x2c(%esp),%eax             &#x2F;&#x2F;eax&#x3D;M(0x2c+esp)&#x3D;array[7]</span><br><span class="line">   0x08048e44 &lt;+168&gt;:mov    %eax,0x8(%ebx)              &#x2F;&#x2F;M(0x8+array[6])&#x3D;M(0x8+ebx)&#x3D;eax&#x3D;array[7]</span><br><span class="line">   0x08048e47 &lt;+171&gt;:mov    0x30(%esp),%edx             &#x2F;&#x2F;edx&#x3D;M(0x30+esp)&#x3D;array[8]</span><br><span class="line">   0x08048e4b &lt;+175&gt;:mov    %edx,0x8(%eax)              &#x2F;&#x2F;M(0x8+array[7])&#x3D;M(0x8+eax)&#x3D;edx&#x3D;array[8]</span><br><span class="line">   0x08048e4e &lt;+178&gt;:mov    0x34(%esp),%eax             &#x2F;&#x2F;eax&#x3D;M(0x34+esp)&#x3D;array[9]</span><br><span class="line">   0x08048e52 &lt;+182&gt;:mov    %eax,0x8(%edx)              &#x2F;&#x2F;M(0x8+array[8])&#x3D;M(0x8+edx)&#x3D;eax&#x3D;array[9]</span><br><span class="line">   0x08048e55 &lt;+185&gt;:mov    0x38(%esp),%edx             &#x2F;&#x2F;edx&#x3D;M(0x38+esp)&#x3D;array[10]</span><br><span class="line">   0x08048e59 &lt;+189&gt;:mov    %edx,0x8(%eax)              &#x2F;&#x2F;M(0x8+array[9])&#x3D;M(0x8+eax)&#x3D;edx&#x3D;array[10]</span><br><span class="line">   0x08048e5c &lt;+192&gt;:mov    0x3c(%esp),%eax             &#x2F;&#x2F;eax&#x3D;M(0x3c+esp)&#x3D;array[11]</span><br><span class="line">   0x08048e60 &lt;+196&gt;:mov    %eax,0x8(%edx)              &#x2F;&#x2F;M(0x8+array[10])&#x3D;M(0x8+edx)&#x3D;eax&#x3D;array[11]</span><br><span class="line">   0x08048e63 &lt;+199&gt;:movl   $0x0,0x8(%eax)              &#x2F;&#x2F;M(0x8+array[11])&#x3D;M(0x8+eax)&#x3D;0x0</span><br><span class="line">   &#x2F;* M(0x8+array[6+x])&#x3D;array[6+x+1]，也就是对链表重新进行排序*&#x2F;</span><br><span class="line">   0x08048e6a &lt;+206&gt;:mov    $0x5,%esi                   &#x2F;&#x2F;esi&#x3D;0x5</span><br><span class="line">   0x08048e6f &lt;+211&gt;:mov    0x8(%ebx),%eax              &#x2F;&#x2F;eax&#x3D;M(0x8+ebx)</span><br><span class="line">   0x08048e72 &lt;+214&gt;:mov    (%eax),%edx                 &#x2F;&#x2F;edx&#x3D;M(eax)</span><br><span class="line">   0x08048e74 &lt;+216&gt;:cmp    %edx,(%ebx)                 &#x2F;&#x2F;compare M(ebx) with edx</span><br><span class="line">   0x08048e76 &lt;+218&gt;:jge    0x8048e7d &lt;phase_6+225&gt;    &#x2F;&#x2F;if M(ebx)&gt;&#x3D;edx, jump 0x8048e7d &lt;phase_6+225&gt;</span><br><span class="line">   0x08048e78 &lt;+220&gt;:call   0x80490f6 &lt;explode_bomb&gt;    &#x2F;&#x2F;调用explode_bomb()</span><br><span class="line">   0x08048e7d &lt;+225&gt;:mov    0x8(%ebx),%ebx              &#x2F;&#x2F;ebx&#x3D;M(0x8+ebx)</span><br><span class="line">   0x08048e80 &lt;+228&gt;:sub    $0x1,%esi                   &#x2F;&#x2F;esi&#x3D;esi-1</span><br><span class="line">   0x08048e83 &lt;+231&gt;:jne    0x8048e6f &lt;phase_6+211&gt;     &#x2F;&#x2F;if zf&#x3D;0, jump 0x8048e6f &lt;phase_6+211&gt;</span><br><span class="line">   &#x2F;* 排序后的链表，前一个节点的值大于等于后一节点的值，*&#x2F;</span><br><span class="line">   0x08048e85 &lt;+233&gt;:add    $0x44,%esp                  &#x2F;&#x2F;栈帧释放空间</span><br><span class="line">   0x08048e88 &lt;+236&gt;:pop    %ebx                        &#x2F;&#x2F;出栈ebx</span><br><span class="line">   0x08048e89 &lt;+237&gt;:pop    %esi                        &#x2F;&#x2F;出栈esi</span><br><span class="line">   0x08048e8a &lt;+238&gt;:ret                                &#x2F;&#x2F;返回地址出栈，跳转到返回地址</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><ul><li><p>打印查看<code>0x804c13c</code>地址所存，发现它是一个结构体，三个成员是：<code>value</code>、<code>id</code>、<code>next</code>。<br>依次查看各个节点。<br><img src="/2021/05/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94LAB-3_BombLab/image-20210501183605731.png" alt="image-20210501183605731"></p></li><li><p>所以我们知道<code>array[x+6]</code>存的是<code>id=array[x]</code>的节点的地址；<br><code>M(array[x+6])</code>存的是<code>id=array[x]</code>的节点的<code>value</code>；<br><code>M(array[x+6]+8)</code>存的是<code>id=array[x]</code>的节点的<code>next</code>;</p></li><li><p>函数执行过程是：先输入<code>array[x]</code>并判断是否在<code>[1,6]</code>且各不相同；</p><p>对这六个元素都执行<code>array[x]=7-array[x]</code>；</p><p>将<code>id=array[x]</code>的节点地址存到<code>array[x+6]</code>；</p><p>将<code>id=array[x]</code>的节点的地址的<code>next</code>成员改写成<code>id=array[x+1]</code>的节点的地址，也就是<code>array[x+6]-&gt;next=array[x+6+1]</code>；</p><p>判断排序后的链表节点的<code>value</code>成员大小是否是递减的。</p></li><li><p>所以我们输入的数，其实是6个节点的<code>id</code>成员，函数按照输入<code>id</code>的顺序，将这六个节点排序，排序后的链表是递减的。</p></li><li><p>将这六个节点的<code>value</code>转化为10进制的数</p><table><thead><tr><th align="center">id</th><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th><th align="center">5</th><th align="center">6</th></tr></thead><tbody><tr><td align="center"><strong>value</strong></td><td align="center">495</td><td align="center">476</td><td align="center">197</td><td align="center">612</td><td align="center">890</td><td align="center">249</td></tr></tbody></table></li><li><p>正确的<code>id</code>序列：<code>5 4 1 2 6 3</code></p></li><li><p>但是因为执行过<code>array[x]=7-array[x]</code>，所以正确的输入是：<code>2 3 6 5 1 4</code> </p></li><li><p>验证，输出提示语<br><img src="/2021/05/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94LAB-3_BombLab/image-20210502160922650.png" alt="image-20210502160922650"></p></li></ul><h4 id="phase-defused"><a href="#phase-defused" class="headerlink" title="phase_defused"></a><code>phase_defused</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">Dump of assembler code for function phase_defused:    &#x2F;&#x2F;phase_defused()</span><br><span class="line">   0x0804927b &lt;+0&gt;:sub    $0x8c,%esp                 &#x2F;&#x2F;栈帧预留0x8c字节的空间</span><br><span class="line">   0x08049281 &lt;+6&gt;:mov    %gs:0x14,%eax              &#x2F;&#x2F;eax&#x3D;gs:0x14</span><br><span class="line">   0x08049287 &lt;+12&gt;:mov    %eax,0x7c(%esp)        &#x2F;&#x2F;M(0x7c+esp)&#x3D;eax</span><br><span class="line">   0x0804928b &lt;+16&gt;:xor    %eax,%eax              &#x2F;&#x2F;eax&#x3D;eax^eax</span><br><span class="line">   0x0804928d &lt;+18&gt;:cmpl   $0x6,0x804c3cc         &#x2F;&#x2F;compare M(0x804c3cc) with 0x6</span><br><span class="line">   &#x2F;&#x2F;0x804c3cc &lt;num_input_strings&gt;:0x00         记录关卡数</span><br><span class="line">   0x08049294 &lt;+25&gt;:jne    0x8049308 &lt;phase_defused+141&gt;&#x2F;&#x2F;if zf&#x3D;0,jump 0x8049308 &lt;phase_defused+141&gt;</span><br><span class="line">   0x08049296 &lt;+27&gt;:lea    0x2c(%esp),%eax        &#x2F;&#x2F;eax&#x3D;0x2c+esp</span><br><span class="line">   0x0804929a &lt;+31&gt;:mov    %eax,0x10(%esp)        &#x2F;&#x2F;M(0x10+esp)&#x3D;eax</span><br><span class="line">   0x0804929e &lt;+35&gt;:lea    0x28(%esp),%eax        &#x2F;&#x2F;eax&#x3D;0x28+esp</span><br><span class="line">   0x080492a2 &lt;+39&gt;:mov    %eax,0xc(%esp)         &#x2F;&#x2F;M(0xc+esp)&#x3D;eax</span><br><span class="line">   0x080492a6 &lt;+43&gt;:lea    0x24(%esp),%eax        &#x2F;&#x2F;eax&#x3D;0x24+esp</span><br><span class="line">   0x080492aa &lt;+47&gt;:mov    %eax,0x8(%esp)         &#x2F;&#x2F;M(0x8+esp)&#x3D;eax</span><br><span class="line">   0x080492ae &lt;+51&gt;:movl   $0x804a3e9,0x4(%esp)   &#x2F;&#x2F;M(0x4+esp)&#x3D;0x804a3e9</span><br><span class="line">   &#x2F;&#x2F; 0x804a3e9: &quot;%d %d %s&quot;</span><br><span class="line">   0x080492b6 &lt;+59&gt;:movl   $0x804c4d0,(%esp)      &#x2F;&#x2F;M(esp)&#x3D;0x804c4d0</span><br><span class="line">   &#x2F;&#x2F; 0x804c4d0: &quot;&quot;             这个地址在某一关被赋值</span><br><span class="line">   0x080492bd &lt;+66&gt;:call   0x8048870 &lt;__isoc99_sscanf@plt&gt; &#x2F;&#x2F;__isoc99_sscanf@plt(0x804c4d0,0x804a3e9,0x24+esp,0x28+esp,0x2c+esp)</span><br><span class="line">   0x080492c2 &lt;+71&gt;:cmp    $0x3,%eax              &#x2F;&#x2F;compare 返回值eax with 0x3</span><br><span class="line">   0x080492c5 &lt;+74&gt;:jne    0x80492fc &lt;phase_defused+129&gt;&#x2F;&#x2F;if zf&#x3D;0,jump 0x80492fc &lt;phase_defused+129&gt;</span><br><span class="line">   0x080492c7 &lt;+76&gt;:movl   $0x804a3f2,0x4(%esp)   &#x2F;&#x2F;M(0x4+esp)&#x3D;0x804a3f2</span><br><span class="line">   &#x2F;&#x2F; 0x804a3f2: &quot;DrEvil&quot;</span><br><span class="line">   0x080492cf &lt;+84&gt;:lea    0x2c(%esp),%eax         &#x2F;&#x2F;eax&#x3D;0x2c+esp</span><br><span class="line">   0x080492d3 &lt;+88&gt;:mov    %eax,(%esp)             &#x2F;&#x2F;M(esp)&#x3D;eax</span><br><span class="line">   0x080492d6 &lt;+91&gt;:call   0x8048fe4 &lt;strings_not_equal&gt; &#x2F;&#x2F;调用strings_not_equal(0x2c+esp,0x804a3f2)</span><br><span class="line">   0x080492db &lt;+96&gt;:test   %eax,%eax                &#x2F;&#x2F;eax&amp;eax</span><br><span class="line">   0x080492dd &lt;+98&gt;:jne    0x80492fc &lt;phase_defused+129&gt;&#x2F;&#x2F;if zf&#x3D;0,jump 0x80492fc &lt;phase_defused+129&gt;</span><br><span class="line">   0x080492df &lt;+100&gt;:movl   $0x804a2b8,(%esp)        &#x2F;&#x2F;M(esp)&#x3D;0x804a2b8</span><br><span class="line">   &#x2F;&#x2F;0x804a2b8: &quot;Curses, you&#39;ve found the secret phase!&quot;</span><br><span class="line">   0x080492e6 &lt;+107&gt;:call   0x8048800 &lt;puts@plt&gt;     &#x2F;&#x2F;调用puts@plt(0x804a2b8)</span><br><span class="line">   0x080492eb &lt;+112&gt;:movl   $0x804a2e0,(%esp)        &#x2F;&#x2F;M(esp)&#x3D;0x804a2e0</span><br><span class="line">   &#x2F;&#x2F;0x804a2e0: &quot;But finding it and solving it are quite different...&quot;</span><br><span class="line">   0x080492f2 &lt;+119&gt;:call   0x8048800 &lt;puts@plt&gt;     &#x2F;&#x2F;调用puts@plt(0x804a2e0)</span><br><span class="line">   0x080492f7 &lt;+124&gt;:call   0x8048edc &lt;secret_phase&gt;  &#x2F;&#x2F;进入隐藏关卡</span><br><span class="line">   0x080492fc &lt;+129&gt;:movl   $0x804a318,(%esp)         &#x2F;&#x2F;M(esp)&#x3D;0x804a318</span><br><span class="line">   &#x2F;&#x2F;0x804a318: &quot;Congratulations! You&#39;ve defused the bomb!&quot;</span><br><span class="line">   0x08049303 &lt;+136&gt;:call   0x8048800 &lt;puts@plt&gt;     &#x2F;&#x2F;调用puts@plt(0x804a318)</span><br><span class="line">   0x08049308 &lt;+141&gt;:mov    0x7c(%esp),%eax          &#x2F;&#x2F;eax&#x3D;M(0x7c+esp)</span><br><span class="line">   0x0804930c &lt;+145&gt;:xor    %gs:0x14,%eax            &#x2F;&#x2F;eax ^ %gs:0x14</span><br><span class="line">   0x08049313 &lt;+152&gt;:je     0x804931a &lt;phase_defused+159&gt;&#x2F;&#x2F;if zf&#x3D;1,jump 0x804931a &lt;phase_defused+159&gt;</span><br><span class="line">   0x08049315 &lt;+154&gt;:call   0x80487d0 &lt;__stack_chk_fail@plt&gt; &#x2F;&#x2F;调用__stack_chk_fail@plt()</span><br><span class="line">   0x0804931a &lt;+159&gt;:add    $0x8c,%esp                &#x2F;&#x2F;栈帧释放空间</span><br><span class="line">   0x08049320 &lt;+165&gt;:ret                              &#x2F;&#x2F;返回地址出栈，并跳转到返回地址</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><ul><li>查看一下炸弹拆除函数汇编代码，发现<code>0x080492f7 &lt;+124&gt;:    call   0x8048edc &lt;secret_phase&gt;</code>隐藏关卡</li><li>只有在第六关之后，而且<code>0x2c+esp</code>地址的字符串等于内置的<code>DrEvil</code>，我们才能进入隐藏关卡<ul><li>但是<code>0x804c4d0</code>什么时候被赋值的呢，我们进行调试，调试发现它是在第四关被赋值的，所以我们要将<code>DrEvil</code>放在第四关<br><img src="/2021/05/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94LAB-3_BombLab/image-20210503173426765.png" alt="image-20210503173426765"></li><li>放进之后我们成功触发了隐藏关<br><img src="/2021/05/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94LAB-3_BombLab/image-20210503173643070.png" alt="image-20210503173643070"></li></ul></li></ul><h5 id="secret-phase"><a href="#secret-phase" class="headerlink" title="secret_phase"></a><code>secret_phase</code></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Dump of assembler code for function secret_phase:     &#x2F;&#x2F;secret_phase()</span><br><span class="line">   0x08048edc &lt;+0&gt;:push   %ebx                       &#x2F;&#x2F;push ebx</span><br><span class="line">   0x08048edd &lt;+1&gt;:    sub    $0x18,%esp             &#x2F;&#x2F;栈帧预留0x18字节</span><br><span class="line">   0x08048ee0 &lt;+4&gt;:    call   0x804911d &lt;read_line&gt;  &#x2F;&#x2F;调用read_line()</span><br><span class="line">   0x08048ee5 &lt;+9&gt;:    movl   $0xa,0x8(%esp)         &#x2F;&#x2F;M(0x8+esp)&#x3D;0xa</span><br><span class="line">   0x08048eed &lt;+17&gt;:movl   $0x0,0x4(%esp)         &#x2F;&#x2F;M(0x4+esp)&#x3D;0x0</span><br><span class="line">   0x08048ef5 &lt;+25&gt;:mov    %eax,(%esp)            &#x2F;&#x2F;M(esp)&#x3D;eax&#x3D;input</span><br><span class="line">   0x08048ef8 &lt;+28&gt;:call   0x80488e0 &lt;strtol@plt&gt;&#x2F;&#x2F;调用strtol@plt(input,0x0,0xa)返回值为字符串转化的整数</span><br><span class="line">   0x08048efd &lt;+33&gt;:mov    %eax,%ebx              &#x2F;&#x2F;ebx&#x3D;eax&#x3D;input</span><br><span class="line">   0x08048eff &lt;+35&gt;:lea    -0x1(%eax),%eax        &#x2F;&#x2F;eax&#x3D;-0x1+eax</span><br><span class="line">   0x08048f02 &lt;+38&gt;:cmp    $0x3e8,%eax            &#x2F;&#x2F;compare eax with 0x3e8&#x3D;1000</span><br><span class="line">   0x08048f07 &lt;+43&gt;:jbe    0x8048f0e &lt;secret_phase+50&gt;&#x2F;&#x2F;if 0&lt;&#x3D;eax&lt;&#x3D;1000,jump 0x8048f0e &lt;secret_phase+50&gt;</span><br><span class="line">   0x08048f09 &lt;+45&gt;:call   0x80490f6 &lt;explode_bomb&gt;&#x2F;&#x2F;调用explode_bomb()</span><br><span class="line">   0x08048f0e &lt;+50&gt;:mov    %ebx,0x4(%esp)         &#x2F;&#x2F;M(0x4+esp)&#x3D;ebx</span><br><span class="line">   0x08048f12 &lt;+54&gt;:movl   $0x804c088,(%esp)      &#x2F;&#x2F;M(esp)&#x3D;0x804c088</span><br><span class="line">   &#x2F;&#x2F; 0x804c088:0x24</span><br><span class="line">   0x08048f19 &lt;+61&gt;:call   0x8048e8b &lt;fun7&gt;       &#x2F;&#x2F;调用fun7(0x804c088,ebx)</span><br><span class="line">   0x08048f1e &lt;+66&gt;:cmp    $0x5,%eax              &#x2F;&#x2F;compare eax with 0x5</span><br><span class="line">   0x08048f21 &lt;+69&gt;:je     0x8048f28 &lt;secret_phase+76&gt;  &#x2F;&#x2F;if zf&#x3D;1, jump 0x8048f28 &lt;secret_phase+76&gt;</span><br><span class="line">   0x08048f23 &lt;+71&gt;:call   0x80490f6 &lt;explode_bomb&gt; &#x2F;&#x2F;调用explode_bomb()</span><br><span class="line">   0x08048f28 &lt;+76&gt;:movl   $0x804a1e8,(%esp)       &#x2F;&#x2F;M(esp)&#x3D;0x804a1e8</span><br><span class="line">   &#x2F;&#x2F; 0x804a1e8: &quot;Wow! You&#39;ve defused the secret stage!&quot;</span><br><span class="line">   0x08048f2f &lt;+83&gt;:call   0x8048800 &lt;puts@plt&gt;    &#x2F;&#x2F;调用puts@plt(0x804a1e8)</span><br><span class="line">   0x08048f34 &lt;+88&gt;:call   0x804927b &lt;phase_defused&gt; &#x2F;&#x2F;调用phase_defused()</span><br><span class="line">   0x08048f39 &lt;+93&gt;:add    $0x18,%esp              &#x2F;&#x2F;栈帧释放空间</span><br><span class="line">   0x08048f3c &lt;+96&gt;:pop    %ebx                    &#x2F;&#x2F;出栈ebx</span><br><span class="line">   0x08048f3d &lt;+97&gt;:ret                            &#x2F;&#x2F;返回地址出栈，并跳转到返回地址</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><ul><li>如果<code>&lt;fun7&gt;</code>的返回值<code>%eax</code>如果等于5我们就能成功拆除炸弹</li><li>查看<code>fun7</code>函数</li></ul><h5 id="fun7"><a href="#fun7" class="headerlink" title="fun7"></a><code>fun7</code></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Dump of assembler code for function fun7:             &#x2F;&#x2F;fun7(address,number)</span><br><span class="line">   0x08048e8b &lt;+0&gt;:push   %ebx                       &#x2F;&#x2F;ebx入栈</span><br><span class="line">   0x08048e8c &lt;+1&gt;:sub    $0x18,%esp                 &#x2F;&#x2F;栈帧预留0x18字节的空间</span><br><span class="line">   0x08048e8f &lt;+4&gt;:    mov    0x20(%esp),%edx        &#x2F;&#x2F;edx&#x3D;M(0x20+esp)&#x3D;address</span><br><span class="line">   0x08048e93 &lt;+8&gt;:    mov    0x24(%esp),%ecx        &#x2F;&#x2F;ecx&#x3D;M(0x24+esp)&#x3D;number</span><br><span class="line">   0x08048e97 &lt;+12&gt;:test   %edx,%edx              &#x2F;&#x2F;edx &amp; edx</span><br><span class="line">   0x08048e99 &lt;+14&gt;:je     0x8048ed2 &lt;fun7+71&gt;    &#x2F;&#x2F;if zf&#x3D;1, jump 0x8048ed2 &lt;fun7+71&gt;</span><br><span class="line">   0x08048e9b &lt;+16&gt;:mov    (%edx),%ebx            &#x2F;&#x2F;ebx&#x3D;M(edx)&#x3D;*address</span><br><span class="line">   0x08048e9d &lt;+18&gt;:cmp    %ecx,%ebx              &#x2F;&#x2F;compare ebx with ecx&#x3D;number</span><br><span class="line">   0x08048e9f &lt;+20&gt;:jle    0x8048eb4 &lt;fun7+41&gt;    &#x2F;&#x2F;if ebx&lt;&#x3D;ecx&#x3D;number, jump 0x8048eb4 &lt;fun7+41&gt;</span><br><span class="line">   0x08048ea1 &lt;+22&gt;:mov    %ecx,0x4(%esp)         &#x2F;&#x2F;M(0x4+esp)&#x3D;ecx&#x3D;number</span><br><span class="line">   0x08048ea5 &lt;+26&gt;:mov    0x4(%edx),%eax         &#x2F;&#x2F;eax&#x3D;M(0x4+edx)&#x3D;*(address+4)</span><br><span class="line">   0x08048ea8 &lt;+29&gt;:mov    %eax,(%esp)            &#x2F;&#x2F;M(esp)&#x3D;eax&#x3D;*(address+4)</span><br><span class="line">   0x08048eab &lt;+32&gt;:call   0x8048e8b &lt;fun7&gt;       &#x2F;&#x2F;fun7(*(address+4),number)</span><br><span class="line">   0x08048eb0 &lt;+37&gt;:add    %eax,%eax              &#x2F;&#x2F;eax&#x3D;eax+eax</span><br><span class="line">   0x08048eb2 &lt;+39&gt;:jmp    0x8048ed7 &lt;fun7+76&gt;    &#x2F;&#x2F;jump 0x8048ed7 &lt;fun7+76&gt;</span><br><span class="line">   0x08048eb4 &lt;+41&gt;:mov    $0x0,%eax              &#x2F;&#x2F;eax&#x3D;0x0</span><br><span class="line">   0x08048eb9 &lt;+46&gt;:cmp    %ecx,%ebx              &#x2F;&#x2F;compare ebx&#x3D;*address with ecx&#x3D;number</span><br><span class="line">   0x08048ebb &lt;+48&gt;:je     0x8048ed7 &lt;fun7+76&gt;    &#x2F;&#x2F;if zf&#x3D;1, jump 0x8048ed7 &lt;fun7+76&gt;</span><br><span class="line">   0x08048ebd &lt;+50&gt;:mov    %ecx,0x4(%esp)         &#x2F;&#x2F;M(0x4+esp)&#x3D;ecx&#x3D;number</span><br><span class="line">   0x08048ec1 &lt;+54&gt;:mov    0x8(%edx),%eax         &#x2F;&#x2F;eax&#x3D;M(0x8+edx)&#x3D;*(address+8)</span><br><span class="line">   0x08048ec4 &lt;+57&gt;:mov    %eax,(%esp)            &#x2F;&#x2F;M(esp)&#x3D;eax&#x3D;*(address+8)</span><br><span class="line">   0x08048ec7 &lt;+60&gt;:call   0x8048e8b &lt;fun7&gt;       &#x2F;&#x2F;调用fun7(*(address+8),number)</span><br><span class="line">   0x08048ecc &lt;+65&gt;:lea    0x1(%eax,%eax,1),%eax  &#x2F;&#x2F;eax&#x3D;0x1+eax+eax</span><br><span class="line">   0x08048ed0 &lt;+69&gt;:jmp    0x8048ed7 &lt;fun7+76&gt;    &#x2F;&#x2F;jump 0x8048ed7 &lt;fun7+76&gt;</span><br><span class="line">   0x08048ed2 &lt;+71&gt;:mov    $0xffffffff,%eax       &#x2F;&#x2F;返回值eax&#x3D;-1</span><br><span class="line">   0x08048ed7 &lt;+76&gt;:add    $0x18,%esp             &#x2F;&#x2F;栈帧释放空间</span><br><span class="line">   0x08048eda &lt;+79&gt;:pop    %ebx                   &#x2F;&#x2F;出栈ebx</span><br><span class="line">   0x08048edb &lt;+80&gt;:ret                           &#x2F;&#x2F;返回地址出栈，并跳转到返回地址</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><ul><li><p>我们将<code>fun7</code>翻译成c语言函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun7</span><span class="params">(<span class="keyword">int</span> *address, <span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (address == null)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span> (*address &lt;= number) &#123;</span><br><span class="line"><span class="keyword">if</span> (*address == number )</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="number">2</span> * fun7(*(address + <span class="number">8</span>), number) + <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line"><span class="number">2</span> * fun7(*(address + <span class="number">4</span>), number);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>因为返回值要为5，推导：0-&gt;1-&gt;2-&gt;5，所以地址变化：加8、加4、加8，依次查看，答案是<code>0x2f=47</code><br><img src="/2021/05/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94LAB-3_BombLab/image-20210503163503472.png" alt="image-20210503163503472"></p></li><li><p>这个过程其实是：36&lt;=47地址加8，50&gt;47小地址加4，45&lt;=47地址加8，47=47返回值为0<br><img src="/2021/05/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94LAB-3_BombLab/image-20210503181401052.png" alt="image-20210503181401052"></p></li><li><p>完成验证<br><img src="/2021/05/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94LAB-3_BombLab/image-20210503160027467.png" alt="image-20210503160027467"></p></li></ul><h2 id="第一次总结"><a href="#第一次总结" class="headerlink" title="第一次总结"></a>第一次总结</h2><p><code>bomb lab</code>这个实验让我对<code>gdb</code>调试更加熟悉，对于汇编代码不至于每一个都要去查，这实验还是很有用处的。</p><p>问题总是出现在函数的参数、各种跳转上，其实还是对寄存器、内存地址以及栈帧的认识不够，还需继续努力。</p><p>第一次做的时候连栈帧图都不会画，所以不仅做得效率低下而且也不太明白。</p><p><strong>为了更加好看，正在对过程的重写中。。。。</strong></p><h2 id="第二次总结"><a href="#第二次总结" class="headerlink" title="第二次总结"></a>第二次总结</h2><p>即将进行实验验收，今天终于完成了对炸弹实验过程的重写。</p><p>这个过程之所以写的这么详细，不只是过关，其实也是为了加强自己对汇编代码的阅读和理解能力。</p><p>总之，这个实验花了很久的时间，同样也收获了很多。</p><p><strong>完结撒花！</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;深入理解计算机系统——LAB-3-Bomb-Lab&quot;&gt;&lt;a href=&quot;#深入理解计算机系统——LAB-3-Bomb-Lab&quot; class=&quot;headerlink&quot; title=&quot;深入理解计算机系统——LAB-3_Bomb_Lab&quot;&gt;&lt;/a&gt;深入理解计算机系统——</summary>
      
    
    
    
    <category term="CS:APP" scheme="https://sun-ruijiang.github.io/categories/CS-APP/"/>
    
    
    <category term="LAB" scheme="https://sun-ruijiang.github.io/tags/LAB/"/>
    
  </entry>
  
  <entry>
    <title>FIFO+HM62256电路+双FIFO缓冲</title>
    <link href="https://sun-ruijiang.github.io/2021/05/11/FIFO+HM62256%E7%94%B5%E8%B7%AF+%E5%8F%8CFIFO%E7%BC%93%E5%86%B2/"/>
    <id>https://sun-ruijiang.github.io/2021/05/11/FIFO+HM62256%E7%94%B5%E8%B7%AF+%E5%8F%8CFIFO%E7%BC%93%E5%86%B2/</id>
    <published>2021-05-10T16:00:00.000Z</published>
    <updated>2021-05-11T10:14:02.374Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2021/05/11/FIFO+HM62256%E7%94%B5%E8%B7%AF+%E5%8F%8CFIFO%E7%BC%93%E5%86%B2/0001.jpg" alt="0001"></p><p><img src="/2021/05/11/FIFO+HM62256%E7%94%B5%E8%B7%AF+%E5%8F%8CFIFO%E7%BC%93%E5%86%B2/0002.jpg" alt="0002"></p><p><img src="/2021/05/11/FIFO+HM62256%E7%94%B5%E8%B7%AF+%E5%8F%8CFIFO%E7%BC%93%E5%86%B2/0003.jpg" alt="0003"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2021/05/11/FIFO+HM62256%E7%94%B5%E8%B7%AF+%E5%8F%8CFIFO%E7%BC%93%E5%86%B2/0001.jpg&quot; alt=&quot;0001&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/05/11/F</summary>
      
    
    
    
    <category term="Others" scheme="https://sun-ruijiang.github.io/categories/Others/"/>
    
    
    <category term="课程作业" scheme="https://sun-ruijiang.github.io/tags/%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A/"/>
    
  </entry>
  
  <entry>
    <title>健康打卡</title>
    <link href="https://sun-ruijiang.github.io/2021/05/10/%E5%81%A5%E5%BA%B7%E6%89%93%E5%8D%A1/"/>
    <id>https://sun-ruijiang.github.io/2021/05/10/%E5%81%A5%E5%BA%B7%E6%89%93%E5%8D%A1/</id>
    <published>2021-05-09T16:00:00.000Z</published>
    <updated>2021-05-16T13:45:07.998Z</updated>
    
    <content type="html"><![CDATA[<h1 id="健康打卡"><a href="#健康打卡" class="headerlink" title="健康打卡"></a>健康打卡</h1><blockquote><p>截止目前，乐跑才3次。。。明天乐跑要跑起来了！</p><p>立个flag！每天跑1.6公里，走也得走完！每周一结！</p></blockquote><h2 id="第一周（5-10——5-16）"><a href="#第一周（5-10——5-16）" class="headerlink" title="第一周（5.10——5.16）"></a>第一周（5.10——5.16）</h2><ul><li><p>5月10日</p><blockquote><p>晚九点夜跑，2.5公里配速接近7分，最后冲刺一圈，差点死在荫马塘。</p><p>感受：</p><blockquote><p>明天要一定穿短裤跑步，汗流浃背是真的难受。</p><p>茶颜晚十点的人是真的少，很好。</p><p>今天跑完有点头晕，希望明天能好一点。</p></blockquote></blockquote></li><li><p>5月11日</p><blockquote><p>晚九点半夜跑，2.1公里配速7</p><p>感受：下了30秒的雨也没有阻止我，获得成就：风雨无阻！</p></blockquote></li><li><p>5月12日</p><blockquote><p>晚九点夜跑，2.3公里配速6</p><p>感受：有点心急，早早回来了，坚持！（没买到茶颜）</p></blockquote></li><li><p>5月13日</p><blockquote><p>没跑，乐公交了，配速3是真的快。</p></blockquote></li><li><p>5月14日</p><blockquote><p>打完王者晚八点半夜跑。1,6公里配速5，没去荫马塘，就在园区</p><p>感受：王者是真的累，感觉比跑步要累。。。</p><p>绕我们宿舍楼三圈就是1.6公里，没有用的冷知识get！</p></blockquote></li><li><p>5月15日</p><blockquote><p>晚九点夜跑，应该说散步，1.6公里，配速6，感觉跟散步没区别。。。</p><p>今天终于上了王者，算是没有遗憾了</p></blockquote></li><li><p>5月16日</p><blockquote><p>晚九点夜跑，散步，买夜宵。</p><p>我这个人是真的恶心:)</p></blockquote></li></ul><h2 id="第二周（5-17——5-24）"><a href="#第二周（5-17——5-24）" class="headerlink" title="第二周（5.17——5.24）"></a>第二周（5.17——5.24）</h2><ul><li><p>5月17日</p><blockquote></blockquote></li><li><p>5月18日</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;健康打卡&quot;&gt;&lt;a href=&quot;#健康打卡&quot; class=&quot;headerlink&quot; title=&quot;健康打卡&quot;&gt;&lt;/a&gt;健康打卡&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;截止目前，乐跑才3次。。。明天乐跑要跑起来了！&lt;/p&gt;
&lt;p&gt;立个flag！每天跑1.6公里，走也</summary>
      
    
    
    
    <category term="life" scheme="https://sun-ruijiang.github.io/categories/life/"/>
    
    
    <category term="打卡" scheme="https://sun-ruijiang.github.io/tags/%E6%89%93%E5%8D%A1/"/>
    
  </entry>
  
  <entry>
    <title>Python——爬虫使用体验</title>
    <link href="https://sun-ruijiang.github.io/2021/05/09/Python%E2%80%94%E2%80%94%E7%88%AC%E8%99%AB%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/"/>
    <id>https://sun-ruijiang.github.io/2021/05/09/Python%E2%80%94%E2%80%94%E7%88%AC%E8%99%AB%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/</id>
    <published>2021-05-08T16:00:00.000Z</published>
    <updated>2021-05-09T13:34:46.184Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python——爬虫使用体验"><a href="#Python——爬虫使用体验" class="headerlink" title="Python——爬虫使用体验"></a>Python——爬虫使用体验</h1><h2 id="体验一下"><a href="#体验一下" class="headerlink" title="体验一下"></a>体验一下</h2><p>代码来源：<a href="https://blog.csdn.net/bookssea/article/details/107309591">Python爬虫超详细讲解（零基础入门，老年人都看的懂）_bookssea的博客-CSDN博客_爬虫</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- codeing = utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup  <span class="comment"># 网页解析，获取数据</span></span><br><span class="line"><span class="keyword">import</span> re  <span class="comment"># 正则表达式，进行文字匹配`</span></span><br><span class="line"><span class="keyword">import</span> urllib.request, urllib.error  <span class="comment"># 制定URL，获取网页数据</span></span><br><span class="line"><span class="keyword">import</span> xlwt  <span class="comment"># 进行excel操作</span></span><br><span class="line"><span class="comment">#import sqlite3  # 进行SQLite数据库操作</span></span><br><span class="line"></span><br><span class="line">findLink = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;a href=&quot;(.*?)&quot;&gt;&#x27;</span>)  <span class="comment"># 创建正则表达式对象，标售规则   影片详情链接的规则</span></span><br><span class="line">findImgSrc = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;img.*src=&quot;(.*?)&quot;&#x27;</span>, re.S)</span><br><span class="line">findTitle = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;span class=&quot;title&quot;&gt;(.*)&lt;/span&gt;&#x27;</span>)</span><br><span class="line">findRating = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;span class=&quot;rating_num&quot; property=&quot;v:average&quot;&gt;(.*)&lt;/span&gt;&#x27;</span>)</span><br><span class="line">findJudge = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;span&gt;(\d*)人评价&lt;/span&gt;&#x27;</span>)</span><br><span class="line">findInq = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;span class=&quot;inq&quot;&gt;(.*)&lt;/span&gt;&#x27;</span>)</span><br><span class="line">findBd = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;p class=&quot;&quot;&gt;(.*?)&lt;/p&gt;&#x27;</span>, re.S)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    baseurl = <span class="string">&quot;https://movie.douban.com/top250?start=&quot;</span>  <span class="comment">#要爬取的网页链接</span></span><br><span class="line">    <span class="comment"># 1.爬取网页</span></span><br><span class="line">    datalist = getData(baseurl)</span><br><span class="line">    savepath = <span class="string">&quot;豆瓣电影Top250.xls&quot;</span>    <span class="comment">#当前目录新建XLS，存储进去</span></span><br><span class="line">    <span class="comment"># dbpath = &quot;movie.db&quot;              #当前目录新建数据库，存储进去</span></span><br><span class="line">    <span class="comment"># 3.保存数据</span></span><br><span class="line">    saveData(datalist,savepath)      <span class="comment">#2种存储方式可以只选择一种</span></span><br><span class="line">    <span class="comment"># saveData2DB(datalist,dbpath)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 爬取网页</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getData</span>(<span class="params">baseurl</span>):</span></span><br><span class="line">    datalist = []  <span class="comment">#用来存储爬取的网页信息</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>):  <span class="comment"># 调用获取页面信息的函数，10次</span></span><br><span class="line">        url = baseurl + <span class="built_in">str</span>(i * <span class="number">25</span>)</span><br><span class="line">        html = askURL(url)  <span class="comment"># 保存获取到的网页源码</span></span><br><span class="line">        <span class="comment"># 2.逐一解析数据</span></span><br><span class="line">        soup = BeautifulSoup(html, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> soup.find_all(<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&quot;item&quot;</span>):  <span class="comment"># 查找符合要求的字符串</span></span><br><span class="line">            data = []  <span class="comment"># 保存一部电影所有信息</span></span><br><span class="line">            item = <span class="built_in">str</span>(item)</span><br><span class="line">            link = re.findall(findLink, item)[<span class="number">0</span>]  <span class="comment"># 通过正则表达式查找</span></span><br><span class="line">            data.append(link)</span><br><span class="line">            imgSrc = re.findall(findImgSrc, item)[<span class="number">0</span>]</span><br><span class="line">            data.append(imgSrc)</span><br><span class="line">            titles = re.findall(findTitle, item)</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">len</span>(titles) == <span class="number">2</span>):</span><br><span class="line">                ctitle = titles[<span class="number">0</span>]</span><br><span class="line">                data.append(ctitle)</span><br><span class="line">                otitle = titles[<span class="number">1</span>].replace(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;&quot;</span>)  <span class="comment">#消除转义字符</span></span><br><span class="line">                data.append(otitle)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                data.append(titles[<span class="number">0</span>])</span><br><span class="line">                data.append(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">            rating = re.findall(findRating, item)[<span class="number">0</span>]</span><br><span class="line">            data.append(rating)</span><br><span class="line">            judgeNum = re.findall(findJudge, item)[<span class="number">0</span>]</span><br><span class="line">            data.append(judgeNum)</span><br><span class="line">            inq = re.findall(findInq, item)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(inq) != <span class="number">0</span>:</span><br><span class="line">                inq = inq[<span class="number">0</span>].replace(<span class="string">&quot;。&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">                data.append(inq)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                data.append(<span class="string">&quot; &quot;</span>)</span><br><span class="line">            bd = re.findall(findBd, item)[<span class="number">0</span>]</span><br><span class="line">            bd = re.sub(<span class="string">&#x27;&lt;br(\s+)?/&gt;(\s+)?&#x27;</span>, <span class="string">&quot;&quot;</span>, bd)</span><br><span class="line">            bd = re.sub(<span class="string">&#x27;/&#x27;</span>, <span class="string">&quot;&quot;</span>, bd)</span><br><span class="line">            data.append(bd.strip())</span><br><span class="line">            datalist.append(data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> datalist</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 得到指定一个URL的网页内容</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">askURL</span>(<span class="params">url</span>):</span></span><br><span class="line">    head = &#123;  <span class="comment"># 模拟浏览器头部信息，向豆瓣服务器发送消息</span></span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla / 5.0(Windows NT 10.0; Win64; x64) AppleWebKit / 537.36(KHTML, like Gecko) Chrome / 80.0.3987.122  Safari / 537.36&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 用户代理，表示告诉豆瓣服务器，我们是什么类型的机器、浏览器（本质上是告诉浏览器，我们可以接收什么水平的文件内容）</span></span><br><span class="line"></span><br><span class="line">    request = urllib.request.Request(url, headers=head)</span><br><span class="line">    html = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = urllib.request.urlopen(request)</span><br><span class="line">        html = response.read().decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> urllib.error.URLError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(e, <span class="string">&quot;code&quot;</span>):</span><br><span class="line">            <span class="built_in">print</span>(e.code)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(e, <span class="string">&quot;reason&quot;</span>):</span><br><span class="line">            <span class="built_in">print</span>(e.reason)</span><br><span class="line">    <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存数据到表格</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">saveData</span>(<span class="params">datalist,savepath</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;save.......&quot;</span>)</span><br><span class="line">    book = xlwt.Workbook(encoding=<span class="string">&quot;utf-8&quot;</span>,style_compression=<span class="number">0</span>) <span class="comment">#创建workbook对象</span></span><br><span class="line">    sheet = book.add_sheet(<span class="string">&#x27;豆瓣电影Top250&#x27;</span>, cell_overwrite_ok=<span class="literal">True</span>) <span class="comment">#创建工作表</span></span><br><span class="line">    col = (<span class="string">&quot;电影详情链接&quot;</span>,<span class="string">&quot;图片链接&quot;</span>,<span class="string">&quot;影片中文名&quot;</span>,<span class="string">&quot;影片外国名&quot;</span>,<span class="string">&quot;评分&quot;</span>,<span class="string">&quot;评价数&quot;</span>,<span class="string">&quot;概况&quot;</span>,<span class="string">&quot;相关信息&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">8</span>):</span><br><span class="line">        sheet.write(<span class="number">0</span>,i,col[i])  <span class="comment">#列名</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">250</span>):</span><br><span class="line">        <span class="comment"># print(&quot;第%d条&quot; %(i+1))       #输出语句，用来测试</span></span><br><span class="line">        data = datalist[i]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">8</span>):</span><br><span class="line">            sheet.write(i+<span class="number">1</span>,j,data[j])  <span class="comment">#数据</span></span><br><span class="line">    book.save(savepath) <span class="comment">#保存</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># def saveData2DB(datalist,dbpath):</span></span><br><span class="line"><span class="comment">#     init_db(dbpath)</span></span><br><span class="line"><span class="comment">#     conn = sqlite3.connect(dbpath)</span></span><br><span class="line"><span class="comment">#     cur = conn.cursor()</span></span><br><span class="line"><span class="comment">#     for data in datalist:</span></span><br><span class="line"><span class="comment">#             for index in range(len(data)):</span></span><br><span class="line"><span class="comment">#                 if index == 4 or index == 5:</span></span><br><span class="line"><span class="comment">#                     continue</span></span><br><span class="line"><span class="comment">#                 data[index] = &#x27;&quot;&#x27;+data[index]+&#x27;&quot;&#x27;</span></span><br><span class="line"><span class="comment">#             sql = &#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#                     insert into movie250(</span></span><br><span class="line"><span class="comment">#                     info_link,pic_link,cname,ename,score,rated,instroduction,info)</span></span><br><span class="line"><span class="comment">#                     values (%s)&#x27;&#x27;&#x27;%&quot;,&quot;.join(data)</span></span><br><span class="line"><span class="comment">#             # print(sql)     #输出查询语句，用来测试</span></span><br><span class="line"><span class="comment">#             cur.execute(sql)</span></span><br><span class="line"><span class="comment">#             conn.commit()</span></span><br><span class="line"><span class="comment">#     cur.close</span></span><br><span class="line"><span class="comment">#     conn.close()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># def init_db(dbpath):</span></span><br><span class="line"><span class="comment">#     sql = &#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#         create table movie250(</span></span><br><span class="line"><span class="comment">#         id integer  primary  key autoincrement,</span></span><br><span class="line"><span class="comment">#         info_link text,</span></span><br><span class="line"><span class="comment">#         pic_link text,</span></span><br><span class="line"><span class="comment">#         cname varchar,</span></span><br><span class="line"><span class="comment">#         ename varchar ,</span></span><br><span class="line"><span class="comment">#         score numeric,</span></span><br><span class="line"><span class="comment">#         rated numeric,</span></span><br><span class="line"><span class="comment">#         instroduction text,</span></span><br><span class="line"><span class="comment">#         info text</span></span><br><span class="line"><span class="comment">#         )</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     &#x27;&#x27;&#x27;  #创建数据表</span></span><br><span class="line"><span class="comment">#     conn = sqlite3.connect(dbpath)</span></span><br><span class="line"><span class="comment">#     cursor = conn.cursor()</span></span><br><span class="line"><span class="comment">#     cursor.execute(sql)</span></span><br><span class="line"><span class="comment">#     conn.commit()</span></span><br><span class="line"><span class="comment">#     conn.close()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存数据到数据库</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:  <span class="comment"># 当程序执行时</span></span><br><span class="line">    <span class="comment"># 调用函数</span></span><br><span class="line">     main()</span><br><span class="line">    <span class="comment"># init_db(&quot;movietest.db&quot;)</span></span><br><span class="line">     <span class="built_in">print</span>(<span class="string">&quot;爬取完毕！&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>直接粘到<code>vscode</code></p></li><li><p>选择打开虚拟环境，选择解释器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">py -3 -m venv .venv</span><br><span class="line">.venv\scripts\activate</span><br></pre></td></tr></table></figure></li><li><p>下载所用包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 install xxx</span><br></pre></td></tr></table></figure></li><li><p>生成并查看<br><img src="/2021/05/09/Python%E2%80%94%E2%80%94%E7%88%AC%E8%99%AB%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/image-20210509204224199.png" alt="image-20210509204224199"></p></li><li><p>感觉很不错！</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Python——爬虫使用体验&quot;&gt;&lt;a href=&quot;#Python——爬虫使用体验&quot; class=&quot;headerlink&quot; title=&quot;Python——爬虫使用体验&quot;&gt;&lt;/a&gt;Python——爬虫使用体验&lt;/h1&gt;&lt;h2 id=&quot;体验一下&quot;&gt;&lt;a href=&quot;#体</summary>
      
    
    
    
    <category term="Python" scheme="https://sun-ruijiang.github.io/categories/Python/"/>
    
    
    <category term="Tutorial" scheme="https://sun-ruijiang.github.io/tags/Tutorial/"/>
    
    <category term="爬虫" scheme="https://sun-ruijiang.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python——爬虫入门</title>
    <link href="https://sun-ruijiang.github.io/2021/05/08/Python%E2%80%94%E2%80%94%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/"/>
    <id>https://sun-ruijiang.github.io/2021/05/08/Python%E2%80%94%E2%80%94%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/</id>
    <published>2021-05-07T16:00:00.000Z</published>
    <updated>2021-05-16T15:24:56.599Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python——爬虫入门"><a href="#Python——爬虫入门" class="headerlink" title="Python——爬虫入门"></a>Python——爬虫入门</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>因为之前看了Python还是不太会，所以想做点实用的东西。</p><p>什么是爬虫？一段自动抓取互联网信息的程序，从互联网上抓取对于我们有价值的信息。</p><p>为了系统学习，我选择《Python 3 网络爬虫开发实战》这本书进行学习。</p><p>（像我一样比较穷的人，可以直接在作者本人的博客上学习<a href="https://cuiqingcai.com/5052.html">Python3 网络爬虫开发实战教程</a>）</p><h2 id="1-开发环境的配置"><a href="#1-开发环境的配置" class="headerlink" title="1 - 开发环境的配置"></a>1 - 开发环境的配置</h2><p>主系统的Python版本是3.9.2，我是采用<code>vscode</code>编辑器写的，每一个项目的库都是用什么装什么。</p><p>上来先放了一堆安装，我们先不装。</p><h2 id="2-爬虫基础"><a href="#2-爬虫基础" class="headerlink" title="2 - 爬虫基础"></a>2 - 爬虫基础</h2><p>基础知识在书里很详细了，我这里只记录一些我觉得比较重要的。</p><h3 id="2-3-爬虫的基本原理"><a href="#2-3-爬虫的基本原理" class="headerlink" title="2.3 - 爬虫的基本原理"></a>2.3 - 爬虫的基本原理</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><ol><li><strong>获取网页</strong>。向网站的服务器发送一个请求，返回的响应体便是网页源代码。<ul><li>Python 提供了许多库如 urllib、requests 等。我们可以用这些库来帮助我们实现 HTTP 请求操作</li><li>得到响应之后只需要解析数据结构中的 Body 部分即可，即得到网页的源代码</li></ul></li><li><strong>提取信息</strong>。获取网页源代码后，接下来就是分析网页源代码，从中提取我们想要的数据。<ul><li>最通用的方法便是采用正则表达式提取，这是一个万能的方法，但是在构造正则表达式时比较复杂且容易出错。</li><li>据网页节点属性、CSS 选择器或 XPath 来提取网页信息的库，如 Beautiful Soup、pyquery、lxml 等。</li><li>提取信息是爬虫非常重要的部分，它可以使杂乱的数据变得条理清晰，以便我们后续处理和分析数据。</li></ul></li><li><strong>保存数据</strong>。提取信息后，我们一般会将提取到的数据保存到某处以便后续使用。<ul><li>可以简单保存为 TXT 文本或 JSON 文本</li><li>可以保存到数据库，如 MySQL 和 MongoDB 等</li><li>也可保存至远程服务器，如借助 SFTP 进行操作等。</li></ul></li><li><strong>自动化程序</strong>。爬虫是代替我们来完成这份爬取工作的自动化程序。</li></ol><h4 id="抓取数据"><a href="#抓取数据" class="headerlink" title="抓取数据"></a>抓取数据</h4><p>基于 HTTP 或 HTTPS 协议的数据，爬虫都可以抓取。</p><ul><li><p>网页返回html代码或者json字符串，都可以被抓取。</p></li><li><p>各种二进制数据，如图片、视频和音频等。利用爬虫，我们可以将这些二进制数据抓取下来，然后保存成对应的文件名。</p></li><li><p>各种扩展名的文件，如 CSS、JavaScript 和配置文件等，只要在浏览器里面可以访问到，就可以将其抓取下来。</p></li></ul><h3 id="2-5-代理的基本原理"><a href="#2-5-代理的基本原理" class="headerlink" title="2.5 - 代理的基本原理"></a>2.5 - 代理的基本原理</h3><p>网站可能采取了一些<strong>反爬虫措施</strong>。比如，服务器会检测某个 IP 在单位时间内的请求次数，如果超过了这个阈值，就会直接拒绝服务，返回一些错误信息，这种情况可以称为<strong>封 IP</strong>。</p><p>为了成功防止封ip，我们借助某种方式来<strong>伪装我们的 IP</strong>，让服务器识别不出是由我们本机发起的请求，就是<strong>使用代理</strong>。</p><h4 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h4><p>代理实际上指的就是代理服务器(proxy server)，它的功能是<strong>代理网络用户去取得网络信息</strong>。</p><p>在我们正常请求一个网站时，是发送了请求给 Web 服务器，Web 服务器把响应传回给我们。</p><p>而在我们使用代理的时候，我们先将请求发送给<strong>代理服务器</strong>，然后代理服务器代替我们去请求。</p><p>这样我们同样可以正常访问网页，但这个过程中 Web 服务器识别出的真实 IP 就不再是我们本机的 IP 了，就成功实现了 IP 伪装。</p><h4 id="代理的作用"><a href="#代理的作用" class="headerlink" title="代理的作用"></a>代理的作用</h4><ul><li>突破自身 IP 访问限制，访问一些平时不能访问的站点。</li><li>访问一些单位或团体内部资源：比如使用教育网内地址段免费代理服务器，就可以用于对教育网开放的各类 FTP 下载上传，以及各类资料查询共享等服务。</li><li>提高访问速度：通常代理服务器都设置一个较大的硬盘缓冲区，当有外界的信息通过时，同时也将其保存到缓冲区中，当其他用户再访问相同的信息时，则直接由缓冲区中取出信息，传给用户，以提高访问速度。</li><li>隐藏真实 IP：上网者也可以通过这种方法隐藏自己的 IP，免受攻击。对于爬虫来说，我们用代理就是为了隐藏自身 IP，防止自身的 IP 被封锁。</li></ul><h4 id="代理分类"><a href="#代理分类" class="headerlink" title="代理分类"></a>代理分类</h4><h5 id="根据协议区分"><a href="#根据协议区分" class="headerlink" title="根据协议区分"></a>根据协议区分</h5><ul><li><strong>FTP 代理服务器</strong>：主要用于<strong>访问 FTP 服务器</strong>，一般有上传、下载以及缓存功能，端口一般为 21、2121 等。</li><li><strong>HTTP 代理服务器</strong>：主要用于<strong>访问网页</strong>，一般有内容过滤和缓存功能，端口一般为 80、8080、3128 等。</li><li><strong>SSL/TLS 代理</strong>：主要用于<strong>访问加密网站</strong>，一般有 SSL 或 TLS 加密功能（最高支持 128 位加密强度），端口一般为 443。</li><li><strong>RTSP 代理</strong>：主要用于<strong>访问 Real 流媒体服务器</strong>，一般有缓存功能，端口一般为 554。</li><li><strong>Telnet 代理</strong>：主要用于 <strong>telnet 远程控制</strong>（黑客入侵计算机时常用于隐藏身份），端口一般为 23。</li><li><strong>POP3/SMTP 代理</strong>：主要用于 <strong>POP3/SMTP 方式收发邮件</strong>，一般有缓存功能，端口一般为 110/25。</li><li><strong>SOCKS 代理</strong>：只是单纯传递数据包，不关心具体协议和用法，所以速度快很多，一般有缓存功能，端口一般为 1080。<br>SOCKS 代理协议又分为 SOCKS4 和 SOCKS5，前者只支持 TCP，而后者支持 TCP 和 UDP，还支持各种身份验证机制、服务器端域名解析等。简单来说，SOCK4 能做到的 SOCKS5 都可以做到，但 SOCKS5 能做到的 SOCK4 不一定能做到。</li></ul><h5 id="根据匿名程度区分"><a href="#根据匿名程度区分" class="headerlink" title="根据匿名程度区分"></a>根据匿名程度区分</h5><ul><li><strong>高度匿名代理</strong>：会将<strong>数据包原封不动地转发</strong>，在服务端看来就好像真的是一个普通客户端在访问，而记录的 IP 是代理服务器的 IP。</li><li><strong>普通匿名代理</strong>：会在<strong>数据包上做一些改动</strong>，服务端上有可能发现这是个代理服务器，也有一定几率追查到客户端的真实 IP。代理服务器通常会加入的 HTTP 头有 <code>HTTP_VIA</code> 和 <code>HTTP_X_FORWARDED_FOR</code>。</li><li><strong>透明代理</strong>：不但改动了数据包，还会<strong>告诉服务器客户端的真实 IP</strong>。这种代理除了能用缓存技术提高浏览速度，能用内容过滤提高安全性之外，并无其他显著作用，最常见的例子是内网中的硬件防火墙。</li><li><strong>间谍代理</strong>：指组织或个人创建的用于记录用户传输的数据，然后进行研究、监控等目的的代理服务器。</li></ul><h5 id="常见代理设置"><a href="#常见代理设置" class="headerlink" title="常见代理设置"></a>常见代理设置</h5><ul><li><strong>使用网上的免费代理</strong>：最好使用高匿代理，另外可用的代理不多，需要在使用前筛选一下可用代理，也可以进一步维护一个代理池</li><li><strong>使用付费代理服务</strong>：互联网上存在许多代理商，可以付费使用，质量比免费代理好很多。</li><li><strong>ADSL 拨号</strong>：拨一次号换一次 IP，稳定性高，也是一种比较有效的解决方案</li></ul><h2 id="3-基本库的使用"><a href="#3-基本库的使用" class="headerlink" title="3 - 基本库的使用"></a>3 - 基本库的使用</h2><h3 id="3-1-urllib实现请求的发送"><a href="#3-1-urllib实现请求的发送" class="headerlink" title="3.1 - urllib实现请求的发送"></a>3.1 - urllib实现请求的发送</h3><ul><li>**<code>request</code>**：它是最基本的 HTTP 请求模块，可以用来模拟发送请求。就像在浏览器里输入网址然后回车一样，只需要给库方法传入 URL 以及额外的参数，就可以模拟实现这个过程了。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># data = bytes(urllib.parse.urlencode(&#123;&#x27;word&#x27;: &#x27;hello&#x27;&#125;), encoding=&#x27;utf8&#x27;)</span></span><br><span class="line"><span class="comment"># timeout 参数用于设置超时时间，单位为秒，意思就是如果请求超出了设置的这个时间，还没有得到响应，就会抛出异常。</span></span><br><span class="line"><span class="comment"># context 参数，它必须是 ssl.SSLContext 类型，用来指定 SSL 设置。</span></span><br><span class="line"><span class="comment"># cafile 和 capath 这两个参数分别指定 CA 证书和它的路径，这个在请求 HTTPS 链接时会有用。</span></span><br><span class="line"><span class="comment"># cadefault 参数现在已经弃用了，其默认值为 False</span></span><br><span class="line">urllib.request.urlopen(url, data=<span class="literal">None</span>, [timeout, ]*, cafile=<span class="literal">None</span>, capath=<span class="literal">None</span>, cadefault=<span class="literal">False</span>, context=<span class="literal">None</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment"># url 用于请求 URL，这是必传参数，其他都是可选参数。</span></span><br><span class="line"><span class="comment"># data 如果要传，必须传 bytes（字节流）类型的。如果它是字典，可以先用 urllib.parse 模块里的 urlencode() 编码</span></span><br><span class="line"><span class="comment"># headers 是一个字典，它就是请求头，我们可以在构造请求时通过 headers 参数直接构造，也可以通过调用请求实例的 add_header() 方法添加。</span></span><br><span class="line"><span class="comment"># origin_req_host 指的是请求方的 host 名称或者 IP 地址。</span></span><br><span class="line"><span class="comment"># unverifiable 表示这个请求是否是无法验证的，默认是 False，意思就是说用户没有足够权限来选择接收这个请求的结果。</span></span><br><span class="line"><span class="comment"># method 是一个字符串，用来指示请求使用的方法，比如 GET、POST 和 PUT 等。</span></span><br><span class="line"><span class="comment"># req.add_header(&#x27;User-Agent&#x27;, &#x27;Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)&#x27;)添加请求头</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">urllib</span>.<span class="title">request</span>.<span class="title">Request</span>(<span class="params">url, data=<span class="literal">None</span>, headers=&#123;&#125;, origin_req_host=<span class="literal">None</span>, unverifiable=<span class="literal">False</span>, method=<span class="literal">None</span></span>)</span></span><br></pre></td></tr></table></figure><p>接下来，就需要更强大的工具 Handler 登场了。简而言之，我们可以把它理解为各种处理器，有专门处理登录验证的，有处理 Cookies 的，有处理代理设置的。利用它们，我们几乎可以做到 HTTP 请求中所有的事情。</p><ol><li><p><code>HTTPDefaultErrorHandler</code>：用于处理 HTTP 响应错误，错误都会抛出 HTTPError 类型的异常。</p></li><li><p><code>HTTPRedirectHandler</code>：用于处理重定向。</p></li><li><p><code>HTTPCookieProcessor</code>：用于处理 Cookies。</p></li><li><p><code>ProxyHandler</code>：用于设置代理，默认代理为空。</p></li><li><p><code>HTTPPasswordMgr</code>：用于管理密码，它维护了用户名和密码的表。</p></li><li><p><code>HTTPBasicAuthHandler</code>：用于管理认证，如果一个链接打开时需要认证，那么可以用它来解决认证问题。</p></li></ol><ul><li>**<code>error</code>**：异常处理模块，如果出现请求错误，我们可以捕获这些异常，然后进行重试或其他操作以保证程序不会意外终止。</li></ul><p><code>URLError</code>它具有一个属性 reason，即返回错误的原因。</p><p><code>URLError</code> 的子类，专门用来处理 HTTP 请求错误，比如认证请求失败等。它有如下 3 个属性：<br>  **<code>code</code>**：返回 HTTP 状态码，比如 404 表示网页不存在，500 表示服务器内部错误等。<br>  **<code>reason</code>**：同父类一样，用于返回错误的原因。<br>  **<code>headers</code>**：返回请求头</p><ul><li>**<code>parse</code>**：一个工具模块，提供了许多 URL 处理方法，比如拆分、解析、合并等。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># urlstring：这是必填项，即待解析的 URL。</span></span><br><span class="line"><span class="comment"># scheme：它是默认的协议（比如 http 或 https 等）。假如这个url没有带协议信息，会将这个作为默认的协议。</span></span><br><span class="line"><span class="comment"># allow_fragments：即是否忽略 fragment。如果它被设置为 False，fragment 部分就会被忽略，它会被解析为 path、parameters 或者 query 的一部分，而 fragment 部分为空。</span></span><br><span class="line">urllib.parse.urlparse(urlstring, scheme=<span class="string">&#x27;&#x27;</span>, allow_fragments=<span class="literal">True</span>)</span><br><span class="line">urlunparse()</span><br><span class="line">urlsplit()</span><br><span class="line">urlunsplit()</span><br><span class="line">urljoin()</span><br><span class="line">parse_qs()</span><br><span class="line">parse_qsl()</span><br><span class="line">quote()</span><br><span class="line">unquote()</span><br></pre></td></tr></table></figure><ul><li>**<code>robotparser</code>**：主要是用来识别网站的 robots.txt 文件，然后判断哪些网站可以爬，哪些网站不可以爬，它其实用得比较少。</li></ul><h3 id="3-2-requests实现请求的发送"><a href="#3-2-requests实现请求的发送" class="headerlink" title="3.2 - requests实现请求的发送"></a>3.2 - requests实现请求的发送</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">r = requests.post(<span class="string">&#x27;http://httpbin.org/post&#x27;</span>)</span><br><span class="line">r = requests.put(<span class="string">&#x27;http://httpbin.org/put&#x27;</span>)</span><br><span class="line">r = requests.delete(<span class="string">&#x27;http://httpbin.org/delete&#x27;</span>)</span><br><span class="line">r = requests.head(<span class="string">&#x27;http://httpbin.org/get&#x27;</span>)</span><br><span class="line">r = requests.options(<span class="string">&#x27;http://httpbin.org/get&#x27;</span>)</span><br></pre></td></tr></table></figure><p>返回码和相应的查询条件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 信息性状态码</span></span><br><span class="line"><span class="number">100</span>: (<span class="string">&#x27;continue&#x27;</span>,),</span><br><span class="line"><span class="number">101</span>: (<span class="string">&#x27;switching_protocols&#x27;</span>,),</span><br><span class="line"><span class="number">102</span>: (<span class="string">&#x27;processing&#x27;</span>,),</span><br><span class="line"><span class="number">103</span>: (<span class="string">&#x27;checkpoint&#x27;</span>,),</span><br><span class="line"><span class="number">122</span>: (<span class="string">&#x27;uri_too_long&#x27;</span>, <span class="string">&#x27;request_uri_too_long&#x27;</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment"># 成功状态码</span></span><br><span class="line"><span class="number">200</span>: (<span class="string">&#x27;ok&#x27;</span>, <span class="string">&#x27;okay&#x27;</span>, <span class="string">&#x27;all_ok&#x27;</span>, <span class="string">&#x27;all_okay&#x27;</span>, <span class="string">&#x27;all_good&#x27;</span>, <span class="string">&#x27;\\o/&#x27;</span>, <span class="string">&#x27;✓&#x27;</span>),</span><br><span class="line"><span class="number">201</span>: (<span class="string">&#x27;created&#x27;</span>,),</span><br><span class="line"><span class="number">202</span>: (<span class="string">&#x27;accepted&#x27;</span>,),</span><br><span class="line"><span class="number">203</span>: (<span class="string">&#x27;non_authoritative_info&#x27;</span>, <span class="string">&#x27;non_authoritative_information&#x27;</span>),</span><br><span class="line"><span class="number">204</span>: (<span class="string">&#x27;no_content&#x27;</span>,),</span><br><span class="line"><span class="number">205</span>: (<span class="string">&#x27;reset_content&#x27;</span>, <span class="string">&#x27;reset&#x27;</span>),</span><br><span class="line"><span class="number">206</span>: (<span class="string">&#x27;partial_content&#x27;</span>, <span class="string">&#x27;partial&#x27;</span>),</span><br><span class="line"><span class="number">207</span>: (<span class="string">&#x27;multi_status&#x27;</span>, <span class="string">&#x27;multiple_status&#x27;</span>, <span class="string">&#x27;multi_stati&#x27;</span>, <span class="string">&#x27;multiple_stati&#x27;</span>),</span><br><span class="line"><span class="number">208</span>: (<span class="string">&#x27;already_reported&#x27;</span>,),</span><br><span class="line"><span class="number">226</span>: (<span class="string">&#x27;im_used&#x27;</span>,),</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重定向状态码</span></span><br><span class="line"><span class="number">300</span>: (<span class="string">&#x27;multiple_choices&#x27;</span>,),</span><br><span class="line"><span class="number">301</span>: (<span class="string">&#x27;moved_permanently&#x27;</span>, <span class="string">&#x27;moved&#x27;</span>, <span class="string">&#x27;\\o-&#x27;</span>),</span><br><span class="line"><span class="number">302</span>: (<span class="string">&#x27;found&#x27;</span>,),</span><br><span class="line"><span class="number">303</span>: (<span class="string">&#x27;see_other&#x27;</span>, <span class="string">&#x27;other&#x27;</span>),</span><br><span class="line"><span class="number">304</span>: (<span class="string">&#x27;not_modified&#x27;</span>,),</span><br><span class="line"><span class="number">305</span>: (<span class="string">&#x27;use_proxy&#x27;</span>,),</span><br><span class="line"><span class="number">306</span>: (<span class="string">&#x27;switch_proxy&#x27;</span>,),</span><br><span class="line"><span class="number">307</span>: (<span class="string">&#x27;temporary_redirect&#x27;</span>, <span class="string">&#x27;temporary_moved&#x27;</span>, <span class="string">&#x27;temporary&#x27;</span>),</span><br><span class="line"><span class="number">308</span>: (<span class="string">&#x27;permanent_redirect&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;resume_incomplete&#x27;</span>, <span class="string">&#x27;resume&#x27;</span>,), <span class="comment"># These 2 to be removed in 3.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端错误状态码</span></span><br><span class="line"><span class="number">400</span>: (<span class="string">&#x27;bad_request&#x27;</span>, <span class="string">&#x27;bad&#x27;</span>),</span><br><span class="line"><span class="number">401</span>: (<span class="string">&#x27;unauthorized&#x27;</span>,),</span><br><span class="line"><span class="number">402</span>: (<span class="string">&#x27;payment_required&#x27;</span>, <span class="string">&#x27;payment&#x27;</span>),</span><br><span class="line"><span class="number">403</span>: (<span class="string">&#x27;forbidden&#x27;</span>,),</span><br><span class="line"><span class="number">404</span>: (<span class="string">&#x27;not_found&#x27;</span>, <span class="string">&#x27;-o-&#x27;</span>),</span><br><span class="line"><span class="number">405</span>: (<span class="string">&#x27;method_not_allowed&#x27;</span>, <span class="string">&#x27;not_allowed&#x27;</span>),</span><br><span class="line"><span class="number">406</span>: (<span class="string">&#x27;not_acceptable&#x27;</span>,),</span><br><span class="line"><span class="number">407</span>: (<span class="string">&#x27;proxy_authentication_required&#x27;</span>, <span class="string">&#x27;proxy_auth&#x27;</span>, <span class="string">&#x27;proxy_authentication&#x27;</span>),</span><br><span class="line"><span class="number">408</span>: (<span class="string">&#x27;request_timeout&#x27;</span>, <span class="string">&#x27;timeout&#x27;</span>),</span><br><span class="line"><span class="number">409</span>: (<span class="string">&#x27;conflict&#x27;</span>,),</span><br><span class="line"><span class="number">410</span>: (<span class="string">&#x27;gone&#x27;</span>,),</span><br><span class="line"><span class="number">411</span>: (<span class="string">&#x27;length_required&#x27;</span>,),</span><br><span class="line"><span class="number">412</span>: (<span class="string">&#x27;precondition_failed&#x27;</span>, <span class="string">&#x27;precondition&#x27;</span>),</span><br><span class="line"><span class="number">413</span>: (<span class="string">&#x27;request_entity_too_large&#x27;</span>,),</span><br><span class="line"><span class="number">414</span>: (<span class="string">&#x27;request_uri_too_large&#x27;</span>,),</span><br><span class="line"><span class="number">415</span>: (<span class="string">&#x27;unsupported_media_type&#x27;</span>, <span class="string">&#x27;unsupported_media&#x27;</span>, <span class="string">&#x27;media_type&#x27;</span>),</span><br><span class="line"><span class="number">416</span>: (<span class="string">&#x27;requested_range_not_satisfiable&#x27;</span>, <span class="string">&#x27;requested_range&#x27;</span>, <span class="string">&#x27;range_not_satisfiable&#x27;</span>),</span><br><span class="line"><span class="number">417</span>: (<span class="string">&#x27;expectation_failed&#x27;</span>,),</span><br><span class="line"><span class="number">418</span>: (<span class="string">&#x27;im_a_teapot&#x27;</span>, <span class="string">&#x27;teapot&#x27;</span>, <span class="string">&#x27;i_am_a_teapot&#x27;</span>),</span><br><span class="line"><span class="number">421</span>: (<span class="string">&#x27;misdirected_request&#x27;</span>,),</span><br><span class="line"><span class="number">422</span>: (<span class="string">&#x27;unprocessable_entity&#x27;</span>, <span class="string">&#x27;unprocessable&#x27;</span>),</span><br><span class="line"><span class="number">423</span>: (<span class="string">&#x27;locked&#x27;</span>,),</span><br><span class="line"><span class="number">424</span>: (<span class="string">&#x27;failed_dependency&#x27;</span>, <span class="string">&#x27;dependency&#x27;</span>),</span><br><span class="line"><span class="number">425</span>: (<span class="string">&#x27;unordered_collection&#x27;</span>, <span class="string">&#x27;unordered&#x27;</span>),</span><br><span class="line"><span class="number">426</span>: (<span class="string">&#x27;upgrade_required&#x27;</span>, <span class="string">&#x27;upgrade&#x27;</span>),</span><br><span class="line"><span class="number">428</span>: (<span class="string">&#x27;precondition_required&#x27;</span>, <span class="string">&#x27;precondition&#x27;</span>),</span><br><span class="line"><span class="number">429</span>: (<span class="string">&#x27;too_many_requests&#x27;</span>, <span class="string">&#x27;too_many&#x27;</span>),</span><br><span class="line"><span class="number">431</span>: (<span class="string">&#x27;header_fields_too_large&#x27;</span>, <span class="string">&#x27;fields_too_large&#x27;</span>),</span><br><span class="line"><span class="number">444</span>: (<span class="string">&#x27;no_response&#x27;</span>, <span class="string">&#x27;none&#x27;</span>),</span><br><span class="line"><span class="number">449</span>: (<span class="string">&#x27;retry_with&#x27;</span>, <span class="string">&#x27;retry&#x27;</span>),</span><br><span class="line"><span class="number">450</span>: (<span class="string">&#x27;blocked_by_windows_parental_controls&#x27;</span>, <span class="string">&#x27;parental_controls&#x27;</span>),</span><br><span class="line"><span class="number">451</span>: (<span class="string">&#x27;unavailable_for_legal_reasons&#x27;</span>, <span class="string">&#x27;legal_reasons&#x27;</span>),</span><br><span class="line"><span class="number">499</span>: (<span class="string">&#x27;client_closed_request&#x27;</span>,),</span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务端错误状态码</span></span><br><span class="line"><span class="number">500</span>: (<span class="string">&#x27;internal_server_error&#x27;</span>, <span class="string">&#x27;server_error&#x27;</span>, <span class="string">&#x27;/o\\&#x27;</span>, <span class="string">&#x27;✗&#x27;</span>),</span><br><span class="line"><span class="number">501</span>: (<span class="string">&#x27;not_implemented&#x27;</span>,),</span><br><span class="line"><span class="number">502</span>: (<span class="string">&#x27;bad_gateway&#x27;</span>,),</span><br><span class="line"><span class="number">503</span>: (<span class="string">&#x27;service_unavailable&#x27;</span>, <span class="string">&#x27;unavailable&#x27;</span>),</span><br><span class="line"><span class="number">504</span>: (<span class="string">&#x27;gateway_timeout&#x27;</span>,),</span><br><span class="line"><span class="number">505</span>: (<span class="string">&#x27;http_version_not_supported&#x27;</span>, <span class="string">&#x27;http_version&#x27;</span>),</span><br><span class="line"><span class="number">506</span>: (<span class="string">&#x27;variant_also_negotiates&#x27;</span>,),</span><br><span class="line"><span class="number">507</span>: (<span class="string">&#x27;insufficient_storage&#x27;</span>,),</span><br><span class="line"><span class="number">509</span>: (<span class="string">&#x27;bandwidth_limit_exceeded&#x27;</span>, <span class="string">&#x27;bandwidth&#x27;</span>),</span><br><span class="line"><span class="number">510</span>: (<span class="string">&#x27;not_extended&#x27;</span>,),</span><br><span class="line"><span class="number">511</span>: (<span class="string">&#x27;network_authentication_required&#x27;</span>, <span class="string">&#x27;network_auth&#x27;</span>, <span class="string">&#x27;network_authentication&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Python——爬虫入门&quot;&gt;&lt;a href=&quot;#Python——爬虫入门&quot; class=&quot;headerlink&quot; title=&quot;Python——爬虫入门&quot;&gt;&lt;/a&gt;Python——爬虫入门&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;</summary>
      
    
    
    
    <category term="Python" scheme="https://sun-ruijiang.github.io/categories/Python/"/>
    
    
    <category term="Tutorial" scheme="https://sun-ruijiang.github.io/tags/Tutorial/"/>
    
    <category term="爬虫" scheme="https://sun-ruijiang.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>数据通信实验报告</title>
    <link href="https://sun-ruijiang.github.io/2021/05/06/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/"/>
    <id>https://sun-ruijiang.github.io/2021/05/06/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/</id>
    <published>2021-05-05T16:00:00.000Z</published>
    <updated>2021-05-09T09:53:47.749Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据通信实验报告"><a href="#数据通信实验报告" class="headerlink" title="数据通信实验报告"></a>数据通信实验报告</h1><p><img src="/2021/05/06/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/0001.jpg" alt="0001"></p><p><img src="/2021/05/06/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/0002.jpg" alt="0002"></p><p><img src="/2021/05/06/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/0003.jpg" alt="0003"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数据通信实验报告&quot;&gt;&lt;a href=&quot;#数据通信实验报告&quot; class=&quot;headerlink&quot; title=&quot;数据通信实验报告&quot;&gt;&lt;/a&gt;数据通信实验报告&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2021/05/06/%E6%95%B0%E6%8D%AE%E9%80</summary>
      
    
    
    
    <category term="Others" scheme="https://sun-ruijiang.github.io/categories/Others/"/>
    
    
    <category term="课程作业" scheme="https://sun-ruijiang.github.io/tags/%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A/"/>
    
  </entry>
  
  <entry>
    <title>深入理解计算机系统——基础知识</title>
    <link href="https://sun-ruijiang.github.io/2021/05/03/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>https://sun-ruijiang.github.io/2021/05/03/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</id>
    <published>2021-05-02T16:00:00.000Z</published>
    <updated>2021-05-11T16:00:44.762Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深入理解计算机系统——基础知识"><a href="#深入理解计算机系统——基础知识" class="headerlink" title="深入理解计算机系统——基础知识"></a>深入理解计算机系统——基础知识</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>为了方便我查询一些我可能会忘记的基础知识，我写下这篇博客</p><p>中间可能有自己的一些经验看法</p><p>以下的知识没有先后顺序，用时特定自查</p><h2 id="通用寄存器"><a href="#通用寄存器" class="headerlink" title="通用寄存器"></a>通用寄存器</h2><p><img src="/2021/05/03/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20210503221648779.png" alt="image-20210503221648779"></p><ul><li><p><code>EAX</code> 是”累加器”(accumulator)，它是很多<strong>加法乘法</strong>指令的<strong>缺省寄存器</strong>。</p></li><li><p><code>EBX</code> 是”基地址”(base)寄存器，在<strong>内存寻址</strong>时存放<strong>基地址</strong>。</p></li><li><p><code>ECX</code> 是计数器(counter)，是重复(<strong>REP</strong>)前缀指令和<strong>LOOP</strong>指令的<strong>内定计数器</strong>。</p></li><li><p><code>EDX </code>则总是被用来放<strong>整数除法</strong>产生的<strong>余数</strong>。</p></li><li><p><code>ESI/EDI</code> 分别叫做”源/目标索引寄存器”(source/destination index)，因为在很多<strong>字符串操作</strong>指令中，<code>DS:ESI</code>指向<strong>源串</strong>,而<code>ES:EDI</code>指向<strong>目标串</strong>.</p></li><li><p><code>EBP</code> 是”基址指针”(BASE POINTER)，它最经常被用作高级语言函数调用的”<strong>框架指针</strong>“(frame pointer)， 在破解的时候,经常可以看见一个标准的函数起始代码（左为目标寄存器）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">push ebp ;保存前一个函数帧指针ebp</span><br><span class="line">mov ebp,esp ;EBP设为当前帧指针</span><br><span class="line">sub esp, xxx ;预留xxx字节给函数临时变量.</span><br></pre></td></tr></table></figure></li></ul><ul><li><code>ESP</code> 专门用作堆栈指针，被形象地称为<strong>栈顶指针</strong>，堆栈的顶部是地址小的区域，压入堆栈的数据越多，<strong>ESP也就越来越小</strong>。在<strong>32位系统</strong>中，<code>ESP</code><strong>每次减少4字节</strong>。</li><li>使用惯例：<code>eax</code>,<code>edx</code>,<code>ecx</code>被划分为<strong>调用者</strong>保存寄存器；<code>ebx</code>,<code>esi</code>,<code>edi</code>被划分为<strong>被调用者</strong>保存寄存器</li></ul><h2 id="专用寄存器"><a href="#专用寄存器" class="headerlink" title="专用寄存器"></a>专用寄存器</h2><ul><li><p><code>EIP</code>指令指针（Instruction Pointer.）。代码段中下一个指令的指针。自动更新。</p></li><li><p><code>ESP</code>堆栈指针（Stack pointer.）。指针指向栈顶（在<code>SS</code>（Stack Segment）栈段寄存器）。与POP、PUSH、CALL等指令一起使用</p></li></ul><h2 id="段寄存器"><a href="#段寄存器" class="headerlink" title="段寄存器"></a>段寄存器</h2><table><thead><tr><th>寄存器名</th><th>寄存器功能</th></tr></thead><tbody><tr><td>CS</td><td>Code Segment. 代码段</td></tr><tr><td>DS</td><td>Data Segment. 数据段</td></tr><tr><td>SS</td><td>Stack Segment. 栈堆段</td></tr><tr><td>ES</td><td>Extra Data Segment. 额外数据段</td></tr><tr><td>FS</td><td>Extra Data Segment.额外数据段</td></tr><tr><td>GS</td><td>Extra Data Segment.额外数据段</td></tr></tbody></table><h2 id="EFLAGS寄存器"><a href="#EFLAGS寄存器" class="headerlink" title="EFLAGS寄存器"></a>EFLAGS寄存器</h2><p><code>EFLAGS(program status and control) register</code>主要用于<strong>提供程序的状态</strong>及<strong>进行相应的控制</strong></p><p><code>EFLAGS</code> 标志。<code>cpu</code>中各种条件的状态。 <code>EFLAGS</code>寄存器的各个位的用途如下所述：</p><p><img src="/2021/05/03/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20210508092423969.png" alt="image-20210508092423969"></p><ul><li><code>00 Carry (CF)</code>：保存加法后的进位或者减法后的借位。 也指示错误情况。</li><li><code>02 Parity (PF)</code>：奇数位数为0，偶数位数为1。<code>80x86</code>的过时功能。</li><li><code>04 Auxiliary Carry (AF)</code>：BCD加法或者减法后，<code>DAA</code>和<code>DAS</code>指令使用的高度专用标志。</li><li><code>06 Zero (ZF)</code>：如果算术或逻辑指令的结果为0，则<code>ZF</code>为1。</li><li><code>07 Sign (SF)</code>：如果算术或逻辑指令的结果符号为负，则<code>SF</code>为1。</li><li><code>08 Trap (TF)</code>：陷阱使能。微处理器在调试和控制寄存器指示的条件下中断指令流。</li><li><code>09 Interrupt (IF)</code>：控制<code>INTR</code>(Interrupt request)引脚的操作。如果为1，中断使能。由<code>STI</code>和<code>CLI</code>指令设置。</li><li><code>10 Direction (DF)</code>：指定在<strong>字符串指令</strong>期间<code>DI</code>和/或<code>SI</code>寄存器的<strong>递增或递减模式</strong>。如果<code>DF</code>为1，寄存器<strong>自动递减</strong>。由<code>STD</code>和<code>CLD</code>指令设定。</li><li><code>11 Overflow (OF)</code>：为加法和减法指令设置。</li><li><code>12 and 13 I/O privilege level (IOPL)</code>：保持代码必须运行的特权级别，以便执行任何与输入输出相关的指令。00是最高的。</li><li><code>14 Trap Nested Task (NT)</code>：当一个系统任务在保护模式下通过<code>call</code>指令调用另一个系统任务时设置。</li></ul><p><img src="/2021/05/03/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20210508102645978.png" alt="image-20210508102645978"></p><ul><li>下半部分不记录了，用不到</li></ul><h2 id="一些容易忽略的指令"><a href="#一些容易忽略的指令" class="headerlink" title="一些容易忽略的指令"></a>一些容易忽略的指令</h2><ul><li><p><code>call</code>指令：过程调用，将返回地址入栈，并跳转到被调用过程的起始处。返回地址就是紧跟在<code>call</code>后的那条指令的地址。</p></li><li><p><code>ret</code>指令：从过程调用中返回，将返回地址出栈，并跳转到返回地址。</p></li><li><p><code>push</code>指令：入栈，<code>esp</code>减4字节，操作数就是入栈的数据</p></li><li><p><code>pop</code>指令：出栈，<code>esp</code>加4字节，操作数就是出栈的数据保存的地址</p></li><li><p><code>cmp</code>指令：比较指令，<code>cmp s2,s1</code>基于<code>s1-s2</code>，只设置条件码</p></li><li><p><code>test</code>指令：测试指令，<code>test s2,s1</code>基于<code>s1&amp;s2</code>，只设置条件码</p></li><li><p><code>leave</code>指令：为返回准备栈，等价于</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">movl  %ebp,%esp            &#x2F;&#x2F;栈指针设置为帧指针</span><br><span class="line">popl  %ebp                 &#x2F;&#x2F;ebp存储一开始被保存的旧的ebp,esp指向返回地址的节点</span><br></pre></td></tr></table></figure><h2 id="栈帧图"><a href="#栈帧图" class="headerlink" title="栈帧图"></a>栈帧图</h2></li></ul><p><img src="/2021/05/03/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/OIP.we3zQsK494hBkOLbzxQIiwHaFH" alt="img"></p><p>用c语言描述函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">( (<span class="keyword">void</span>)arrgument <span class="number">1</span>, (<span class="keyword">void</span>)arrgument <span class="number">2</span>, ....... ,(<span class="keyword">void</span>)arrgument n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> local variable <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">void</span> local variable <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">void</span> local variable <span class="number">3</span>;</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">void</span> local variable n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图中的地址从上往下递减的，栈顶在下，栈底在上。</p><p><code>Return address</code>和<code>Previous frame pointer</code>分别是<strong>返回地址</strong>和<strong>调用者的帧指针</strong>。</p><h2 id="跳转指令"><a href="#跳转指令" class="headerlink" title="跳转指令"></a>跳转指令</h2><table><thead><tr><th align="center">指令</th><th align="center">功能</th><th align="center">条件</th></tr></thead><tbody><tr><td align="center"><code>JE</code></td><td align="center">相等则跳转</td><td align="center"><code>ZF</code>=1</td></tr><tr><td align="center"><code>JNE</code></td><td align="center">不相等则跳转</td><td align="center"><code>ZF</code>=0</td></tr><tr><td align="center"><code>JA</code></td><td align="center">无符号大于则跳转</td><td align="center"><code>CF</code>=0 and<code>ZF</code>=0</td></tr><tr><td align="center"><code>JG</code></td><td align="center">有符号大于则跳转</td><td align="center"></td></tr><tr><td align="center"><code>JS</code></td><td align="center">为负则跳转</td><td align="center"></td></tr><tr><td align="center"><code>jle</code></td><td align="center">有符号小于或者等于跳转</td><td align="center"></td></tr><tr><td align="center"><code>JGE</code></td><td align="center">有符号大于或等于跳转</td><td align="center"></td></tr><tr><td align="center"><code>JBE</code></td><td align="center">无符号小于等于则跳转</td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;深入理解计算机系统——基础知识&quot;&gt;&lt;a href=&quot;#深入理解计算机系统——基础知识&quot; class=&quot;headerlink&quot; title=&quot;深入理解计算机系统——基础知识&quot;&gt;&lt;/a&gt;深入理解计算机系统——基础知识&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="CS:APP" scheme="https://sun-ruijiang.github.io/categories/CS-APP/"/>
    
    
    <category term="Tutorial" scheme="https://sun-ruijiang.github.io/tags/Tutorial/"/>
    
  </entry>
  
  <entry>
    <title>深入理解计算机系统——课程作业2</title>
    <link href="https://sun-ruijiang.github.io/2021/05/03/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A2/"/>
    <id>https://sun-ruijiang.github.io/2021/05/03/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A2/</id>
    <published>2021-05-02T16:00:00.000Z</published>
    <updated>2021-05-08T14:50:21.721Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深入理解计算机系统——课程作业2"><a href="#深入理解计算机系统——课程作业2" class="headerlink" title="深入理解计算机系统——课程作业2"></a>深入理解计算机系统——课程作业2</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>五一放假还有作业。。。</p><p>课程作业2共有三个题，都是分析汇编代码</p><h2 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//include &quot;stdio.h&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//define H ?  //定义常数H          //H=37</span></span><br><span class="line"><span class="comment">//define J ?  //定义常数J          //J=16</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> array1[H][J]; </span><br><span class="line"><span class="keyword">int</span> array2[J][H]; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    array1[x][y] = x+<span class="number">2</span>*y;</span><br><span class="line">    array2[y][x] = y-x*x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>Ubuntu 32位</code>系统下经过<code>gcc</code>汇编后，得到的函数f汇编代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">f:</span><br><span class="line">pushl     %ebp            &#x2F;&#x2F;ebp入栈</span><br><span class="line">movl     %esp, %ebp       &#x2F;&#x2F;ebp设为现在的帧指针</span><br><span class="line">pushl     %ebx            &#x2F;&#x2F;ebx入栈</span><br><span class="line">movl     8(%ebp), %ecx    &#x2F;&#x2F;ecx&#x3D; M(8+ebp)&#x3D;x</span><br><span class="line">movl     12(%ebp), %edx   &#x2F;&#x2F;edx&#x3D; M(12+ebp)&#x3D;y</span><br><span class="line">movl     12(%ebp), %eax   &#x2F;&#x2F;eax&#x3D; M(12+ebp)&#x3D;y</span><br><span class="line">addl     %eax, %eax       &#x2F;&#x2F;eax&#x3D;2*eax&#x3D;2*y</span><br><span class="line">addl     8(%ebp), %eax    &#x2F;&#x2F;eax&#x3D; M(8+ebp)+eax&#x3D;x+2*y</span><br><span class="line">sall     $4, %ecx         &#x2F;&#x2F;ecx&#x3D;ecx*16&#x3D;16*x</span><br><span class="line">leal     (%ecx,%edx), %edx  &#x2F;&#x2F;edx&#x3D; ecx+edx &#x3D;16*x+y,so J&#x3D;16</span><br><span class="line">movl     %eax, array1(,%edx,4)   &#x2F;&#x2F;array1[edx]&#x3D;eax</span><br><span class="line">movl     12(%ebp), %edx   &#x2F;&#x2F;edx&#x3D;M(12+ebp)&#x3D;y</span><br><span class="line">movl     8(%ebp), %ebx    &#x2F;&#x2F;ebx&#x3D;M(8+ebp)&#x3D;x</span><br><span class="line">movl     8(%ebp), %eax    &#x2F;&#x2F;eax&#x3D;M(8+ebp)&#x3D;x</span><br><span class="line">imull     8(%ebp), %eax    &#x2F;&#x2F;eax&#x3D;eax*M(8+ebp)&#x3D;x*x</span><br><span class="line">movl     12(%ebp), %ecx    &#x2F;&#x2F;ecx&#x3D;M(12+ebp)&#x3D;y</span><br><span class="line">subl     %eax, %ecx       &#x2F;&#x2F;ecx&#x3D;ecx-eax&#x3D;y-x*x</span><br><span class="line">movl     %edx, %eax       &#x2F;&#x2F;eax&#x3D;edx&#x3D;y</span><br><span class="line">sall     $3, %eax          &#x2F;&#x2F;eax&#x3D;eax*8&#x3D;8*y</span><br><span class="line">addl     %edx, %eax       &#x2F;&#x2F;eax&#x3D;eax+edx&#x3D;8*y+y</span><br><span class="line">sall     $2, %eax         &#x2F;&#x2F;eax&#x3D;eax*4&#x3D;9*y*4</span><br><span class="line">addl     %edx, %eax       &#x2F;&#x2F;eax&#x3D;edx+eax&#x3D;36*y+y</span><br><span class="line">addl     %ebx, %eax        &#x2F;&#x2F;eax&#x3D;ebx+eax&#x3D;37*y+x,so H&#x3D;37</span><br><span class="line">movl     %ecx, array2(,%eax,4)   &#x2F;&#x2F;array2[eax]&#x3D;ecx&#x3D;y-x*x</span><br><span class="line">popl     %ebx              &#x2F;&#x2F;ebx出栈</span><br><span class="line">popl     %ebp              &#x2F;&#x2F;ebp出栈</span><br><span class="line">ret</span><br></pre></td></tr></table></figure><p>请分析每一行汇编代码的意义，并给出常数<code>H</code>和<code>J</code>的值。（20.0分）</p><h2 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h2><p>如下为一个c语言程序中的函数及其在32位系统下编译得到的汇编语言程序代码，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">aprod</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, x, y, z;</span><br><span class="line">    <span class="keyword">int</span> r = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; （  <span class="number">1</span>  ）; （  <span class="number">2</span>  ）) &#123;       <span class="comment">//i&lt;(n-2)    i+=3</span></span><br><span class="line">        （  <span class="number">3</span>  ）;                           <span class="comment">//x=a[i]</span></span><br><span class="line">        （  <span class="number">4</span>  ）;                           <span class="comment">//y=a[i+1]</span></span><br><span class="line">        （  <span class="number">5</span>  ）;                           <span class="comment">//z=a[i+2]</span></span><br><span class="line">        （  <span class="number">6</span>  ）;                           <span class="comment">//r=r*x*y*z</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (; i &lt; n; i++)</span><br><span class="line">        （  <span class="number">7</span>  ）;                           <span class="comment">//r=a[i]*r  </span></span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在32位系统中用<code>gcc</code>编译后，函数<code>aprod</code>对应的汇编语言程序代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">aprod:</span><br><span class="line">pushl     %ebp           &#x2F;&#x2F;ebp入栈</span><br><span class="line">movl     %esp, %ebp      &#x2F;&#x2F;ebp设为现在的帧指针</span><br><span class="line">subl     $32, %esp       &#x2F;&#x2F;esp&#x3D;esp-32，预留32字节给函数临时变量</span><br><span class="line">movl     $1, -20(%ebp)   &#x2F;&#x2F;r&#x3D;M(ebp-20)&#x3D;1</span><br><span class="line">movl     $0, -4(%ebp)    &#x2F;&#x2F;i&#x3D;M(ebp-4)&#x3D;0</span><br><span class="line">jmp      .l2             &#x2F;&#x2F;无条件跳转到.l2</span><br><span class="line"></span><br><span class="line">.l3:</span><br><span class="line">movl     -4(%ebp), %eax  &#x2F;&#x2F;eax&#x3D;M(ebp-4)&#x3D;i</span><br><span class="line">sall     $2, %eax        &#x2F;&#x2F;eax&#x3D;eax*4&#x3D;i*4</span><br><span class="line">addl     8(%ebp), %eax   &#x2F;&#x2F;eax&#x3D;eax+M(8+ebp)&#x3D;4i+a[]</span><br><span class="line">movl     (%eax), %eax    &#x2F;&#x2F;eax&#x3D;M(eax)&#x3D;a[i]</span><br><span class="line">movl     %eax, -8(%ebp)  &#x2F;&#x2F;x&#x3D;M(ebp-8)&#x3D;eax&#x3D;a[i]</span><br><span class="line">movl     -4(%ebp), %eax  &#x2F;&#x2F;eax&#x3D;M(ebp-4)&#x3D;i</span><br><span class="line">addl     $1, %eax        &#x2F;&#x2F;eax&#x3D;eax+1&#x3D;i+1</span><br><span class="line">sall     $2, %eax        &#x2F;&#x2F;eax&#x3D;eax*4&#x3D;4*(i+1)</span><br><span class="line">addl     8(%ebp), %eax   &#x2F;&#x2F;eax&#x3D;M(8+ebp)&#x3D;4*[i+1]+a[]</span><br><span class="line">movl     (%eax), %eax    &#x2F;&#x2F;eax&#x3D;M(eax)&#x3D;a[i+1]</span><br><span class="line">movl     %eax, -12(%ebp) &#x2F;&#x2F;y&#x3D;M(ebp-12)&#x3D;eax&#x3D;a[i+1]</span><br><span class="line">movl     -4(%ebp), %eax  &#x2F;&#x2F;eax&#x3D;(ebp-4)&#x3D;i</span><br><span class="line">addl     $2, %eax        &#x2F;&#x2F;eax&#x3D;eax+2&#x3D;i+2</span><br><span class="line">sall     $2, %eax         &#x2F;&#x2F;eax&#x3D;eax*4&#x3D;4*(i+2)</span><br><span class="line">addl     8(%ebp), %eax    &#x2F;&#x2F;eax&#x3D;eax+M(8+ebp)&#x3D;a[]+4*(i+2)</span><br><span class="line">movl     (%eax), %eax     &#x2F;&#x2F;eax&#x3D;M(eax)&#x3D;a[i+2]</span><br><span class="line">movl     %eax, -16(%ebp)  &#x2F;&#x2F;z&#x3D;M(-16+ebp)&#x3D;eax&#x3D;a[i+2]</span><br><span class="line">movl     -20(%ebp), %eax  &#x2F;&#x2F;eax&#x3D;M(-20+ebp)&#x3D;r</span><br><span class="line">imull     -8(%ebp), %eax  &#x2F;&#x2F;eax*&#x3D;M(-8+ebp)&#x3D;r*x</span><br><span class="line">imull     -12(%ebp), %eax &#x2F;&#x2F;eax*&#x3D;M(-12+ebp)&#x3D;r*x*y</span><br><span class="line">imull     -16(%ebp), %eax  &#x2F;&#x2F;eax*&#x3D;M(-16+ebp)&#x3D;r*x*y*z</span><br><span class="line">movl     %eax, -20(%ebp)  &#x2F;&#x2F;r&#x3D;M(-20+ebp)&#x3D;eax&#x3D;r*x*y*z</span><br><span class="line">addl     $3, -4(%ebp)     &#x2F;&#x2F;i&#x3D;M(-4+ebp)+&#x3D;3&#x3D;i+3</span><br><span class="line"></span><br><span class="line">.l2:</span><br><span class="line">movl     12(%ebp), %eax    &#x2F;&#x2F;eax&#x3D;M(12+ebp)&#x3D;n</span><br><span class="line">subl     $2, %eax          &#x2F;&#x2F;eax&#x3D;eax-2&#x3D;n-2</span><br><span class="line">cmpl     -4(%ebp), %eax    &#x2F;&#x2F;compare eax&#x3D;n-2 with M(ebp-4)&#x3D;i</span><br><span class="line">jg       .l3               &#x2F;&#x2F;eax&#x3D;n-2 &gt; M(ebp-4)&#x3D;i则跳转.l3</span><br><span class="line">jmp      .l4               &#x2F;&#x2F;无条件跳转.l4</span><br><span class="line"></span><br><span class="line">.l5:</span><br><span class="line">movl     -4(%ebp), %eax   &#x2F;&#x2F;eax&#x3D;M(-4+ebp)&#x3D;i</span><br><span class="line">sall     $2, %eax         &#x2F;&#x2F;eax&#x3D;eax*4&#x3D;4*i</span><br><span class="line">addl     8(%ebp), %eax    &#x2F;&#x2F;eax&#x3D;eax+M(8+ebp)&#x3D;a[]+4*i</span><br><span class="line">movl     (%eax), %eax     &#x2F;&#x2F;eax&#x3D;M(eax)&#x3D;a[i]</span><br><span class="line">movl     -20(%ebp), %edx   &#x2F;&#x2F;edx&#x3D;M(-20+ebp)&#x3D;r</span><br><span class="line">imull     %edx, %eax      &#x2F;&#x2F;eax&#x3D;eax*edx&#x3D;a[i]*r</span><br><span class="line">movl     %eax, -20(%ebp)   &#x2F;&#x2F;r&#x3D;M(-20+ebp)&#x3D;eax&#x3D;a[i]*r</span><br><span class="line">addl     $1, -4(%ebp)      &#x2F;&#x2F;i&#x3D;M(-4+ebp)+1</span><br><span class="line"></span><br><span class="line">.l4:</span><br><span class="line">movl     -4(%ebp), %eax    &#x2F;&#x2F;eax&#x3D;M(-4+ebp)&#x3D;i</span><br><span class="line">cmpl     12(%ebp), %eax    &#x2F;&#x2F;compare eax&#x3D;i with M(12+ebp)&#x3D;n</span><br><span class="line">jl       .l5               &#x2F;&#x2F;eax&#x3D;i &lt; M(12+ebp)&#x3D;n则跳转</span><br><span class="line">movl     -20(%ebp), %eax   &#x2F;&#x2F;eax&#x3D;M(-20+ebp)&#x3D;r，返回值为r</span><br><span class="line">leave</span><br><span class="line">ret</span><br></pre></td></tr></table></figure><p>请详细说明每条汇编语句的意义，并将这个函数补充完整。（40.0分）</p><h2 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h2><p>如下为一个c语言程序中的函数及其在32位系统下编译得到的汇编语言程序代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//incl  ude &lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">frac</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;           </span><br><span class="line">    <span class="keyword">if</span>(a&lt;<span class="number">2</span>) <span class="keyword">return</span> ______;           <span class="comment">//a*a</span></span><br><span class="line">    <span class="keyword">return</span> _______;                  <span class="comment">//frac(a-2)+a</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c= ______;                  <span class="comment">// frac(a+b)</span></span><br><span class="line">    <span class="keyword">return</span> ______;                  <span class="comment">// 2*c+b</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">10</span>,j=<span class="number">6</span>;</span><br><span class="line">    <span class="keyword">int</span> k=sum(_______,______);       <span class="comment">//int k=sum(j-i,i++);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的汇编代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">frac:</span><br><span class="line">pushl  %ebp             &#x2F;&#x2F;ebp入栈</span><br><span class="line">movl  %esp, %ebp        &#x2F;&#x2F;ebp&#x3D;esp，设为当前的帧指针</span><br><span class="line">subl  $24, %esp         &#x2F;&#x2F;esp&#x3D;esp-24，预留24字节给临时变量</span><br><span class="line">cmpl  $1, 8(%ebp)       &#x2F;&#x2F;compare a&#x3D;M(8+ebp) with 1</span><br><span class="line">jg    .l2                &#x2F;&#x2F;a&#x3D;M(8+ebp) &gt; 1则跳转到.l2</span><br><span class="line">movl  8(%ebp), %eax      &#x2F;&#x2F;eax&#x3D;M(8+ebp)&#x3D;a</span><br><span class="line">imull  8(%ebp), %eax     &#x2F;&#x2F;eax*&#x3D;M(8+ebp)&#x3D;a*a</span><br><span class="line">jmp   .l3                 &#x2F;&#x2F;无条件跳转.l3</span><br><span class="line"></span><br><span class="line">.l2:</span><br><span class="line">movl  8(%ebp), %eax      &#x2F;&#x2F;eax&#x3D;M(8+ebp)&#x3D;a</span><br><span class="line">subl  $2, %eax           &#x2F;&#x2F;eax&#x3D;eax-2&#x3D;a-2</span><br><span class="line">movl  %eax, (%esp)        &#x2F;&#x2F;M(esp)&#x3D;eax&#x3D;a-2</span><br><span class="line">call  frac               &#x2F;&#x2F;递归fun(a-2)</span><br><span class="line">addl  8(%ebp), %eax       &#x2F;&#x2F;eax&#x3D;eax+M(8+ebp)&#x3D;fun(a-2)+a</span><br><span class="line"></span><br><span class="line">.l3:</span><br><span class="line">leave</span><br><span class="line">ret</span><br><span class="line"></span><br><span class="line">sum:</span><br><span class="line">pushl  %ebp              &#x2F;&#x2F;ebp入栈</span><br><span class="line">movl  %esp, %ebp         &#x2F;&#x2F;ebp&#x3D;esp,设为现在的栈指针</span><br><span class="line">subl  $40, %esp          &#x2F;&#x2F;esp&#x3D;esp-40,预留40字节给临时变量</span><br><span class="line">movl  12(%ebp), %eax     &#x2F;&#x2F;eax&#x3D;M(ebp+12)&#x3D;b</span><br><span class="line">movl  8(%ebp), %edx      &#x2F;&#x2F;edx&#x3D;M(ebp+8)&#x3D;a</span><br><span class="line">addl  %edx, %eax         &#x2F;&#x2F;eax&#x3D;eax+edx&#x3D;a+b</span><br><span class="line">movl  %eax, (%esp)       &#x2F;&#x2F;M(esp)&#x3D;eax&#x3D;a+b</span><br><span class="line">call  frac               &#x2F;&#x2F;调用frac(a+b)</span><br><span class="line">movl  %eax, -12(%ebp)    &#x2F;&#x2F;c&#x3D;M(ebp-12)&#x3D;eax&#x3D;frac(a+b)</span><br><span class="line">movl  -12(%ebp), %eax    &#x2F;&#x2F;eax&#x3D;M(ebp-12)&#x3D;c</span><br><span class="line">addl  %eax, %eax         &#x2F;&#x2F;eax&#x3D;2*eax&#x3D;2*c</span><br><span class="line">addl  12(%ebp), %eax     &#x2F;&#x2F;eax&#x3D;eax+M(ebp+12)&#x3D;2*c+b</span><br><span class="line">leave</span><br><span class="line">ret</span><br><span class="line"></span><br><span class="line">main:</span><br><span class="line">pushl  %ebp           &#x2F;&#x2F;ebp入栈</span><br><span class="line">movl  %esp, %ebp      &#x2F;&#x2F;ebp设为现在的栈指针</span><br><span class="line">andl  $-16, %esp      &#x2F;&#x2F;esp&#x3D;esp &amp; 0xfffffff0</span><br><span class="line">subl  $32, %esp       &#x2F;&#x2F;esp&#x3D;esp-32,预留32位字节给临时变量</span><br><span class="line">movl  $10, 20(%esp)   &#x2F;&#x2F;i&#x3D;M(20+esp)&#x3D;10</span><br><span class="line">movl  $6, 24(%esp)    &#x2F;&#x2F;j&#x3D;M(24+esp)&#x3D;6</span><br><span class="line">movl  20(%esp), %eax  &#x2F;&#x2F;eax&#x3D;M(20+esp)&#x3D;i</span><br><span class="line">movl  24(%esp), %edx  &#x2F;&#x2F;edx&#x3D;M(24+esp)&#x3D;j</span><br><span class="line">subl  %eax, %edx       &#x2F;&#x2F;edx&#x3D;edx-eax&#x3D;j-i&#x3D;-4</span><br><span class="line">movl  20(%esp), %eax   &#x2F;&#x2F;eax&#x3D;M(20+esp)&#x3D;i&#x3D;10</span><br><span class="line">addl  $1, 20(%esp)     &#x2F;&#x2F;i&#x3D;M(20+esp)+1&#x3D;11</span><br><span class="line">movl  %edx, 4(%esp)    &#x2F;&#x2F;M(4+esp)&#x3D;edx&#x3D;-4</span><br><span class="line">movl  %eax, (%esp)     &#x2F;&#x2F;M(esp)&#x3D;eax&#x3D;10</span><br><span class="line">call  sum              &#x2F;&#x2F;调用sum(j-i,i++)</span><br><span class="line">movl  %eax, 28(%esp)   &#x2F;&#x2F;k&#x3D;M(28+esp)&#x3D;eax，将sum函数返回值赋给k</span><br><span class="line">movl  $0, %eax         &#x2F;&#x2F;eax&#x3D;0, return 0</span><br><span class="line">leave</span><br><span class="line">ret</span><br></pre></td></tr></table></figure><p>请详细说明每条汇编语句的意义，并将这个函数补充完整。（40.0分）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;深入理解计算机系统——课程作业2&quot;&gt;&lt;a href=&quot;#深入理解计算机系统——课程作业2&quot; class=&quot;headerlink&quot; title=&quot;深入理解计算机系统——课程作业2&quot;&gt;&lt;/a&gt;深入理解计算机系统——课程作业2&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="CS:APP" scheme="https://sun-ruijiang.github.io/categories/CS-APP/"/>
    
    
    <category term="课程作业" scheme="https://sun-ruijiang.github.io/tags/%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A/"/>
    
  </entry>
  
  <entry>
    <title>贪心算法——会场安排问题</title>
    <link href="https://sun-ruijiang.github.io/2021/04/27/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E4%BC%9A%E5%9C%BA%E5%AE%89%E6%8E%92%E9%97%AE%E9%A2%98/"/>
    <id>https://sun-ruijiang.github.io/2021/04/27/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E4%BC%9A%E5%9C%BA%E5%AE%89%E6%8E%92%E9%97%AE%E9%A2%98/</id>
    <published>2021-04-26T16:00:00.000Z</published>
    <updated>2021-04-27T13:31:41.145Z</updated>
    
    <content type="html"><![CDATA[<h1 id="贪心算法——会场安排问题"><a href="#贪心算法——会场安排问题" class="headerlink" title="贪心算法——会场安排问题"></a>贪心算法——会场安排问题</h1><h2 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h2><p>假设要在足够多的会场里安排一批活动，并希望使用尽可能少的会场。</p><p>设计一个有效的贪心算法进行安排。</p><h2 id="算法设计："><a href="#算法设计：" class="headerlink" title="算法设计："></a>算法设计：</h2><p>对于给定的k个待安排的活动，计算使用最少会场的时间表。</p><h2 id="数据输入："><a href="#数据输入：" class="headerlink" title="数据输入："></a>数据输入：</h2><p>由文件<code>input.txt</code>给出输入数据。</p><p>第一行有1个正整数k，表示有k个待安排的活动。</p><p>接下来的k行中，每行有两个正整数，分别表示k个待安排的活动开始时间和活动结束时间。</p><p>时间以0点开始的分钟计。</p><h2 id="结果输出："><a href="#结果输出：" class="headerlink" title="结果输出："></a>结果输出：</h2><p>将计算的最小会场数输出到文件<code>output.txt</code>。</p><ul><li>输入文件示例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">input.txt</span><br><span class="line">5</span><br><span class="line">1 23</span><br><span class="line">12 28</span><br><span class="line">25 35</span><br><span class="line">27 80</span><br><span class="line">36 50</span><br></pre></td></tr></table></figure><ul><li>输出文件示例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">output.txt</span><br><span class="line">78 52</span><br></pre></td></tr></table></figure><h2 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h2><ul><li>贪心算法，选择局部最优解</li><li>即按开始时间升序排列，再由后一个活动的开始时间大于或等于前一个活动的结束时间作为筛选条件，直到所有的活动都安排完成。</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std ;</span><br><span class="line"></span><br><span class="line"><span class="function">ifstream <span class="title">infile</span><span class="params">(<span class="string">&quot;input.txt&quot;</span>)</span></span>;</span><br><span class="line"><span class="function">ofstream <span class="title">outfile</span><span class="params">(<span class="string">&quot;output.txt&quot;</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line">infile &gt;&gt; k;</span><br><span class="line"><span class="keyword">int</span> start[k], end[k];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">infile &gt;&gt; start[i] &gt;&gt; end[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(start, start + k);</span><br><span class="line"><span class="built_in">sort</span>(end, end + k);</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (start[i] &lt; end[j]) &#123;</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">outfile &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;贪心算法——会场安排问题&quot;&gt;&lt;a href=&quot;#贪心算法——会场安排问题&quot; class=&quot;headerlink&quot; title=&quot;贪心算法——会场安排问题&quot;&gt;&lt;/a&gt;贪心算法——会场安排问题&lt;/h1&gt;&lt;h2 id=&quot;问题描述：&quot;&gt;&lt;a href=&quot;#问题描述：&quot; c</summary>
      
    
    
    
    <category term="Algorithm" scheme="https://sun-ruijiang.github.io/categories/Algorithm/"/>
    
    
    <category term="贪心算法" scheme="https://sun-ruijiang.github.io/tags/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>回溯法——子集和问题</title>
    <link href="https://sun-ruijiang.github.io/2021/04/24/%E5%9B%9E%E6%BA%AF%E6%B3%95%E2%80%94%E2%80%94%E5%AD%90%E9%9B%86%E5%92%8C%E9%97%AE%E9%A2%98/"/>
    <id>https://sun-ruijiang.github.io/2021/04/24/%E5%9B%9E%E6%BA%AF%E6%B3%95%E2%80%94%E2%80%94%E5%AD%90%E9%9B%86%E5%92%8C%E9%97%AE%E9%A2%98/</id>
    <published>2021-04-23T16:00:00.000Z</published>
    <updated>2021-04-24T03:54:12.590Z</updated>
    
    <content type="html"><![CDATA[<h1 id="子集和问题"><a href="#子集和问题" class="headerlink" title="子集和问题"></a>子集和问题</h1><h2 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h2><p>子集和问题的一个实例为<code>&lt;S,t&gt;</code>。</p><p>其中，<code>S=&#123;s1,x2,...,xn&#125;</code>是一个正整数的集合，c是一个正整数。</p><p>子集和问题判定是否存在S的一个子集<code>S1</code>，使得集合中所有元素的和等于c。</p><p>试设计一个解子集和问题的回溯法。</p><h2 id="算法设计："><a href="#算法设计：" class="headerlink" title="算法设计："></a>算法设计：</h2><p>对于给定的正整数集合<code>S=&#123;s1,x2,...,xn&#125;</code>和正整数c，计算S的一个子集，使得子集和为c</p><h2 id="数据输入："><a href="#数据输入：" class="headerlink" title="数据输入："></a>数据输入：</h2><p>由文件<code>input.txt</code>提供输入数据。</p><p>文件第1行有2个整数n和c，n表示S的大小，c是子集和的目标值。</p><p>接下来的1行中，有n个正整数，表示集合S中的元素。</p><h2 id="结果输出："><a href="#结果输出：" class="headerlink" title="结果输出："></a>结果输出：</h2><p>将子集和问题的解输出到文件<code>output.txt</code>。</p><p>当问题无解时，输出“No Solution！”。</p><ul><li>输入文件示例</li></ul><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">input.txt</span><br><span class="line">5 10</span><br><span class="line">2 2 6 5 4</span><br></pre></td></tr></table></figure><ul><li>输出文件示例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">output.txt</span><br><span class="line">2 2 6</span><br></pre></td></tr></table></figure><h2 id="算法思路："><a href="#算法思路：" class="headerlink" title="算法思路："></a>算法思路：</h2><ul><li>回溯法的步骤为：<ul><li>修改当前节点状态</li><li>递归子节点状态</li><li>回改当前节点状态</li></ul></li><li><code>backtracking</code>函数：<ul><li>我们将<code>value</code>的值加上当前节点的值，同时添加当前元素到<code>tem</code>数组里。</li><li>递归下一节点，<code>backtracking(i + 1, n, c, S, tem, answer, value);</code></li><li>弹出<code>tem</code>数组刚刚添加的元素，<code>value</code>减去刚才加上的值</li><li>如果<code>value</code>值等于<code>c</code>，那么就添加此时的<code>tem</code>数组到<code>answer</code>二维数组中</li></ul></li><li><code>ssumc</code>函数：<ul><li>如果<code>answer</code>二维数组为空，则返回<code>tem</code>数组</li><li>如果<code>answer</code>不为空，则返回<code>answer</code>数组的第一个元素</li></ul></li><li><code>main</code>函数：<ul><li>从文件输入n、c、S数组</li><li>数组<code>ans</code>等于函数<code>ssumc</code>函数的返回值</li><li>输出数组元素，如果为空，则输出“No Solution！”到文件中</li></ul></li></ul><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std ;</span><br><span class="line"></span><br><span class="line"><span class="function">ifstream <span class="title">infile</span><span class="params">(<span class="string">&quot;input.txt&quot;</span>)</span></span>;</span><br><span class="line"><span class="function">ofstream <span class="title">outfile</span><span class="params">(<span class="string">&quot;outfile.txt&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">backtracking</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> &amp;n, <span class="keyword">int</span> &amp;c, vector&lt;<span class="keyword">int</span>&gt; S, vector&lt;<span class="keyword">int</span>&gt; &amp;tem,  vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; &amp;answer, <span class="keyword">int</span> value)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">ssumc</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> c, vector&lt;<span class="keyword">int</span>&gt; S)</span> </span>&#123;</span><br><span class="line">vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; answer;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; tem;</span><br><span class="line"><span class="keyword">int</span> value = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">backtracking</span>(i, n, c, S, tem, answer, value);</span><br><span class="line"><span class="keyword">if</span> (!answer.<span class="built_in">empty</span>())</span><br><span class="line"><span class="keyword">return</span> answer[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> tem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">backtracking</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> &amp;n, <span class="keyword">int</span> &amp;c, vector&lt;<span class="keyword">int</span>&gt; S, vector&lt;<span class="keyword">int</span>&gt; &amp;tem, vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; &amp;answer, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (value == c) &#123;</span><br><span class="line">answer.<span class="built_in">push_back</span>(tem);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = pos; i &lt; n; i++) &#123;</span><br><span class="line">tem.<span class="built_in">push_back</span>(S[i]);</span><br><span class="line">value += S[i];</span><br><span class="line"></span><br><span class="line"><span class="built_in">backtracking</span>(i + <span class="number">1</span>, n, c, S, tem, answer, value);</span><br><span class="line"></span><br><span class="line">tem.<span class="built_in">pop_back</span>();</span><br><span class="line">value -= S[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; S;</span><br><span class="line"><span class="keyword">int</span> n, c;</span><br><span class="line">infile &gt;&gt; n &gt;&gt; c;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> tem;</span><br><span class="line">infile &gt;&gt; tem;</span><br><span class="line">S.<span class="built_in">push_back</span>(tem);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; ans = <span class="built_in">ssumc</span>(n, c, S);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = ans.<span class="built_in">begin</span>(); it != ans.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">outfile &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ans.<span class="built_in">empty</span>())</span><br><span class="line">outfile &lt;&lt; <span class="string">&quot;No Soution!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>顾名思义，回溯法的核心是回溯。</p><p>在搜索到某一节点的时候，如果我们发现目前的节点（及其子节点）并不是需求目标时，我们回退到原来的节点继续搜索，并且把在目前节点修改的状态还原。</p><p>这样的好处是我们可以始终只对图的总状态进行修改，而非每次遍历时新建一个图来储存状态。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;子集和问题&quot;&gt;&lt;a href=&quot;#子集和问题&quot; class=&quot;headerlink&quot; title=&quot;子集和问题&quot;&gt;&lt;/a&gt;子集和问题&lt;/h1&gt;&lt;h2 id=&quot;问题描述：&quot;&gt;&lt;a href=&quot;#问题描述：&quot; class=&quot;headerlink&quot; title=&quot;问题描</summary>
      
    
    
    
    <category term="Algorithm" scheme="https://sun-ruijiang.github.io/categories/Algorithm/"/>
    
    
    <category term="回溯算法" scheme="https://sun-ruijiang.github.io/tags/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>动态规划算法——双机调度问题</title>
    <link href="https://sun-ruijiang.github.io/2021/04/05/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E5%8F%8C%E6%9C%BA%E8%B0%83%E5%BA%A6%E9%97%AE%E9%A2%98/"/>
    <id>https://sun-ruijiang.github.io/2021/04/05/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E5%8F%8C%E6%9C%BA%E8%B0%83%E5%BA%A6%E9%97%AE%E9%A2%98/</id>
    <published>2021-04-04T16:00:00.000Z</published>
    <updated>2021-04-15T14:52:07.156Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述:"></a>问题描述:</h3><p>用2台处理机<code>A</code>和<code>B</code>处理<code>n</code>个作业。设第<code>i</code>个作业交给机器A处理时需要时间<code>ai</code>，若由机器<code>B</code>来处理,则需要时间bi。</p><p>由于各作业的特点和机器的性能关系，很可能对于某些<code>i</code>，有<code>ai ≥ bi</code>，而对于某些<code>j ≠ i</code>，有<code>aj &lt; bj</code>。既不能将一个作业分开由2台机器处理，也没有一台机器能同时处理2个作业。</p><p>研究一个实例:</p><p><code>(a1, a2, a3, a4, a5, a6) = (2, 5, 7, 10, 5, 2)</code></p><p><code>(b1, b2, b3, b4, b5, b6) = (3, 8, 4, 11, 3, 4)</code></p><h3 id="算法设计"><a href="#算法设计" class="headerlink" title="算法设计:"></a>算法设计:</h3><p>对于给定的n个作业，找出一个最优调度方案，使<code>A</code>、<code>B</code>两台机器处理完这n个作业的时间最短。</p><h3 id="数据输入"><a href="#数据输入" class="headerlink" title="数据输入:"></a>数据输入:</h3><p>由文件<code>input. txt</code>提供输入数据。</p><p>文件的第1行是1个正整数<code>n</code>,表示要处理<code>n</code>个作业</p><p>在接下来的2行中,每行有n个正整数，分别表示处理机<code>A</code>和<code>B</code>处理第<code>i</code>个作业需要的处理时间。</p><h3 id="结果输出"><a href="#结果输出" class="headerlink" title="结果输出:"></a>结果输出:</h3><p>将计算出的最短处理时间输出到文件<code>output txt</code>。</p><ul><li><p>输入文件示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">input.txt</span><br><span class="line"></span><br><span class="line">6</span><br><span class="line">2 5 7 10 5 2</span><br><span class="line">3 8 4 11 3 4</span><br></pre></td></tr></table></figure></li><li><p>输出文件示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">output.txt</span><br><span class="line"></span><br><span class="line">15</span><br></pre></td></tr></table></figure></li></ul><h2 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h2><ul><li>找出<code>n</code>个任务所有耗时中最大的数<code>m</code>，也就是<code>A</code>和<code>B</code>数组的最大值。</li><li>设置三维布尔量数组<code>p[mn][mn][n]</code>，布尔量<code>p[i][j][k]</code>表示前<code>k</code>个作业可以在处理机<code>A</code>用时不超过<code>i</code>，处理机B不超过<code>j</code>的时间内完成。动态规划算法：<code>p[i][j][k] = p[i-ak][j][k-1] | p[i][j-bk][k-1]</code>（<code>|</code>为按位与运算符）</li><li>由上一步所得的结果我们可以找到时间最短的答案，具体是遍历布尔量为1的<code>k = n</code>的数组，取<code>min(i, j)</code>，如果比前一个小则取这个</li><li>具体算法如下</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ifstream infile ;</span><br><span class="line">infile.<span class="built_in">open</span>( <span class="string">&quot;input.txt&quot;</span> ) ;</span><br><span class="line">infile &gt;&gt; n ;</span><br><span class="line"></span><br><span class="line">a = <span class="keyword">new</span> <span class="keyword">int</span>[n] ;</span><br><span class="line">b = <span class="keyword">new</span> <span class="keyword">int</span>[n] ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">infile &gt;&gt; a[i] ;</span><br><span class="line">m = <span class="built_in">max</span>( a[i] , m ) ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">infile &gt;&gt; b[i] ;</span><br><span class="line">m = <span class="built_in">max</span>( b[i] , m ) ;</span><br><span class="line">&#125;</span><br><span class="line">mn = m * n ;</span><br><span class="line"></span><br><span class="line">infile.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dyna</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">bool</span>*** p = <span class="keyword">new</span> <span class="keyword">bool</span>** [mn+<span class="number">1</span>] ;</span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt;= mn ; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">p[i] = <span class="keyword">new</span> <span class="keyword">bool</span>* [mn+<span class="number">1</span>] ;</span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">int</span> j = <span class="number">0</span> ; j &lt;= mn ; j++ )</span><br><span class="line">&#123;</span><br><span class="line">p[i][j] = <span class="keyword">new</span> <span class="keyword">bool</span> [n+<span class="number">1</span>] ;</span><br><span class="line">p[i][j][<span class="number">0</span>] = <span class="literal">true</span> ;</span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">int</span> k = <span class="number">1</span> ; k &lt;= n ; k ++ )</span><br><span class="line">&#123;</span><br><span class="line">p[i][j][k] = <span class="literal">false</span> ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">int</span> k = <span class="number">1</span> ; k &lt;= n ; k ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt;= mn ; i++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">int</span> j = <span class="number">0</span> ; j &lt;= mn ; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>( i - a[k<span class="number">-1</span>] &gt;= <span class="number">0</span> ) p[i][j][k] = p[i-a[k<span class="number">-1</span>]][j][k<span class="number">-1</span>] ;</span><br><span class="line"><span class="keyword">if</span>( j - b[k<span class="number">-1</span>] &gt;= <span class="number">0</span> ) p[i][j][k] = p[i][j][k] || p[i][j-b[k<span class="number">-1</span>]][k<span class="number">-1</span>] ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> opt = mn ;</span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt;= mn ; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">int</span> j= <span class="number">0</span> ; j &lt;= mn ; j++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>( p[i][j][n] )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> tmp = <span class="built_in">max</span>( i , j ) ;</span><br><span class="line"><span class="keyword">if</span>( tmp &lt; opt ) opt = tmp ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ofstream outfile ;</span><br><span class="line">outfile.<span class="built_in">open</span>( <span class="string">&quot;output.txt&quot;</span> ) ;</span><br><span class="line">outfile &lt;&lt; opt &lt;&lt; endl ;</span><br><span class="line"> outfile.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">read</span>() ;</span><br><span class="line"><span class="built_in">dyna</span>() ;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上述算法的时间复杂度为<code>O(m2n3) </code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述:&quot;&gt;&lt;/a&gt;问题描述:&lt;</summary>
      
    
    
    
    <category term="Algorithm" scheme="https://sun-ruijiang.github.io/categories/Algorithm/"/>
    
    
    <category term="Dynamic programming" scheme="https://sun-ruijiang.github.io/tags/Dynamic-programming/"/>
    
  </entry>
  
  <entry>
    <title>hexo写作——我的第一篇博客</title>
    <link href="https://sun-ruijiang.github.io/2021/04/04/hexo%E5%86%99%E4%BD%9C%E2%80%94%E2%80%94%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>https://sun-ruijiang.github.io/2021/04/04/hexo%E5%86%99%E4%BD%9C%E2%80%94%E2%80%94%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</id>
    <published>2021-04-03T16:00:00.000Z</published>
    <updated>2021-05-04T01:55:54.985Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>大体上建好了网站，现在我们来学习一下如何在<code>hexo</code>上写作，并同步你的第一篇文章到GitHub上</p></blockquote><h2 id="现在开始"><a href="#现在开始" class="headerlink" title="现在开始"></a>现在开始</h2><h3 id="创建一篇博客"><a href="#创建一篇博客" class="headerlink" title="创建一篇博客"></a>创建一篇博客</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post &lt;My New Post&gt;</span><br></pre></td></tr></table></figure><p>如果不想使用命令行，直接在<code>source/_post</code>文件夹创建即可</p><p>需要注意的是，在文件编写的开头需要加上，<code>title</code>、<code>date</code>、<code>tag</code>、<code>category</code>、<code>author</code>、<code>Topping</code>这几个信息</p><h3 id="打开hexo服务器"><a href="#打开hexo服务器" class="headerlink" title="打开hexo服务器"></a>打开<code>hexo</code>服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>打开一个shell，输入这行命令</p><p>这是为了在本地观察渲染后的博客网站，显示一个<code>http://localhost:4000</code>网址，可以再这里观察网站变化</p><h3 id="生成静态网页"><a href="#生成静态网页" class="headerlink" title="生成静态网页"></a>生成静态网页</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate --watch</span><br></pre></td></tr></table></figure><p>打开另一个shell，输入命令·</p><p>如果不输入这行命令，网页是不会变化的，需要不断重复打开</p><p>输入命令后，我们可以刷新网页以更新变化，也可以在shell中看到网站的改变</p><h3 id="部署到GitHub仓库"><a href="#部署到GitHub仓库" class="headerlink" title="部署到GitHub仓库"></a>部署到GitHub仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>部署命令·，可能出错，如果出现<code>SSL Connection</code>错误，就是因为网络不好</p><p>再次输入部署命令就好了</p><h3 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h3><p>为了实现插入图片，我们需要进行这几个操作：</p><ul><li><p>安装<code>hexo</code>插件：<code>npm install hexo-renderer-marked</code></p></li><li><p>修改配置文件<code>_config.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">marked:</span></span><br><span class="line">  <span class="attr">prependRoot:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">postAsset:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p><code>Typora</code>的偏好设置中，我们将图片存储到指定路径<code>./$&#123;filename&#125;</code></p></li><li><p>具体使用：随便粘贴一张图到文章中，<code>ctrl+f</code>寻找<code>&lt;md文件名&gt;/</code>将它替换为空</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;大体上建好了网站，现在我们来学习一下如何在&lt;code&gt;hexo&lt;/code&gt;上写作，并同步你的第一篇文章到GitHub上&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;现在开始&quot;&gt;&lt;a href=&quot;#现在开始&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="Others" scheme="https://sun-ruijiang.github.io/categories/Others/"/>
    
    
    <category term="hexo" scheme="https://sun-ruijiang.github.io/tags/hexo/"/>
    
    <category term="Tutorial" scheme="https://sun-ruijiang.github.io/tags/Tutorial/"/>
    
  </entry>
  
</feed>
