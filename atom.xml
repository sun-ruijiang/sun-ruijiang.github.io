<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sung&#39;s Blog</title>
  
  <subtitle>Debug the World</subtitle>
  <link href="https://sun-ruijiang.github.io/atom.xml" rel="self"/>
  
  <link href="https://sun-ruijiang.github.io/"/>
  <updated>2021-06-01T15:21:53.221Z</updated>
  <id>https://sun-ruijiang.github.io/</id>
  
  <author>
    <name>Sung</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>深入理解计算机系统——LAB-4_BufLab</title>
    <link href="https://sun-ruijiang.github.io/2021/05/29/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94LAB-4_BufLab/"/>
    <id>https://sun-ruijiang.github.io/2021/05/29/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94LAB-4_BufLab/</id>
    <published>2021-05-28T16:00:00.000Z</published>
    <updated>2021-06-01T15:21:53.221Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深入理解计算机系统——LAB-4-Buf-Lab"><a href="#深入理解计算机系统——LAB-4-Buf-Lab" class="headerlink" title="深入理解计算机系统——LAB-4_Buf_Lab"></a>深入理解计算机系统——LAB-4_Buf_Lab</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>缓冲区溢出实验。</strong></p><p>要求学生们通过利用一个<strong>缓冲区溢出漏洞</strong>，来<strong>修改</strong>一个<strong>二进制可执行文件的运行时行为</strong>。</p><p>这个实验教会学生们<strong>栈的原理</strong>，并让他们了解到写那种<strong>易于遭受缓冲区溢出攻击的代码</strong>的<strong>危险性</strong>。</p><h2 id="实验环境和使用工具"><a href="#实验环境和使用工具" class="headerlink" title="实验环境和使用工具"></a>实验环境和使用工具</h2><ul><li><p>主机为<code>Windows10</code></p></li><li><p>运行炸弹的虚拟机<code>Ubuntu12.04.5</code></p></li><li><p><code>gdb7.4</code>版本</p></li><li><p><code>objdump2.22</code>版本</p></li><li><p><code>VS code</code>编辑器，下载了<code>x86 and x86_64 Assembly</code>插件，提供汇编代码高亮功能</p></li></ul><h2 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h2><h3 id="准备过程，查看buflab-writeup-pdf"><a href="#准备过程，查看buflab-writeup-pdf" class="headerlink" title="准备过程，查看buflab-writeup.pdf"></a>准备过程，查看<code>buflab-writeup.pdf</code></h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;深入理解计算机系统——LAB-4-Buf-Lab&quot;&gt;&lt;a href=&quot;#深入理解计算机系统——LAB-4-Buf-Lab&quot; class=&quot;headerlink&quot; title=&quot;深入理解计算机系统——LAB-4_Buf_Lab&quot;&gt;&lt;/a&gt;深入理解计算机系统——LAB</summary>
      
    
    
    
    <category term="CS:APP" scheme="https://sun-ruijiang.github.io/categories/CS-APP/"/>
    
    
    <category term="课程作业" scheme="https://sun-ruijiang.github.io/tags/%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A/"/>
    
    <category term="Lab" scheme="https://sun-ruijiang.github.io/tags/Lab/"/>
    
  </entry>
  
  <entry>
    <title>深入理解计算机系统——课程作业7</title>
    <link href="https://sun-ruijiang.github.io/2021/05/29/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A7/"/>
    <id>https://sun-ruijiang.github.io/2021/05/29/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A7/</id>
    <published>2021-05-28T16:00:00.000Z</published>
    <updated>2021-06-02T05:56:05.202Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深入理解计算机系统——课程作业7"><a href="#深入理解计算机系统——课程作业7" class="headerlink" title="深入理解计算机系统——课程作业7"></a>深入理解计算机系统——课程作业7</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>正准备做buflab突然发现了新的课程作业，先做简单的。</p><h2 id="题一"><a href="#题一" class="headerlink" title="题一"></a>题一</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>现有两段代码（分别是两个.c文件），如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> d = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">p</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">x = <span class="number">100</span>;</span><br><span class="line">p();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;d=%d\n&quot;</span>, d);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;x=%d\n&quot;</span>, x);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//pl.c</span></span><br><span class="line"><span class="keyword">double</span> x = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">p</span><span class="params">()</span> </span>&#123;</span><br><span class="line">x = <span class="number">1.0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请问通过分离编译、链接后，屏幕打印输出是什么（请贴图为证）？</p><p>结合链接一章所学相关知识，请分析解释为什么会有这个结果，可结合 objdump, readelf, nm 等工具辅助分析（请呈现你的分析过程）。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p><strong>输出结果如下</strong></p><p><img src="/2021/05/29/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A7/image-20210602093820902.png" alt="image-20210602093820902"></p><p>我们想知道到底输出了什么，使用objdump查看反汇编代码，查看p和main函数的指令</p><p><img src="/2021/05/29/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A7/image-20210602115531512.png" alt="image-20210602115531512"></p><p>发现最后输出0x804a020地址的内容，于是我们使用gdb调试下断点在*main+24，就是输出之前的位置，然后运行调试</p><p><img src="/2021/05/29/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A7/image-20210602123845576.png" alt="image-20210602123845576"></p><p>我们发现0x804a020地址的内容，在运行之前是0x00000000 0x00000000，运行到断点处是0x00000000 0x3ff00000</p><p>所以最后输出的是0x00000000也就是0</p><p><strong>分析原因：</strong>double类型是8字节的，按照%d输出四个字节的话，不会输出0x3ff0000000000000（double 1.0）而是它的后四个字节0x00000000（int 0）</p><h2 id="题二"><a href="#题二" class="headerlink" title="题二"></a>题二</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>现有两段代码（分别是两个.c文件），如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> d = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">200</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">p</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">p( );</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;d = % d, x = % d\n&quot;</span>, d, x);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//p.c</span></span><br><span class="line"><span class="keyword">double</span> d;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">p</span><span class="params">( )</span> </span>&#123;</span><br><span class="line">d = <span class="number">1.0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请问通过分离编译、链接后，屏幕打印输出是什么（请贴图为证）？</p><p>结合链接一章所学相关知识，请分析解释为什么会有这个结果，可结合 objdump, readelf, nm 等工具辅助分析（请呈现你的分析过程）。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>输出结果如下<br><img src="/2021/05/29/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A7/image-20210602130523997.png" alt="image-20210602130523997"></p><p><img src="/2021/05/29/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A7/image-20210602130414470.png" alt="image-20210602130414470"></p><p>分析原因：从汇编代码中我们可以知道，函数p还是赋给d一个0x3ff0000000000000（double 1.0），调试验证确实是double 1.0，然后先输出0x804a014地址的值0x00000000（int 0），然后输出0x804a018地址的值0x3ff00000（int 1072693248）<br>![image-20210602134224920]image-20210602134224920.png)</p><h2 id="题三：P476-家庭作业7-12"><a href="#题三：P476-家庭作业7-12" class="headerlink" title="题三：P476 家庭作业7.12"></a>题三：P476 家庭作业7.12</h2><table><thead><tr><th align="center">图7-10中的行号</th><th align="center">地址</th><th align="center">值</th></tr></thead><tbody><tr><td align="center">15（bufp0）</td><td align="center">0x080483cb</td><td align="center">0x0804945c</td></tr><tr><td align="center">16（buf[1]）</td><td align="center">0x080483d0</td><td align="center">0x08049458</td></tr><tr><td align="center">18（bufp1）</td><td align="center">0x080483d8</td><td align="center">0x08049548</td></tr><tr><td align="center">18（buf[1]）</td><td align="center">0x080483dc</td><td align="center">0x08049458</td></tr><tr><td align="center">23（bufp1）</td><td align="center">0x080483e7</td><td align="center">0x08049548</td></tr></tbody></table><h2 id="题四：P478-家庭作业7-14"><a href="#题四：P478-家庭作业7-14" class="headerlink" title="题四：P478 家庭作业7.14"></a>题四：P478 家庭作业7.14</h2><h3 id="A、-text节重定位修改的指令"><a href="#A、-text节重定位修改的指令" class="headerlink" title="A、.text节重定位修改的指令"></a>A、.text节重定位修改的指令</h3><p>.text存放的是已编译程序的机器代码</p><p>第7,10,12,13,15行的指令，因为不是32位的地址，不需要重定位。</p><table><thead><tr><th align="center">节偏移</th><th align="center">重定位类型</th><th align="center">符号名字</th></tr></thead><tbody><tr><td align="center">0x11</td><td align="center">R_386_32</td><td align="center">.rodata</td></tr></tbody></table><h3 id="B、-rodata节修改的数据"><a href="#B、-rodata节修改的数据" class="headerlink" title="B、.rodata节修改的数据"></a>B、.rodata节修改的数据</h3><p>.rodata在这里存放的是switch语句的跳转表。<br>| 节偏移 | 重定位类型 | 符号名字 |<br>| :—-: | :——–: | :——: |<br>|  0x0   |  R_386_32  |  relo3   |<br>|  0x4   |  R_386_32  |  relo3   |<br>|  0x8   |  R_386_32  |  relo3   |<br>|  0xc   |  R_386_32  |  relo3   |<br>|  0x10  |  R_386_32  |  relo3   |<br>|  0x14  |  R_386_32  |  relo3   |</p><h2 id="题五：P479-家庭作业7-15"><a href="#题五：P479-家庭作业7-15" class="headerlink" title="题五：P479 家庭作业7.15"></a>题五：P479 家庭作业7.15</h2><h3 id="A、libc-a和libm-a的版本中包含多少目标文件？"><a href="#A、libc-a和libm-a的版本中包含多少目标文件？" class="headerlink" title="A、libc.a和libm.a的版本中包含多少目标文件？"></a>A、libc.a和libm.a的版本中包含多少目标文件？</h3><p>在Ubuntu12.04.5系统下进行</p><p>先使用locate命令寻找.a文件</p><p><img src="/2021/05/29/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A7/image-20210602083937856.png" alt="image-20210602083937856"></p><p><img src="/2021/05/29/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A7/image-20210602084001274.png" alt="image-20210602084001274"></p><p>然后使用nm命令查看文件，发现：</p><ul><li>libc.a有101个目标文件</li><li>libm.a有150个目标文件</li></ul><h3 id="B、gcc-O2产生的可执行代码和gcc-O2-g产生的不同？"><a href="#B、gcc-O2产生的可执行代码和gcc-O2-g产生的不同？" class="headerlink" title="B、gcc -O2产生的可执行代码和gcc -O2 -g产生的不同？"></a>B、gcc -O2产生的可执行代码和gcc -O2 -g产生的不同？</h3><p>-g选项生成的可执行目标文件多两个节</p><p><strong>.debug：</strong>一个调试符号表。包括局部变量、全局变量以及原始的C源文件。</p><p><strong>.line：</strong>原始C源程序中的行号和.text节中机器指令之间的映射。</p><h3 id="C、GCC驱动程序使用的是什么共享库？"><a href="#C、GCC驱动程序使用的是什么共享库？" class="headerlink" title="C、GCC驱动程序使用的是什么共享库？"></a>C、GCC驱动程序使用的是什么共享库？</h3><p><strong>libc.so共享库</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;深入理解计算机系统——课程作业7&quot;&gt;&lt;a href=&quot;#深入理解计算机系统——课程作业7&quot; class=&quot;headerlink&quot; title=&quot;深入理解计算机系统——课程作业7&quot;&gt;&lt;/a&gt;深入理解计算机系统——课程作业7&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="CS:APP" scheme="https://sun-ruijiang.github.io/categories/CS-APP/"/>
    
    
    <category term="课程作业" scheme="https://sun-ruijiang.github.io/tags/%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A/"/>
    
  </entry>
  
  <entry>
    <title>深入理解计算机系统——课程作业6</title>
    <link href="https://sun-ruijiang.github.io/2021/05/25/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A6/"/>
    <id>https://sun-ruijiang.github.io/2021/05/25/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A6/</id>
    <published>2021-05-24T16:00:00.000Z</published>
    <updated>2021-05-26T12:34:10.686Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深入理解计算机系统——课程作业6"><a href="#深入理解计算机系统——课程作业6" class="headerlink" title="深入理解计算机系统——课程作业6"></a>深入理解计算机系统——课程作业6</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>今天做作业6</p><h2 id="题一：家庭作业6-30"><a href="#题一：家庭作业6-30" class="headerlink" title="题一：家庭作业6.30"></a>题一：家庭作业6.30</h2><h3 id="A、地址格式"><a href="#A、地址格式" class="headerlink" title="A、地址格式"></a>A、地址格式</h3><p><img src="/2021/05/25/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A6/image-20210525211625958.png" alt="image-20210525211625958"></p><h3 id="B、读写操作顺序执行结果"><a href="#B、读写操作顺序执行结果" class="headerlink" title="B、读写操作顺序执行结果"></a>B、读写操作顺序执行结果</h3><p><img src="/2021/05/25/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A6/image-20210525212521139.png" alt="image-20210525212521139"></p><h2 id="题二：家庭作业6-31"><a href="#题二：家庭作业6-31" class="headerlink" title="题二：家庭作业6.31"></a>题二：家庭作业6.31</h2><h3 id="A、高速缓存C的大小"><a href="#A、高速缓存C的大小" class="headerlink" title="A、高速缓存C的大小"></a>A、高速缓存C的大小</h3><p><code>C = S * E * B = 128</code>，大小为128字节</p><h3 id="B、地址格式"><a href="#B、地址格式" class="headerlink" title="B、地址格式"></a>B、地址格式</h3><p><img src="/2021/05/25/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A6/image-20210525213035291.png" alt="image-20210525213035291"></p><h2 id="题三：家庭作业6-32"><a href="#题三：家庭作业6-32" class="headerlink" title="题三：家庭作业6.32"></a>题三：家庭作业6.32</h2><h3 id="A、0x0718地址格式"><a href="#A、0x0718地址格式" class="headerlink" title="A、0x0718地址格式"></a>A、0x0718地址格式</h3><p><img src="/2021/05/25/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A6/image-20210525213634359.png" alt="image-20210525213634359"></p><h3 id="B、存储器引用"><a href="#B、存储器引用" class="headerlink" title="B、存储器引用"></a>B、存储器引用</h3><p><img src="/2021/05/25/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A6/image-20210525213953712.png" alt="image-20210525213953712"></p><h2 id="题四：家庭作业6-37"><a href="#题四：家庭作业6-37" class="headerlink" title="题四：家庭作业6.37"></a>题四：家庭作业6.37</h2><h3 id="A、假设高速缓存的1024字节，直接映射，高速缓存块的大小是32字节，不命中率是多少"><a href="#A、假设高速缓存的1024字节，直接映射，高速缓存块的大小是32字节，不命中率是多少" class="headerlink" title="A、假设高速缓存的1024字节，直接映射，高速缓存块的大小是32字节，不命中率是多少"></a>A、假设高速缓存的1024字节，直接映射，高速缓存块的大小是32字节，不命中率是多少</h3><p>不命中率是100%，因为直接映射，<code>x</code>数组大小为<code>256 * 2 * 4 = 2048</code>字节，<code>x[0][i]</code>和<code>x[1][i]</code>对应同一个高速缓存数据块，所以每次都会容量不命中。</p><h3 id="B、假设高速缓存的2048字节，其他同上"><a href="#B、假设高速缓存的2048字节，其他同上" class="headerlink" title="B、假设高速缓存的2048字节，其他同上"></a>B、假设高速缓存的2048字节，其他同上</h3><p>不命中率是12.5%，因为缓存足够大，所以只有冷不命中，也就是4/32 = 1/8</p><h3 id="C、假设高速缓存的1024字节，两路组相连，高速缓存块的大小是32字节，不命中率是多少"><a href="#C、假设高速缓存的1024字节，两路组相连，高速缓存块的大小是32字节，不命中率是多少" class="headerlink" title="C、假设高速缓存的1024字节，两路组相连，高速缓存块的大小是32字节，不命中率是多少"></a>C、假设高速缓存的1024字节，两路组相连，高速缓存块的大小是32字节，不命中率是多少</h3><p>只有冷不命中，不命中率为12.5%。</p><h3 id="D、对于情况3，提高高速缓存大小帮助降低不命中率吗？原因？"><a href="#D、对于情况3，提高高速缓存大小帮助降低不命中率吗？原因？" class="headerlink" title="D、对于情况3，提高高速缓存大小帮助降低不命中率吗？原因？"></a>D、对于情况3，提高高速缓存大小帮助降低不命中率吗？原因？</h3><p>不会降低，因为块大小不变时，冷不命中的概率不可能被减小。</p><h3 id="E、对于情况3，更大的块大小帮助降低不命中率吗？原因？"><a href="#E、对于情况3，更大的块大小帮助降低不命中率吗？原因？" class="headerlink" title="E、对于情况3，更大的块大小帮助降低不命中率吗？原因？"></a>E、对于情况3，更大的块大小帮助降低不命中率吗？原因？</h3><p>会降低，因为一个块的大小增加，冷不命中的频率就降低。</p><h2 id="题五：家庭作业6-42"><a href="#题五：家庭作业6-42" class="headerlink" title="题五：家庭作业6.42"></a>题五：家庭作业6.42</h2><p>每行只有4个字节，那只可能是循环中后三个命中，第一个不命中，不命中率为0.25。</p><h2 id="题六：家庭作业6-43"><a href="#题六：家庭作业6-43" class="headerlink" title="题六：家庭作业6.43"></a>题六：家庭作业6.43</h2><p>每行只有4个字节，每次要写一个char，不命中率仍然为0.25</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;深入理解计算机系统——课程作业6&quot;&gt;&lt;a href=&quot;#深入理解计算机系统——课程作业6&quot; class=&quot;headerlink&quot; title=&quot;深入理解计算机系统——课程作业6&quot;&gt;&lt;/a&gt;深入理解计算机系统——课程作业6&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="CS:APP" scheme="https://sun-ruijiang.github.io/categories/CS-APP/"/>
    
    
    <category term="课程作业" scheme="https://sun-ruijiang.github.io/tags/%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A/"/>
    
  </entry>
  
  <entry>
    <title>深入理解计算机系统——课程作业5</title>
    <link href="https://sun-ruijiang.github.io/2021/05/23/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A5/"/>
    <id>https://sun-ruijiang.github.io/2021/05/23/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A5/</id>
    <published>2021-05-22T16:00:00.000Z</published>
    <updated>2021-05-29T04:29:22.780Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深入理解计算机系统——课程作业5"><a href="#深入理解计算机系统——课程作业5" class="headerlink" title="深入理解计算机系统——课程作业5"></a>深入理解计算机系统——课程作业5</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>突然要做作业不会做，昨天学了一手，今天开始写</p><h2 id="题一：p376家庭作业5-15"><a href="#题一：p376家庭作业5-15" class="headerlink" title="题一：p376家庭作业5.15"></a>题一：p376家庭作业5.15</h2><h3 id="A、画关键路径"><a href="#A、画关键路径" class="headerlink" title="A、画关键路径"></a>A、画关键路径</h3><p><img src="/2021/05/23/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A5/image-20210524172744364.png" alt="image-20210524172744364"></p><p><img src="/2021/05/23/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A5/image-20210524174834951.png" alt="image-20210524174834951"></p><p><img src="/2021/05/23/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A5/image-20210524175909779.png" alt="image-20210524175909779"></p><h3 id="B、对于float数据类型，关键路径决定的CPE下限是什么"><a href="#B、对于float数据类型，关键路径决定的CPE下限是什么" class="headerlink" title="B、对于float数据类型，关键路径决定的CPE下限是什么"></a>B、对于float数据类型，关键路径决定的CPE下限是什么</h3><p>单精度的加法运算的延迟CPE是3</p><h3 id="C、整数数据的关键路径决定的CPE的下界是什么"><a href="#C、整数数据的关键路径决定的CPE的下界是什么" class="headerlink" title="C、整数数据的关键路径决定的CPE的下界是什么"></a>C、整数数据的关键路径决定的CPE的下界是什么</h3><p>整数的加法运算的延迟CPE是1</p><h3 id="D、解释两个浮点版本的CPE为什么都是3，即使乘法需要4-5个周期"><a href="#D、解释两个浮点版本的CPE为什么都是3，即使乘法需要4-5个周期" class="headerlink" title="D、解释两个浮点版本的CPE为什么都是3，即使乘法需要4-5个周期"></a>D、解释两个浮点版本的CPE为什么都是3，即使乘法需要4-5个周期</h3><p>因为单精度和双精度的加法运算CPE都是3。</p><p>对于乘法运算来说，因为没有数据相关，所以它可以进行流水线式地执行，发射时间是1，不会比3更大。</p><h2 id="题二：p376家庭作业5-16"><a href="#题二：p376家庭作业5-16" class="headerlink" title="题二：p376家庭作业5.16"></a>题二：p376家庭作业5.16</h2><h3 id="三次循环展开的代码："><a href="#三次循环展开的代码：" class="headerlink" title="三次循环展开的代码："></a>三次循环展开的代码：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inner5</span><span class="params">(vec_ptr x, vec_ptr y, <span class="keyword">data_t</span> *dest)</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">int</span> length = vec_length(x);</span><br><span class="line"><span class="keyword">data_t</span> *xdata = get_vec_start(x);</span><br><span class="line"><span class="keyword">data_t</span> *ydata = get_vec_start(y);</span><br><span class="line"><span class="keyword">data_t</span> sum = (<span class="keyword">data_t</span>) <span class="number">0</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">int</span> limit = length - <span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; limit; i += <span class="number">3</span>) &#123;</span><br><span class="line">sum = sum + xdata[i] * ydata[i]</span><br><span class="line">      + xdata[i + <span class="number">1</span>] * ydata[i + <span class="number">1</span>]</span><br><span class="line">      + xdata[i + <span class="number">2</span>] * ydata[i + <span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (; i &lt; length; i++) &#123;</span><br><span class="line">sum = sum + xdata[i] * ydata[i];</span><br><span class="line">&#125;</span><br><span class="line">*dest = sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="A、解释为什么任何版本的内积过程都不能达到比2更小的CPE"><a href="#A、解释为什么任何版本的内积过程都不能达到比2更小的CPE" class="headerlink" title="A、解释为什么任何版本的内积过程都不能达到比2更小的CPE"></a>A、解释为什么任何版本的内积过程都不能达到比2更小的CPE</h3><p>由于加载单元每个时钟周期只能启动一条加载操作。</p><p>如果每次计算时要从两个存储器位置中加载数据，就要分两次进行，所以CPE不可能小于2</p><h3 id="B、为什么浮点数据的性能不会通过循环展开得到提高。"><a href="#B、为什么浮点数据的性能不会通过循环展开得到提高。" class="headerlink" title="B、为什么浮点数据的性能不会通过循环展开得到提高。"></a>B、为什么浮点数据的性能不会通过循环展开得到提高。</h3><p>因为关键路径还是length个浮点加法，虽然迭代次数减半了，但是每次迭代中还是有两个顺序的加法操作。</p><h2 id="题三：p376家庭作业5-20"><a href="#题三：p376家庭作业5-20" class="headerlink" title="题三：p376家庭作业5.20"></a>题三：p376家庭作业5.20</h2><h3 id="实现代码："><a href="#实现代码：" class="headerlink" title="实现代码："></a>实现代码：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">poly_optimized</span><span class="params">(<span class="keyword">double</span> a[], <span class="keyword">double</span> x, <span class="keyword">int</span> degree)</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">double</span> result = a[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">double</span> xpwr = x;</span><br><span class="line"><span class="keyword">double</span> x2 = x * x;</span><br><span class="line"><span class="keyword">double</span> x3 = x2 * x;</span><br><span class="line"><span class="keyword">double</span> x4 = x3 * x;</span><br><span class="line"><span class="keyword">double</span> x5 = x4 * x;</span><br><span class="line"><span class="keyword">double</span> x6 = x5 * x;</span><br><span class="line"><span class="keyword">int</span> limit = degree - <span class="number">5</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= limit; i += <span class="number">6</span>) &#123;</span><br><span class="line"><span class="keyword">double</span> result1 = a[i] + a[i + <span class="number">1</span>] * x;</span><br><span class="line"><span class="keyword">double</span> result2 = a[i + <span class="number">2</span>] * x2 + a[i + <span class="number">3</span>] * x3;</span><br><span class="line"><span class="keyword">double</span> result3 = a[i + <span class="number">4</span>] * x4 + a[i + <span class="number">5</span>] * x5;</span><br><span class="line">result += (rseult1 + result2 + result3) * xpwr;</span><br><span class="line">xpwr *= x6;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (; i &lt;= degree; i++) &#123;</span><br><span class="line">result += a[i] * xpwr;</span><br><span class="line">xpwr *= x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解释："><a href="#解释：" class="headerlink" title="解释："></a>解释：</h3><p>代码采用的是直接求值的方法，不是Homer法。</p><p>优化的方法有：</p><ol><li>消除循环的低效率，limit=degree-5，不用每次都计算degree-5；</li><li>循环展开，展开六次，每次算六个a；</li><li>三路并行，临时变量存储；</li><li>关键路径决定的CPE是双精度乘法延迟的六分之一，但是因为加载操作每个周期一次，所以CPE还是1.</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;深入理解计算机系统——课程作业5&quot;&gt;&lt;a href=&quot;#深入理解计算机系统——课程作业5&quot; class=&quot;headerlink&quot; title=&quot;深入理解计算机系统——课程作业5&quot;&gt;&lt;/a&gt;深入理解计算机系统——课程作业5&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="CS:APP" scheme="https://sun-ruijiang.github.io/categories/CS-APP/"/>
    
    
    <category term="课程作业" scheme="https://sun-ruijiang.github.io/tags/%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A/"/>
    
  </entry>
  
  <entry>
    <title>深入理解计算机系统——LAB-3_BombLab</title>
    <link href="https://sun-ruijiang.github.io/2021/05/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94LAB-3_BombLab/"/>
    <id>https://sun-ruijiang.github.io/2021/05/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94LAB-3_BombLab/</id>
    <published>2021-05-12T16:00:00.000Z</published>
    <updated>2021-06-01T15:34:57.687Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深入理解计算机系统——LAB-3-Bomb-Lab"><a href="#深入理解计算机系统——LAB-3-Bomb-Lab" class="headerlink" title="深入理解计算机系统——LAB-3_Bomb_Lab"></a>深入理解计算机系统——LAB-3_Bomb_Lab</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>二进制炸弹实验。</strong></p><p>二进制炸弹是一个作为<strong>可执行目标代码文件</strong>提供给学生们的程序。</p><p>运行时，它提示用户<strong>输入6个不同的字符串</strong>。</p><p>如果其中的任何一个不正确，炸弹就会“爆炸”，打印一条错误信息，并且在一个分级服务器记录事件日志。</p><p>学生们必须通过对程序<strong>反汇编和逆向工程</strong>来测定应该是哪6个字符串，从而拆除他们各自炸弹的雷管。</p><p>该实验教会学生<strong>理解汇编语言</strong>，并且强制他们学习怎样<strong>使用调试器</strong>。</p><h2 id="实验环境和使用工具"><a href="#实验环境和使用工具" class="headerlink" title="实验环境和使用工具"></a>实验环境和使用工具</h2><ul><li><p>主机为<code>Windows10</code></p></li><li><p>运行炸弹的虚拟机<code>Ubuntu12.04.5</code></p></li><li><p><code>gdb7.4</code>版本</p></li><li><p><code>objdump2.22</code>版本</p></li><li><p><code>VS code</code>编辑器，下载了<code>x86 and x86_64 Assembly</code>插件，提供汇编代码高亮功能</p></li></ul><h2 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h2><h3 id="准备工作，研究bomb-c源代码"><a href="#准备工作，研究bomb-c源代码" class="headerlink" title="准备工作，研究bomb.c源代码"></a>准备工作，研究<code>bomb.c</code>源代码</h3><p>一共有两个文件：<code>bomb.c</code>和<code>bomb</code>。</p><p><code>bomb.c</code>编译得到<code>bomb</code>文件，所以我先研究一下<code>bomb.c</code>的代码</p><ul><li>代码如下（随便看看）：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***************************************************************************</span></span><br><span class="line"><span class="comment"> * Dr. Evil&#x27;s Insidious Bomb, Version 1.1</span></span><br><span class="line"><span class="comment"> * Copyright 2011, Dr. Evil Incorporated. All rights reserved.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * LICENSE:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Dr. Evil Incorporated (the PERPETRATOR) hereby grants you (the</span></span><br><span class="line"><span class="comment"> * VICTIM) explicit permission to use this bomb (the BOMB).  This is a</span></span><br><span class="line"><span class="comment"> * time limited license, which expires on the death of the VICTIM.</span></span><br><span class="line"><span class="comment"> * The PERPETRATOR takes no responsibility for damage, frustration,</span></span><br><span class="line"><span class="comment"> * insanity, bug-eyes, carpal-tunnel syndrome, loss of sleep, or other</span></span><br><span class="line"><span class="comment"> * harm to the VICTIM.  Unless the PERPETRATOR wants to take credit,</span></span><br><span class="line"><span class="comment"> * that is.  The VICTIM may not distribute this bomb source code to</span></span><br><span class="line"><span class="comment"> * any enemies of the PERPETRATOR.  No VICTIM may debug,</span></span><br><span class="line"><span class="comment"> * reverse-engineer, run &quot;strings&quot; on, decompile, decrypt, or use any</span></span><br><span class="line"><span class="comment"> * other technique to gain knowledge of and defuse the BOMB.  BOMB</span></span><br><span class="line"><span class="comment"> * proof clothing may not be worn when handling this program.  The</span></span><br><span class="line"><span class="comment"> * PERPETRATOR will not apologize for the PERPETRATOR&#x27;s poor sense of</span></span><br><span class="line"><span class="comment"> * humor.  This license is null and void where the BOMB is prohibited</span></span><br><span class="line"><span class="comment"> * by law.</span></span><br><span class="line"><span class="comment"> ***************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;support.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;phases.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * Note to self: Remember to erase this file so my victims will have no</span></span><br><span class="line"><span class="comment"> * idea what is going on, and so they will all blow up in a</span></span><br><span class="line"><span class="comment"> * spectaculary fiendish explosion. -- Dr. Evil </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">FILE *infile;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *input;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Note to self: remember to port this bomb to Windows and put a </span></span><br><span class="line"><span class="comment">     * fantastic GUI on it. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* When run with no arguments, the bomb reads its input lines </span></span><br><span class="line"><span class="comment">     * from standard input. */</span></span><br><span class="line">    <span class="keyword">if</span> (argc == <span class="number">1</span>) &#123;  </span><br><span class="line">infile = <span class="built_in">stdin</span>;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="comment">/* When run with one argument &lt;file&gt;, the bomb reads from &lt;file&gt; </span></span><br><span class="line"><span class="comment">     * until EOF, and then switches to standard input. Thus, as you </span></span><br><span class="line"><span class="comment">     * defuse each phase, you can add its defusing string to &lt;file&gt; and</span></span><br><span class="line"><span class="comment">     * avoid having to retype it. */</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (argc == <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (!(infile = fopen(argv[<span class="number">1</span>], <span class="string">&quot;r&quot;</span>))) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s: Error: Couldn&#x27;t open %s\n&quot;</span>, argv[<span class="number">0</span>], argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">8</span>);</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* You can&#x27;t call the bomb with more than 1 command line argument. */</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Usage: %s [&lt;input_file&gt;]\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">8</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Do all sorts of secret stuff that makes the bomb harder to defuse. */</span></span><br><span class="line">    initialize_bomb();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Welcome to my fiendish little bomb. You have 6 phases with\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;which to blow yourself up. Have a nice day!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Hmm...  Six phases must be more secure than one phase! */</span></span><br><span class="line">    input = read_line();             <span class="comment">/* Get input                   */</span></span><br><span class="line">    phase_1(input);                  <span class="comment">/* Run the phase               */</span></span><br><span class="line">    phase_defused();                 <span class="comment">/* Drat!  They figured it out!</span></span><br><span class="line"><span class="comment">      * Let me know how they did it. */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Phase 1 defused. How about the next one?\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* The second phase is harder.  No one will ever figure out</span></span><br><span class="line"><span class="comment">     * how to defuse this... */</span></span><br><span class="line">    input = read_line();</span><br><span class="line">    phase_2(input);</span><br><span class="line">    phase_defused();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;That&#x27;s number 2.  Keep going!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* I guess this is too easy so far.  Some more complex code will</span></span><br><span class="line"><span class="comment">     * confuse people. */</span></span><br><span class="line">    input = read_line();</span><br><span class="line">    phase_3(input);</span><br><span class="line">    phase_defused();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Halfway there!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Oh yeah?  Well, how good is your math?  Try on this saucy problem! */</span></span><br><span class="line">    input = read_line();</span><br><span class="line">    phase_4(input);</span><br><span class="line">    phase_defused();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;So you got that one.  Try this one.\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* Round and &#x27;round in memory we go, where we stop, the bomb blows! */</span></span><br><span class="line">    input = read_line();</span><br><span class="line">    phase_5(input);</span><br><span class="line">    phase_defused();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Good work!  On to the next...\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* This phase will never be used, since no one will get past the</span></span><br><span class="line"><span class="comment">     * earlier ones.  But just in case, make this one extra hard. */</span></span><br><span class="line">    input = read_line();</span><br><span class="line">    phase_6(input);</span><br><span class="line">    phase_defused();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Wow, they got it!  But isn&#x27;t something... missing?  Perhaps</span></span><br><span class="line"><span class="comment">     * something they overlooked?  Mua ha ha ha ha! */</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>首先，我们看到一个有趣的<code>license</code>，（Google翻译）意思是</p><blockquote><p>Evil Incorporated博士（PERPETRATOR）特此授予您（VICTIM）使用该炸弹（BOMB）的明确许可。 </p><p>这是一个有时间限制的许可证，在VICTIM死亡时到期。 </p><p>PERPETRATOR对损坏，挫败，精神错乱，虫眼，腕隧道综合症，睡眠不足或对VICTIM造成的其他伤害不承担任何责任。 除非PERPETRATOR想要获得信誉，否则就是这样。</p><p> VICTIM不得将此炸弹源代码分发给PERPETRATOR的任何敌人。                     <strong>//重点，问问别人</strong></p><p> VICTIM不得调试，反向工程，在其上运行“字符串”，反编译，解密或使用任何其他技术来了解和拆除BOMB。 处理此程序时，不能穿防弹衣。                                                                                                <strong>//重点，使用上述所提到的技术拆除炸弹，穿防弹衣</strong></p><p>PERPETRATOR不会因PERPETRATOR糟糕的幽默感而道歉。                            <strong>//哈哈（强颜欢笑）</strong></p><p> 在法律禁止BOMB的情况下，此许可无效。                                                                </p></blockquote></li><li><p>,四个头文件，波浪线的两个我们没有，很好，过！<br><img src="/2021/05/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94LAB-3_BombLab/image-20210428143806306.png" alt="image-20210428143806306"></p></li><li><p>注释意思是</p><blockquote><p>提醒自己：记得把这个文件删掉，这样我的受害者就不会知道发生了什么事，这样他们就会在一场可怕的恐怖爆炸中全部引爆。——邪恶博士                                                                                                           <strong>//重点，看这个文件，我们就知道炸弹怎么做的了</strong></p></blockquote></li><li><p><code>FILE *infile；</code>全局变量，文件指针</p></li><li><p><code>int main(int argc, char *argv[])</code>主函数，参数<code>argc</code>是提供给主函数的参数个数，参数<code>argv[]</code>是参数的字符串数组的指针。</p><blockquote><p>举例：./bomb answer.txt   此时，argc=2，argv[0]=”./bomb”，argv[1]=”answer.txt”</p></blockquote></li><li><p><code>char *input;</code>输入字符串的地址</p></li><li><p>注释环节</p><blockquote><p>提醒自己：记得将炸弹移植到Windows并在上面放上精美的GUI。                     //老师拿来考试的</p></blockquote></li><li><p>后面的太多了，又看注释又看代码太累，我直接写意思，用法：</p><ol><li><code>./bomb</code>，然后自己一个一个输入</li><li><code>./bomb xxx.txt</code>，不用输入，直接看炸没炸</li></ol><p>显然我们选第二种，一个一个答案存起来。</p></li><li><p><code>initialize_bomb();</code>做炸弹函数，我们显然没有这个函数所需要的头文件。</p></li><li><p>输出文件开始执行的提示信息</p></li><li><p>接下来是6个<code>phase</code>，<code>phase</code>流程：</p><ul><li><code>input=read_line();</code>没有函数所需的头文件，功能就是输入字符串或者数字，也就是<code>phase</code>的答案</li><li><code>phase_x(input);</code>将输入作为参数运行第x个<code>phase</code>函数</li><li><code>phase_defused();</code>看答案是否匹配。</li><li>输出成功的提示信息</li></ul></li><li><p>至此，<code>bomb.c</code>已经看完了，我们已经知道炸弹是怎么做的了！</p></li><li><p>接下来，我们需要反汇编<code>bomb</code>文件，看看这些<code>phase</code>函数都是干什么的！</p></li></ul><h3 id="反汇编bomb文件"><a href="#反汇编bomb文件" class="headerlink" title="反汇编bomb文件"></a>反汇编<code>bomb</code>文件</h3><ul><li>在<code>Ubuntu</code>虚拟机中，实验文件夹下，我们执行命令</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objdump -d bomb &gt; bomb.asm</span><br></pre></td></tr></table></figure><ul><li>然后将<code>bomb.asm</code>移动到本机，用<code>vscode</code>打开，有1716行汇编代码<br><img src="/2021/05/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94LAB-3_BombLab/image-20210428154937224.png" alt="image-20210428154937224">、</li><li>用<code>objdump</code>反汇编得到的文件，方便我们全局查找，<code>gdb</code>用来调试</li></ul><h3 id="分析汇编代码"><a href="#分析汇编代码" class="headerlink" title="分析汇编代码"></a>分析汇编代码</h3><p>我们将代码拆成一个函数一个函数进行分析。</p><ul><li><p>在文件夹下输入命令行使用gdb反汇编函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gdb bomb</span><br><span class="line">gdb&gt; disassemble &lt;函数名&gt;           </span><br></pre></td></tr></table></figure></li></ul><h4 id="read-line："><a href="#read-line：" class="headerlink" title="read_line："></a><code>read_line</code>：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">Dump of assembler code for function read_line:</span><br><span class="line">   0x0804911d &lt;+0&gt;:sub    $0x2c,%esp                     &#x2F;&#x2F;栈帧预留0x2c字节的空间</span><br><span class="line">   0x08049120 &lt;+3&gt;:mov    %ebx,0x20(%esp)                &#x2F;&#x2F;M(0x20+esp)&#x3D;ebx</span><br><span class="line">   0x08049124 &lt;+7&gt;:mov    %esi,0x24(%esp)                &#x2F;&#x2F;M(0x24+esp)&#x3D;esi</span><br><span class="line">   0x08049128 &lt;+11&gt;:mov    %edi,0x28(%esp)            &#x2F;&#x2F;M(0x28+esp)&#x3D;edi</span><br><span class="line">   0x0804912c &lt;+15&gt;:call   0x80490b0 &lt;skip&gt;           &#x2F;&#x2F;调用skip()</span><br><span class="line">   0x08049131 &lt;+20&gt;:test   %eax,%eax                  &#x2F;&#x2F;eax &amp; eax</span><br><span class="line">   0x08049133 &lt;+22&gt;:jne    0x80491a1 &lt;read_line+132&gt;  &#x2F;&#x2F;if zf&#x3D;0, jump 0x80491a1 &lt;read_line+132&gt;</span><br><span class="line">   0x08049135 &lt;+24&gt;:mov    0x804c3a4,%eax             &#x2F;&#x2F;eax&#x3D;M(0x804c3a4)</span><br><span class="line">   &#x2F;&#x2F;0x804c3a4 &lt;stdin@@GLIBC_2.0&gt;: &quot;&quot;</span><br><span class="line">   0x0804913a &lt;+29&gt;:cmp    %eax,0x804c3d0             &#x2F;&#x2F;compare M(0x804c3d0) with eax</span><br><span class="line">   &#x2F;&#x2F;0x804c3d0 &lt;infile&gt;: &quot;&quot;</span><br><span class="line">   0x08049140 &lt;+35&gt;:jne    0x804915a &lt;read_line+61&gt;   &#x2F;&#x2F;if zf&#x3D;0, jump 0x804915a &lt;read_line+61&gt;</span><br><span class="line">   0x08049142 &lt;+37&gt;:movl   $0x804a383,(%esp)          &#x2F;&#x2F;M(esp)&#x3D;0x804a383</span><br><span class="line">   &#x2F;&#x2F;0x804a383: &quot;Error: Premature EOF on stdin&quot;</span><br><span class="line">   0x08049149 &lt;+44&gt;:call   0x8048800 &lt;puts@plt&gt;       &#x2F;&#x2F;puts(0x804a383)</span><br><span class="line">   0x0804914e &lt;+49&gt;:movl   $0x8,(%esp)                &#x2F;&#x2F;M(esp)&#x3D;0x8</span><br><span class="line">   0x08049155 &lt;+56&gt;:call   0x8048840 &lt;exit@plt&gt;       &#x2F;&#x2F;exit(0x8)</span><br><span class="line">   0x0804915a &lt;+61&gt;:movl   $0x804a3a1,(%esp)          &#x2F;&#x2F;M(esp)&#x3D;0x804a3a1</span><br><span class="line">   &#x2F;&#x2F;0x804a3a1: &quot;GRADE_BOMB&quot;</span><br><span class="line">   0x08049161 &lt;+68&gt;:call   0x80487f0 &lt;getenv@plt&gt;     &#x2F;&#x2F;getenv@plt(0x804a3a1)</span><br><span class="line">   0x08049166 &lt;+73&gt;:test   %eax,%eax                  &#x2F;&#x2F;eax&amp;eax</span><br><span class="line">   0x08049168 &lt;+75&gt;:je     0x8049176 &lt;read_line+89&gt;   &#x2F;&#x2F;if zf&#x3D;1, jump 0x8049176 &lt;read_line+89&gt;</span><br><span class="line">   0x0804916a &lt;+77&gt;:movl   $0x0,(%esp)                &#x2F;&#x2F;M(esp)&#x3D;0x0</span><br><span class="line">   0x08049171 &lt;+84&gt;:call   0x8048840 &lt;exit@plt&gt;       &#x2F;&#x2F;exit(0x0)</span><br><span class="line">   0x08049176 &lt;+89&gt;:mov    0x804c3a4,%eax             &#x2F;&#x2F;eax&#x3D;M(0x804c3a4)</span><br><span class="line">   &#x2F;&#x2F;0x804c3a4 &lt;stdin@@GLIBC_2.0&gt;: &quot;&quot;</span><br><span class="line">   0x0804917b &lt;+94&gt;:mov    %eax,0x804c3d0             &#x2F;&#x2F;M(0x804c3d0)&#x3D;eax</span><br><span class="line">   &#x2F;&#x2F;0x804c3d0 &lt;infile&gt;: &quot;&quot;</span><br><span class="line">   0x08049180 &lt;+99&gt;:call   0x80490b0 &lt;skip&gt;           &#x2F;&#x2F;调用skip()</span><br><span class="line">   0x08049185 &lt;+104&gt;:test   %eax,%eax                  &#x2F;&#x2F;eax &amp; eax</span><br><span class="line">   0x08049187 &lt;+106&gt;:jne    0x80491a1 &lt;read_line+132&gt;  &#x2F;&#x2F;if zf&#x3D;0, jump 0x80491a1 &lt;read_line+132&gt;</span><br><span class="line">   0x08049189 &lt;+108&gt;:movl   $0x804a383,(%esp)          &#x2F;&#x2F;M(esp)&#x3D;0x804a383</span><br><span class="line">   &#x2F;&#x2F;0x804a383: &quot;Error: Premature EOF on stdin&quot;</span><br><span class="line">   0x08049190 &lt;+115&gt;:call   0x8048800 &lt;puts@plt&gt;       &#x2F;&#x2F;puts(0x804a383)</span><br><span class="line">   0x08049195 &lt;+120&gt;:movl   $0x0,(%esp)                &#x2F;&#x2F;M(esp)&#x3D;0x0</span><br><span class="line">   0x0804919c &lt;+127&gt;:call   0x8048840 &lt;exit@plt&gt;       &#x2F;&#x2F;exit(0x0)</span><br><span class="line">   0x080491a1 &lt;+132&gt;:mov    0x804c3cc,%edx             &#x2F;&#x2F;edx&#x3D;M(0x804c3cc)</span><br><span class="line">   &#x2F;&#x2F;0x804c3cc &lt;num_input_strings&gt;:0x00   记录关卡数</span><br><span class="line">   0x080491a7 &lt;+138&gt;:lea    (%edx,%edx,4),%ebx         &#x2F;&#x2F;ebx&#x3D;edx+edx*4&#x3D;5*edx</span><br><span class="line">   0x080491aa &lt;+141&gt;:shl    $0x4,%ebx                  &#x2F;&#x2F;ebx&lt;&lt;4</span><br><span class="line">   0x080491ad &lt;+144&gt;:add    $0x804c3e0,%ebx            &#x2F;&#x2F;ebx&#x3D;ebx+0x804c3e0</span><br><span class="line">   0x080491b3 &lt;+150&gt;:mov    %ebx,%edi                  &#x2F;&#x2F;edi&#x3D;ebx</span><br><span class="line">   0x080491b5 &lt;+152&gt;:mov    $0x0,%eax                  &#x2F;&#x2F;eax&#x3D;0x0</span><br><span class="line">   0x080491ba &lt;+157&gt;:mov    $0xffffffff,%ecx           &#x2F;&#x2F;ecx&#x3D;-1</span><br><span class="line">   0x080491bf &lt;+162&gt;:repnz scas %es:(%edi),%al         &#x2F;&#x2F;?</span><br><span class="line">   0x080491c1 &lt;+164&gt;:not    %ecx                       &#x2F;&#x2F;ecx&#x3D;-ecx</span><br><span class="line">   0x080491c3 &lt;+166&gt;:sub    $0x1,%ecx                  &#x2F;&#x2F;ecx&#x3D;ecx-1</span><br><span class="line">   0x080491c6 &lt;+169&gt;:cmp    $0x4e,%ecx                 &#x2F;&#x2F;compare ecx with 0x4e</span><br><span class="line">   0x080491c9 &lt;+172&gt;:jle    0x8049202 &lt;read_line+229&gt;  &#x2F;&#x2F;if ecx&lt;&#x3D;0x4e, jump 0x8049202 &lt;read_line+229&gt;</span><br><span class="line">   0x080491cb &lt;+174&gt;:movl   $0x804a3ac,(%esp)          &#x2F;&#x2F;M(esp)&#x3D;0x804a3ac</span><br><span class="line">   &#x2F;&#x2F;0x804a3ac: &quot;Error: Input line too long&quot;</span><br><span class="line">   0x080491d2 &lt;+181&gt;:call   0x8048800 &lt;puts@plt&gt;       &#x2F;&#x2F;puts(0x804a3ac)</span><br><span class="line">   0x080491d7 &lt;+186&gt;:mov    0x804c3cc,%eax             &#x2F;&#x2F;eax&#x3D;M(0x804c3cc)</span><br><span class="line">   &#x2F;&#x2F;0x804c3cc &lt;num_input_strings&gt;:0x00   记录关卡数</span><br><span class="line">   0x080491dc &lt;+191&gt;:lea    0x1(%eax),%edx             &#x2F;&#x2F;edx&#x3D;0x1+eax         </span><br><span class="line">   0x080491df &lt;+194&gt;:mov    %edx,0x804c3cc             &#x2F;&#x2F;M(0x804c3cc)&#x3D;edx</span><br><span class="line">   0x080491e5 &lt;+200&gt;:imul   $0x50,%eax,%eax            &#x2F;&#x2F;eax&#x3D;eax*0x50</span><br><span class="line">   0x080491e8 &lt;+203&gt;:add    $0x804c3e0,%eax            &#x2F;&#x2F;eax&#x3D;eax+0x804c3e0</span><br><span class="line">   0x080491ed &lt;+208&gt;:mov    $0x804a3c7,%edx            &#x2F;&#x2F;edx&#x3D;0x804a3c7</span><br><span class="line">   &#x2F;&#x2F;0x804a3c7: &quot;***truncated***&quot;</span><br><span class="line">   0x080491f2 &lt;+213&gt;:mov    $0x4,%ecx                  &#x2F;&#x2F;ecx&#x3D;0x4   </span><br><span class="line">   0x080491f7 &lt;+218&gt;:mov    %eax,%edi                  &#x2F;&#x2F;edi&#x3D;eax</span><br><span class="line">   0x080491f9 &lt;+220&gt;:mov    %edx,%esi                  &#x2F;&#x2F;esi&#x3D;edx</span><br><span class="line">   0x080491fb &lt;+222&gt;:rep movsl %ds:(%esi),%es:(%edi)   &#x2F;&#x2F;?</span><br><span class="line">   0x080491fd &lt;+224&gt;:call   0x80490f6 &lt;explode_bomb&gt;   &#x2F;&#x2F;explode_bomb()</span><br><span class="line">   0x08049202 &lt;+229&gt;:lea    (%edx,%edx,4),%eax         &#x2F;&#x2F;eax&#x3D;5*edx</span><br><span class="line">   0x08049205 &lt;+232&gt;:shl    $0x4,%eax                  &#x2F;&#x2F;eax&#x3D;eax&lt;&lt;4</span><br><span class="line">   0x08049208 &lt;+235&gt;:movb   $0x0,0x804c3df(%ecx,%eax,1) &#x2F;&#x2F;M(0x804c3df+ecx+eax)&#x3D;0x0</span><br><span class="line">   0x08049210 &lt;+243&gt;:add    $0x1,%edx                  &#x2F;&#x2F;edx&#x3D;edx+1</span><br><span class="line">   0x08049213 &lt;+246&gt;:mov    %edx,0x804c3cc             &#x2F;&#x2F;M(0x804c3cc)&#x3D;edx</span><br><span class="line">   0x08049219 &lt;+252&gt;:mov    %ebx,%eax                  &#x2F;&#x2F;eax&#x3D;ebx</span><br><span class="line">   0x0804921b &lt;+254&gt;:mov    0x20(%esp),%ebx            &#x2F;&#x2F;ebx&#x3D;M(0x20+esp)</span><br><span class="line">   0x0804921f &lt;+258&gt;:mov    0x24(%esp),%esi            &#x2F;&#x2F;esi&#x3D;M(0x24+esp)</span><br><span class="line">   0x08049223 &lt;+262&gt;:mov    0x28(%esp),%edi            &#x2F;&#x2F;edi&#x3D;M(0x28+esp)</span><br><span class="line">   0x08049227 &lt;+266&gt;:add    $0x2c,%esp                 &#x2F;&#x2F;栈帧释放空间</span><br><span class="line">   0x0804922a &lt;+269&gt;:ret                               &#x2F;&#x2F;返回地址出栈，并跳转到返回地址</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><ul><li>主函数中多次调用的函数，我们可以得知<ul><li><code>0x804c3cc</code>地址存的是关卡数</li><li>返回值是字符串地址，并且赋给了<code>input</code></li><li><code>0x804c4d0</code>存的是第四关的字符串</li></ul></li></ul><h4 id="phase-1："><a href="#phase-1：" class="headerlink" title="phase_1："></a><code>phase_1</code>：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Dump of assembler code for function phase_1:          &#x2F;&#x2F;函数phase_1(inpput)</span><br><span class="line">   0x08048b50 &lt;+0&gt;:    sub    $0x1c,%esp            &#x2F;&#x2F;在栈中预留0x1c字节的空间                      </span><br><span class="line">   0x08048b53 &lt;+3&gt;:     movl   $0x804a1c4,0x4(%esp)  &#x2F;&#x2F;M(0x4+esp)&#x3D;0x804a1c4</span><br><span class="line">   0x08048b5b &lt;+11&gt;:mov    0x20(%esp),%eax       &#x2F;&#x2F;eax&#x3D;M(0x20+esp)&#x3D;input</span><br><span class="line">   0x08048b5f &lt;+15&gt;:mov    %eax,(%esp)           &#x2F;&#x2F;M(esp)&#x3D;eax&#x3D;input</span><br><span class="line">   0x08048b62 &lt;+18&gt;:call   0x8048fe4 &lt;strings_not_equal&gt; &#x2F;&#x2F;调用strings_not_equal(input,0x804a1c4)函数</span><br><span class="line">   0x08048b67 &lt;+23&gt;:test   %eax,%eax             &#x2F;&#x2F;eax保存函数返回值,执行eax&amp;eax</span><br><span class="line">   0x08048b69 &lt;+25&gt;:je     0x8048b70 &lt;phase_1+32&gt; &#x2F;&#x2F;if zf&#x3D;1, jump 0x8048b70 &lt;phase_1+32&gt;</span><br><span class="line">   0x08048b6b &lt;+27&gt;:call   0x80490f6 &lt;explode_bomb&gt; &#x2F;&#x2F;调用 explode_bomb函数</span><br><span class="line">   0x08048b70 &lt;+32&gt;:add    $0x1c,%esp             &#x2F;&#x2F;释放空间</span><br><span class="line">   0x08048b73 &lt;+35&gt;:ret                           &#x2F;&#x2F;返回地址出栈，并跳转到返回地址              </span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><ul><li><p>为了搞清楚这个过程，我们需要进行<code>gdb</code>调试，下面是一些<code>gdb</code>命令（列出来的我都用了）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gdb&gt; break *&lt;&lt;函数名&gt;+&lt;偏移值&gt;&gt;                             &#x2F;&#x2F;设置断点</span><br><span class="line">gdb&gt; run                                                  &#x2F;&#x2F;运行</span><br><span class="line">gdb&gt; step                                                 &#x2F;&#x2F;下一步</span><br><span class="line">gdb&gt; info registers &lt;寄存器&gt;                               &#x2F;&#x2F;列出寄存器的值，寄存器可选</span><br><span class="line">gdb&gt; set var &lt;寄存器或者变量&gt;&#x3D;&lt;0x111&gt;                        &#x2F;&#x2F;改变寄存器的值</span><br><span class="line">gdb&gt; set *&lt;内存地址&gt;&#x3D;&lt;0x11&gt;                                 &#x2F;&#x2F;改变内存的值</span><br><span class="line">gdb&gt; x&#x2F;nfu &lt;内存地址&gt;                  &#x2F;&#x2F;查看内存地址的值，examine简写为x，n长度，f显示格式，u一个地址单元的长度</span><br></pre></td></tr></table></figure></li><li><p>所以<code>phase_1</code>的过程就是：将<code>input</code>与<code>0x804a1c4</code>的字符串比较，如果想</p></li><li><p>执行命令，查看<code>0x804a1c4</code>地址的字符串<br><img src="/2021/05/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94LAB-3_BombLab/image-20210428220435495.png" alt="image-20210428220435495"></p></li><li><p>运行，输入与<code>0x804a1c4</code>地址的字符串相等的<code>input</code>字符串，提示炸弹已经被拆，下一关！<br><img src="/2021/05/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94LAB-3_BombLab/image-20210428220713564.png" alt="image-20210428220713564"></p></li></ul><h4 id="phase-2："><a href="#phase-2：" class="headerlink" title="phase_2："></a><code>phase_2</code>：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Dump of assembler code for function phase_2:      &#x2F;&#x2F;函数phase_2(input)</span><br><span class="line">   0x08048b74 &lt;+0&gt;:push   %esi                   &#x2F;&#x2F;将程序的入口地址压入栈中</span><br><span class="line">   0x08048b75 &lt;+1&gt;:push   %ebx                   &#x2F;&#x2F;将被调用者保存寄存器中的值压入栈中，以便在返回前可以恢复它们</span><br><span class="line">   0x08048b76 &lt;+2&gt;:sub    $0x34,%esp             &#x2F;&#x2F;栈帧预留0x34字节空间</span><br><span class="line">   0x08048b79 &lt;+5&gt;:lea    0x18(%esp),%eax        &#x2F;&#x2F;eax&#x3D;0x18+esp&#x3D;a[]</span><br><span class="line">   0x08048b7d &lt;+9&gt;:mov    %eax,0x4(%esp)         &#x2F;&#x2F;M(0x4+esp)&#x3D;eax&#x3D;0x18+esp&#x3D;a[]</span><br><span class="line">   0x08048b81 &lt;+13&gt;:mov    0x40(%esp),%eax    &#x2F;&#x2F;eax&#x3D;M(0x40+esp)&#x3D;input</span><br><span class="line">   0x08048b85 &lt;+17&gt;:mov    %eax,(%esp)        &#x2F;&#x2F;M(esp)&#x3D;eax&#x3D;input</span><br><span class="line">   0x08048b88 &lt;+20&gt;:call   0x804922b &lt;read_six_numbers&gt;    &#x2F;&#x2F;调用read_six_numbers(input,a[]&#x3D;0x18+esp)</span><br><span class="line">   0x08048b8d &lt;+25&gt;:cmpl   $0x1,0x18(%esp)    &#x2F;&#x2F;compare M(0x18+esp) with 0x1</span><br><span class="line">   0x08048b92 &lt;+30&gt;:je     0x8048b99 &lt;phase_2+37&gt; &#x2F;&#x2F;if zf&#x3D;1, jump 0x8048b99 &lt;phase_2+37&gt;</span><br><span class="line">   0x08048b94 &lt;+32&gt;:call   0x80490f6 &lt;explode_bomb&gt; &#x2F;&#x2F;调用explode_bomb()</span><br><span class="line">   0x08048b99 &lt;+37&gt;:lea    0x1c(%esp),%ebx    &#x2F;&#x2F;ebx&#x3D;0x1c+esp&#x3D;&amp;a[1]</span><br><span class="line">   0x08048b9d &lt;+41&gt;:lea    0x30(%esp),%esi    &#x2F;&#x2F;esi&#x3D;0x30+esp&#x3D;&amp;a[5]</span><br><span class="line">   0x08048ba1 &lt;+45&gt;:mov    -0x4(%ebx),%eax    &#x2F;&#x2F;eax&#x3D;M(-0x4+ebx)</span><br><span class="line">   0x08048ba4 &lt;+48&gt;:add    %eax,%eax          &#x2F;&#x2F;eax&#x3D;eax+eax&#x3D;2*M(-0x4+ebx)</span><br><span class="line">   0x08048ba6 &lt;+50&gt;:cmp    %eax,(%ebx)        &#x2F;&#x2F;compare M(ebx) with eax&#x3D;2*M(-0x4+ebx)</span><br><span class="line">   0x08048ba8 &lt;+52&gt;:je     0x8048baf &lt;phase_2+59&gt; &#x2F;&#x2F;if zf&#x3D;1, jump 0x8048baf &lt;phase_2+59&gt;</span><br><span class="line">   0x08048baa &lt;+54&gt;:call   0x80490f6 &lt;explode_bomb&gt; &#x2F;&#x2F;调用&lt;explode_bomb&gt;函数</span><br><span class="line">   0x08048baf &lt;+59&gt;:add    $0x4,%ebx          &#x2F;&#x2F;ebx&#x3D;ebx+4</span><br><span class="line">   0x08048bb2 &lt;+62&gt;:cmp    %esi,%ebx          &#x2F;&#x2F;compare ebx with esi&#x3D;0x30+esp&#x3D;&amp;a[5]</span><br><span class="line">   0x08048bb4 &lt;+64&gt;:jne    0x8048ba1 &lt;phase_2+45&gt; &#x2F;&#x2F;if zf&#x3D;0, jump 0x8048ba1 &lt;phase_2+45&gt;</span><br><span class="line">   0x08048bb6 &lt;+66&gt;:add    $0x34,%esp         &#x2F;&#x2F;释放栈帧空间</span><br><span class="line">   0x08048bb9 &lt;+69&gt;:pop    %ebx               &#x2F;&#x2F;恢复ebx原先的数据</span><br><span class="line">   0x08048bba &lt;+70&gt;:pop    %esi               &#x2F;&#x2F;弹出程序的入口地址</span><br><span class="line">   0x08048bbb &lt;+71&gt;:ret                       &#x2F;&#x2F;返回地址出栈，并跳转到返回地址</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><ul><li>分析可得<code>phase_2</code>的过程是：输入6个数并将其地址保存在栈中，第一个数<code>a[0]</code>要等于1，否则爆炸；从第二个数<code>a[1]</code>开始，每个数都必须等于它前一个数的2倍，否则爆炸。</li><li>所以我们得到的六个数字是：<code>1 2 4 8 16 32 64</code>，测试，成功！<br><img src="/2021/05/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94LAB-3_BombLab/image-20210430085749377.png" alt="image-20210430085749377"></li></ul><h4 id="phase-3："><a href="#phase-3：" class="headerlink" title="phase_3："></a><code>phase_3</code>：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">Dump of assembler code for function phase_3:         &#x2F;&#x2F;函数phase_3(input)</span><br><span class="line">   0x08048bbc &lt;+0&gt;:    sub    $0x2c,%esp            &#x2F;&#x2F;栈帧预留0x2c字节的空间</span><br><span class="line">   0x08048bbf &lt;+3&gt;:    lea    0x1c(%esp),%eax       &#x2F;&#x2F;eax&#x3D;0x1c+esp</span><br><span class="line">   0x08048bc3 &lt;+7&gt;:    mov    %eax,0xc(%esp)        &#x2F;&#x2F;M(0xc+esp)&#x3D;eax</span><br><span class="line">   0x08048bc7 &lt;+11&gt;:lea    0x18(%esp),%eax       &#x2F;&#x2F;eax&#x3D;0x18+esp</span><br><span class="line">   0x08048bcb &lt;+15&gt;:mov    %eax,0x8(%esp)        &#x2F;&#x2F;M(0x8+esp)&#x3D;eax</span><br><span class="line">   0x08048bcf &lt;+19&gt;:movl   $0x804a3e3,0x4(%esp)  &#x2F;&#x2F;M(0x4+esp)&#x3D;0x804a3e3</span><br><span class="line">   0x08048bd7 &lt;+27&gt;:mov    0x30(%esp),%eax       &#x2F;&#x2F;eax&#x3D;M(0x30+esp)&#x3D;input</span><br><span class="line">   0x08048bdb &lt;+31&gt;:mov    %eax,(%esp)           &#x2F;&#x2F;M(esp)&#x3D;M(0x30+esp)&#x3D;input</span><br><span class="line">   0x08048bde &lt;+34&gt;:call   0x8048870 &lt;__isoc99_sscanf@plt&gt;  &#x2F;&#x2F;调用__isoc99_sscanf@plt(input,0x804a3e3,0x18+esp，0x1c+esp)</span><br><span class="line">   0x08048be3 &lt;+39&gt;:cmp    $0x1,%eax             &#x2F;&#x2F;compare eax with 0x1,eax返回值是参数个数</span><br><span class="line">   0x08048be6 &lt;+42&gt;:jg     0x8048bed &lt;phase_3+49&gt;  &#x2F;&#x2F;if eax&gt;0x1, jump 0x8048bed &lt;phase_3+49&gt;</span><br><span class="line">   0x08048be8 &lt;+44&gt;:call   0x80490f6 &lt;explode_bomb&gt;  &#x2F;&#x2F;调用explode_bomb()</span><br><span class="line">   0x08048bed &lt;+49&gt;:cmpl   $0x7,0x18(%esp)        &#x2F;&#x2F;compare M(0x18+esp) with 0x7</span><br><span class="line">   0x08048bf2 &lt;+54&gt;:ja     0x8048c30 &lt;phase_3+116&gt; &#x2F;&#x2F;if M(0x18+esp)&gt;0x7, jump 0x8048c30&lt;phase_3+116&gt;</span><br><span class="line">   0x08048bf4 &lt;+56&gt;:mov    0x18(%esp),%eax       &#x2F;&#x2F;eax&#x3D;M(0x18+esp)</span><br><span class="line">   0x08048bf8 &lt;+60&gt;:jmp    *0x804a220(,%eax,4)   &#x2F;&#x2F;jump M(0x804a220+4*eax)</span><br><span class="line">   0x08048bff &lt;+67&gt;:mov    $0x32d,%eax           &#x2F;&#x2F;eax&#x3D;0x32d</span><br><span class="line">   0x08048c04 &lt;+72&gt;:jmp    0x8048c41 &lt;phase_3+133&gt;  &#x2F;&#x2F;jump 0x8048c41 &lt;phase_3+133&gt;</span><br><span class="line">   0x08048c06 &lt;+74&gt;:mov    $0x36c,%eax           &#x2F;&#x2F;eax&#x3D;0x36c</span><br><span class="line">   0x08048c0b &lt;+79&gt;:jmp    0x8048c41 &lt;phase_3+133&gt;  &#x2F;&#x2F;jump 0x8048c41 &lt;phase_3+133&gt;</span><br><span class="line">   0x08048c0d &lt;+81&gt;:mov    $0x3db,%eax           &#x2F;&#x2F;eax&#x3D;0x3db</span><br><span class="line">   0x08048c12 &lt;+86&gt;:jmp    0x8048c41 &lt;phase_3+133&gt;  &#x2F;&#x2F;jump 0x8048c41 &lt;phase_3+133&gt;</span><br><span class="line">   0x08048c14 &lt;+88&gt;:mov    $0x16d,%eax           &#x2F;&#x2F;eax&#x3D;0x16d</span><br><span class="line">   0x08048c19 &lt;+93&gt;:jmp    0x8048c41 &lt;phase_3+133&gt;  &#x2F;&#x2F;jump 0x8048c41 &lt;phase_3+133&gt;</span><br><span class="line">   0x08048c1b &lt;+95&gt;:mov    $0x3d1,%eax            &#x2F;&#x2F;eax&#x3D;0x3d1</span><br><span class="line">   0x08048c20 &lt;+100&gt;:jmp    0x8048c41 &lt;phase_3+133&gt;  &#x2F;&#x2F;jump 0x8048c41 &lt;phase_3+133&gt;</span><br><span class="line">   0x08048c22 &lt;+102&gt;:mov    $0x3cb,%eax            &#x2F;&#x2F;eax&#x3D;0x3cb</span><br><span class="line">   0x08048c27 &lt;+107&gt;:jmp    0x8048c41 &lt;phase_3+133&gt;  &#x2F;&#x2F;jump 0x8048c41 &lt;phase_3+133&gt;</span><br><span class="line">   0x08048c29 &lt;+109&gt;:mov    $0x21c,%eax            &#x2F;&#x2F;eax&#x3D;0x21c</span><br><span class="line">   0x08048c2e &lt;+114&gt;:jmp    0x8048c41 &lt;phase_3+133&gt;  &#x2F;&#x2F;jump 0x8048c41 &lt;phase_3+133&gt;</span><br><span class="line">   0x08048c30 &lt;+116&gt;:call   0x80490f6 &lt;explode_bomb&gt; &#x2F;&#x2F;调用explode_bomb()</span><br><span class="line">   0x08048c35 &lt;+121&gt;:mov    $0x0,%eax              &#x2F;&#x2F;eax&#x3D;0x0</span><br><span class="line">   0x08048c3a &lt;+126&gt;:jmp    0x8048c41 &lt;phase_3+133&gt;  &#x2F;&#x2F;jump 0x8048c41 &lt;phase_3+133&gt;</span><br><span class="line">   0x08048c3c &lt;+128&gt;:mov    $0x283,%eax            &#x2F;&#x2F;eax&#x3D;0x283</span><br><span class="line">   0x08048c41 &lt;+133&gt;:cmp    0x1c(%esp),%eax        &#x2F;&#x2F;compare eax with M(0x1c+esp)</span><br><span class="line">   0x08048c45 &lt;+137&gt;:je     0x8048c4c &lt;phase_3+144&gt; &#x2F;&#x2F;if zf&#x3D;1, jump 0x8048c4c &lt;phase_3+144&gt;</span><br><span class="line">   0x08048c47 &lt;+139&gt;:call   0x80490f6 &lt;explode_bomb&gt;  &#x2F;&#x2F;调用explode_bomb()</span><br><span class="line">   0x08048c4c &lt;+144&gt;:add    $0x2c,%esp             &#x2F;&#x2F;释放栈帧空间</span><br><span class="line">   0x08048c4f &lt;+147&gt;:ret                           &#x2F;&#x2F;返回地址出栈，并跳转到返回地址</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><ul><li><code>__isoc99_sscanf@plt</code>的第二个参数是<code>0x804a3e3</code>，以字符串的形式查看内存，所以我们知道后两个参数地址存的都是整数。<br><img src="/2021/05/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94LAB-3_BombLab/image-20210430191833050.png" alt="image-20210430191833050">、</li><li><code>0x08048bed &lt;+49&gt;:    cmpl   $0x7,0x18(%esp)</code>可知，第一个整数范围是0-7，不能是负数因为<code>ja</code>是无符号比较，出范围就爆炸</li><li><code>0x08048bf8 &lt;+60&gt;:    jmp    *0x804a220(,%eax,4)</code>可知，根据第一个整数，决定跳转到什么位置<ul><li>查看这8个不同跳转位置<br><img src="/2021/05/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94LAB-3_BombLab/image-20210430200908533.png" alt="image-20210430200908533"></li><li>因此我们得到了八个不同的输入组合：<br><code>0 813</code>、<code>1  643</code>、<code>2  876</code>、<code>3  987</code>、<code>4  365</code>、<code>5  977</code>、<code>6  971</code>、<code>7 540 </code></li><li>经验证，这几个都是符合的答案</li></ul></li><li>我们选<code>0 813</code>输入，输出成功拆除的提示语，第三关结束。<br><img src="/2021/05/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94LAB-3_BombLab/image-20210430204301058.png" alt="image-20210430204301058"></li></ul><h4 id="phase-4："><a href="#phase-4：" class="headerlink" title="phase_4："></a><code>phase_4</code>：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Dump of assembler code for function phase_4:               &#x2F;&#x2F;函数phase(input)</span><br><span class="line">   0x08048cb9 &lt;+0&gt;:    sub    $0x2c,%esp                  &#x2F;&#x2F;栈帧预留0x2c字节的空间</span><br><span class="line">   0x08048cbc &lt;+3&gt;:    lea    0x1c(%esp),%eax             &#x2F;&#x2F;eax&#x3D;0x1c+esp</span><br><span class="line">   0x08048cc0 &lt;+7&gt;:    mov    %eax,0xc(%esp)              &#x2F;&#x2F;M(0xc+esp)&#x3D;eax</span><br><span class="line">   0x08048cc4 &lt;+11&gt;:lea    0x18(%esp),%eax             &#x2F;&#x2F;eax&#x3D;0x18+esp</span><br><span class="line">   0x08048cc8 &lt;+15&gt;:mov    %eax,0x8(%esp)              &#x2F;&#x2F;M(0x8+esp)&#x3D;eax</span><br><span class="line">   0x08048ccc &lt;+19&gt;:movl   $0x804a3e3,0x4(%esp)        &#x2F;&#x2F;M(0x4+esp)&#x3D;0x804a3e3</span><br><span class="line">   0x08048cd4 &lt;+27&gt;:mov    0x30(%esp),%eax             &#x2F;&#x2F;eax&#x3D;M(0x30+esp)&#x3D;input</span><br><span class="line">   0x08048cd8 &lt;+31&gt;:mov    %eax,(%esp)                 &#x2F;&#x2F;M(esp)&#x3D;input</span><br><span class="line">   0x08048cdb &lt;+34&gt;:call   0x8048870 &lt;__isoc99_sscanf@plt&gt; &#x2F;&#x2F;调用__isoc99_sscanf@plt(input,0x804a3e3,0x18+esp,0x1c+esp)</span><br><span class="line">   0x08048ce0 &lt;+39&gt;:cmp    $0x2,%eax                   &#x2F;&#x2F;compare eax with 0x2</span><br><span class="line">   0x08048ce3 &lt;+42&gt;:jne    0x8048cf2 &lt;phase_4+57&gt;      &#x2F;&#x2F;if zf&#x3D;0, jump 0x8048cf2 &lt;phase_4+57&gt;</span><br><span class="line">   0x08048ce5 &lt;+44&gt;:mov    0x18(%esp),%eax             &#x2F;&#x2F;eax&#x3D;M(0x18+esp)</span><br><span class="line">   0x08048ce9 &lt;+48&gt;:test   %eax,%eax                   &#x2F;&#x2F;eax &amp; eax</span><br><span class="line">   0x08048ceb &lt;+50&gt;:js     0x8048cf2 &lt;phase_4+57&gt;      &#x2F;&#x2F;if sf&#x3D;1, jump 0x8048cf2 &lt;phase_4+57&gt;</span><br><span class="line">   0x08048ced &lt;+52&gt;:cmp    $0xe,%eax                   &#x2F;&#x2F;compare eax with 0xe</span><br><span class="line">   0x08048cf0 &lt;+55&gt;:jle    0x8048cf7 &lt;phase_4+62&gt;      &#x2F;&#x2F;if eax&lt;&#x3D;0xe, jump 0x8048cf7 &lt;phase_4+62&gt;</span><br><span class="line">   0x08048cf2 &lt;+57&gt;:call   0x80490f6 &lt;explode_bomb&gt;    &#x2F;&#x2F;调用explode_bomb()</span><br><span class="line">   0x08048cf7 &lt;+62&gt;:movl   $0xe,0x8(%esp)              &#x2F;&#x2F;M(0x8+esp)&#x3D;0xe</span><br><span class="line">   0x08048cff &lt;+70&gt;:movl   $0x0,0x4(%esp)              &#x2F;&#x2F;M(0x4+esp)&#x3D;0x0</span><br><span class="line">   0x08048d07 &lt;+78&gt;:mov    0x18(%esp),%eax             &#x2F;&#x2F;eax&#x3D;M(0x18+esp)</span><br><span class="line">   0x08048d0b &lt;+82&gt;:mov    %eax,(%esp)                 &#x2F;&#x2F;M(esp)&#x3D;eax</span><br><span class="line">   0x08048d0e &lt;+85&gt;:call   0x8048c50 &lt;func4&gt;           &#x2F;&#x2F;调用fun4(M(0x18+esp), 0x0, 0xe)</span><br><span class="line">   0x08048d13 &lt;+90&gt;:cmp    $0x15,%eax                  &#x2F;&#x2F;compare eax with 0x15</span><br><span class="line">   0x08048d16 &lt;+93&gt;:jne    0x8048d1f &lt;phase_4+102&gt;     &#x2F;&#x2F;if zf&#x3D;0, jump 0x8048d1f &lt;phase_4+102&gt;</span><br><span class="line">   0x08048d18 &lt;+95&gt;:cmpl   $0x15,0x1c(%esp)            &#x2F;&#x2F;compare M(0x1c+esp) with 0x15</span><br><span class="line">   0x08048d1d &lt;+100&gt;:je     0x8048d24 &lt;phase_4+107&gt;     &#x2F;&#x2F;if zf&#x3D;1, jump 0x8048d24 &lt;phase_4+107&gt;</span><br><span class="line">   0x08048d1f &lt;+102&gt;:call   0x80490f6 &lt;explode_bomb&gt;    &#x2F;&#x2F;调用explode_bomb()</span><br><span class="line">   0x08048d24 &lt;+107&gt;:add    $0x2c,%esp                  &#x2F;&#x2F;栈帧释放空间</span><br><span class="line">   0x08048d27 &lt;+110&gt;:ret                                &#x2F;&#x2F;返回地址出栈，并跳转到返回地址</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><ul><li><p>查看<code>scanf</code>的参数，在<code>0x804a3e3</code>以字符串的形式输出，我们看到是两个整数</p><p><img src="/2021/05/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94LAB-3_BombLab/image-20210430230148066.png" alt="image-20210430230148066"></p></li><li><p><code>0x08048d18 &lt;+95&gt;:    cmpl   $0x15,0x1c(%esp)</code><br>我们分析<code>M(0x1c+%esp)</code>要等于<code>0x15</code></p></li><li><p><code>0x08048d13 &lt;+90&gt;:    cmp    $0x15,%eax</code><br>我们需要知道<code>M(0x18+%esp)</code>到底等于多少，才能作为参数让<code>fun4(M(0x18+esp), 0x0, 0xe)</code>的返回值等于<code>0x15</code></p></li></ul><h5 id="func4"><a href="#func4" class="headerlink" title="func4"></a><code>func4</code></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">Dump of assembler code for function func4:                  &#x2F;&#x2F;函数fun4(x,second,third)</span><br><span class="line">   0x08048c50 &lt;+0&gt;:sub    $0x1c,%esp                       &#x2F;&#x2F;栈帧预留0x1c字节的空间</span><br><span class="line">   0x08048c53 &lt;+3&gt;:    mov    %ebx,0x14(%esp)              &#x2F;&#x2F;M(0x14+esp)&#x3D;ebx</span><br><span class="line">   0x08048c57 &lt;+7&gt;:    mov    %esi,0x18(%esp)              &#x2F;&#x2F;M(0x18+esp)&#x3D;esi</span><br><span class="line">   0x08048c5b &lt;+11&gt;:mov    0x20(%esp),%eax              &#x2F;&#x2F;eax&#x3D;M(0x20+esp)&#x3D;x</span><br><span class="line">   0x08048c5f &lt;+15&gt;:mov    0x24(%esp),%edx              &#x2F;&#x2F;edx&#x3D;M(0x24+esp)&#x3D;second</span><br><span class="line">   0x08048c63 &lt;+19&gt;:mov    0x28(%esp),%esi              &#x2F;&#x2F;esi&#x3D;M(0x28+esp)&#x3D;third</span><br><span class="line">   0x08048c67 &lt;+23&gt;:mov    %esi,%ecx                    &#x2F;&#x2F;ecx&#x3D;esi&#x3D;third</span><br><span class="line">   0x08048c69 &lt;+25&gt;:sub    %edx,%ecx                    &#x2F;&#x2F;ecx&#x3D;ecx-edx&#x3D;third-second</span><br><span class="line">   0x08048c6b &lt;+27&gt;:mov    %ecx,%ebx                    &#x2F;&#x2F;ebx&#x3D;ecx&#x3D;third-second</span><br><span class="line">   0x08048c6d &lt;+29&gt;:shr    $0x1f,%ebx                   &#x2F;&#x2F;ebx逻辑右移31位,ebx&#x3D;(third-second)&lt;0 ? 1:0</span><br><span class="line">   0x08048c70 &lt;+32&gt;:add    %ebx,%ecx             &#x2F;&#x2F;ecx&#x3D;ebx+ecx&#x3D;third-second+(third-second)&lt;0 ? 1:0</span><br><span class="line">   0x08048c72 &lt;+34&gt;:sar    %ecx                         &#x2F;&#x2F;ecx默认算术右移1位,ecx&#x3D;ecx&#x2F;2</span><br><span class="line">   0x08048c74 &lt;+36&gt;:lea    (%ecx,%edx,1),%ebx           &#x2F;&#x2F;ebx&#x3D;ecx+edx&#x3D;ecx+second&#x3D;average</span><br><span class="line">   0x08048c77 &lt;+39&gt;:cmp    %eax,%ebx                    &#x2F;&#x2F;compare ebx&#x3D;average with eax&#x3D;x</span><br><span class="line">   0x08048c79 &lt;+41&gt;:jle    0x8048c92 &lt;func4+66&gt;   &#x2F;&#x2F;if ebx&#x3D;average&lt;&#x3D;eax&#x3D;x, jump 0x8048c92 &lt;func4+66&gt;</span><br><span class="line">   0x08048c7b &lt;+43&gt;:lea    -0x1(%ebx),%ecx              &#x2F;&#x2F;ecx&#x3D;-0x1+ebx&#x3D;average-1</span><br><span class="line">   0x08048c7e &lt;+46&gt;:mov    %ecx,0x8(%esp)               &#x2F;&#x2F;M(0x8+esp)&#x3D;ecx&#x3D;average-1</span><br><span class="line">   0x08048c82 &lt;+50&gt;:mov    %edx,0x4(%esp)               &#x2F;&#x2F;M(0x4+esp)&#x3D;edx&#x3D;second</span><br><span class="line">   0x08048c86 &lt;+54&gt;:mov    %eax,(%esp)                  &#x2F;&#x2F;M(esp)&#x3D;eax&#x3D;x</span><br><span class="line">   0x08048c89 &lt;+57&gt;:call   0x8048c50 &lt;func4&gt;            &#x2F;&#x2F;调用fun4(x,second,average-1)</span><br><span class="line">   0x08048c8e &lt;+62&gt;:add    %eax,%ebx                 &#x2F;&#x2F;ebx&#x3D;ebx+eax&#x3D;average+fun4(x,second,average-1)</span><br><span class="line">   0x08048c90 &lt;+64&gt;:jmp    0x8048cab &lt;func4+91&gt;         &#x2F;&#x2F;jump 0x8048cab &lt;func4+91&gt;</span><br><span class="line">   0x08048c92 &lt;+66&gt;:cmp    %eax,%ebx                    &#x2F;&#x2F;compare ebx&#x3D;average with eax&#x3D;x</span><br><span class="line">   0x08048c94 &lt;+68&gt;:jge    0x8048cab &lt;func4+91&gt;   &#x2F;&#x2F;if ebx&#x3D;average&gt;&#x3D;eax&#x3D;x, jump 0x8048cab &lt;func4+91&gt; </span><br><span class="line">   0x08048c96 &lt;+70&gt;:mov    %esi,0x8(%esp)               &#x2F;&#x2F;M(0x8+esp)&#x3D;esi&#x3D;third</span><br><span class="line">   0x08048c9a &lt;+74&gt;:lea    0x1(%ebx),%edx               &#x2F;&#x2F;edx&#x3D;0x1+ebx&#x3D;average+1</span><br><span class="line">   0x08048c9d &lt;+77&gt;:mov    %edx,0x4(%esp)               &#x2F;&#x2F;M(0x4+esp)&#x3D;edx&#x3D;average+1</span><br><span class="line">   0x08048ca1 &lt;+81&gt;:mov    %eax,(%esp)                  &#x2F;&#x2F;M(esp)&#x3D;eax&#x3D;x</span><br><span class="line">   0x08048ca4 &lt;+84&gt;:call   0x8048c50 &lt;func4&gt;            &#x2F;&#x2F;调用fun4(x,average+1,third)</span><br><span class="line">   0x08048ca9 &lt;+89&gt;:add    %eax,%ebx                   &#x2F;&#x2F;ebx&#x3D;ebx+eax&#x3D;average+fun4(x,average+1,third)</span><br><span class="line">   0x08048cab &lt;+91&gt;:mov    %ebx,%eax                    &#x2F;&#x2F;eax&#x3D;ebx</span><br><span class="line">   0x08048cad &lt;+93&gt;:mov    0x14(%esp),%ebx              &#x2F;&#x2F;ebx&#x3D;M(0x14+esp)</span><br><span class="line">   0x08048cb1 &lt;+97&gt;:mov    0x18(%esp),%esi              &#x2F;&#x2F;esi&#x3D;M(0x18+esp)</span><br><span class="line">   0x08048cb5 &lt;+101&gt;:add    $0x1c,%esp                   &#x2F;&#x2F;栈帧释放空间</span><br><span class="line">   0x08048cb8 &lt;+104&gt;:ret                                 &#x2F;&#x2F;返回地址出栈，并跳转到返回地址</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><ul><li>我们将<code>fun4</code>函数翻译成C语言代码，主函数遍历<code>func4</code>第一个参数<code>x</code>，如果返回值等于<code>0x15</code>也就是<code>21</code>，那就是正确答案</li></ul><h5 id="func4转换成C语言："><a href="#func4转换成C语言：" class="headerlink" title="func4转换成C语言："></a><code>func4</code>转换成C语言：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func4</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> second, <span class="keyword">int</span> third)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> average = second + (third - second + ((third - second) &lt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>)) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (x &lt; average) &#123;</span><br><span class="line"><span class="keyword">return</span> average + <span class="built_in">func4</span>(x, second, average - <span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; average) &#123;</span><br><span class="line"><span class="keyword">return</span> average + <span class="built_in">func4</span>(x, average + <span class="number">1</span>, third);</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> average;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">15</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">func4</span>(i, <span class="number">0</span>, <span class="number">15</span>) == <span class="number">21</span>)</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>输出结果如下：<br><img src="/2021/05/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94LAB-3_BombLab/image-20210501104004856.png" alt="image-20210501104004856"></li><li>所以第四关答案为：<code>6 21</code>，输入验证，输出过关提示语<br><img src="/2021/05/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94LAB-3_BombLab/image-20210501104406772.png" alt="image-20210501104406772"></li></ul><h4 id="phase-5："><a href="#phase-5：" class="headerlink" title="phase_5："></a><code>phase_5</code>：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">Dump of assembler code for function phase_5:                     &#x2F;&#x2F;函数phase_5(input)</span><br><span class="line">   0x08048d28 &lt;+0&gt;:sub    $0x2c,%esp                            &#x2F;&#x2F;栈帧预留0x2c字节的空间</span><br><span class="line">   0x08048d2b &lt;+3&gt;:    lea    0x1c(%esp),%eax                   &#x2F;&#x2F;eax&#x3D;0x1c+esp</span><br><span class="line">   0x08048d2f &lt;+7&gt;:    mov    %eax,0xc(%esp)                    &#x2F;&#x2F;M(0xc+esp)&#x3D;eax&#x3D;0x1c+esp</span><br><span class="line">   0x08048d33 &lt;+11&gt;:lea    0x18(%esp),%eax                   &#x2F;&#x2F;eax&#x3D;0x18+esp</span><br><span class="line">   0x08048d37 &lt;+15&gt;:mov    %eax,0x8(%esp)                    &#x2F;&#x2F;M(0x8+esp)&#x3D;eax&#x3D;0x18+esp</span><br><span class="line">   0x08048d3b &lt;+19&gt;:movl   $0x804a3e3,0x4(%esp)              &#x2F;&#x2F;M(0x4+esp)&#x3D;0x804a3e3</span><br><span class="line">   0x08048d43 &lt;+27&gt;:mov    0x30(%esp),%eax                   &#x2F;&#x2F;eax&#x3D;M(0x30+esp)&#x3D;input</span><br><span class="line">   0x08048d47 &lt;+31&gt;:mov    %eax,(%esp)                       &#x2F;&#x2F;M(esp)&#x3D;eax&#x3D;input</span><br><span class="line">   0x08048d4a &lt;+34&gt;:call   0x8048870 &lt;__isoc99_sscanf@plt&gt;   &#x2F;&#x2F;调用__isoc99_sscanf@plt(input,0x804a3e3,0x18+esp,0x1c+esp)</span><br><span class="line">   0x08048d4f &lt;+39&gt;:cmp    $0x1,%eax                         &#x2F;&#x2F;compare eax with 0x1</span><br><span class="line">   0x08048d52 &lt;+42&gt;:jg     0x8048d59 &lt;phase_5+49&gt;          &#x2F;&#x2F;if eax&gt;0x1, jump 0x8048d59 &lt;phase_5+49&gt;</span><br><span class="line">   0x08048d54 &lt;+44&gt;:call   0x80490f6 &lt;explode_bomb&gt;          &#x2F;&#x2F;调用explode_bomb()</span><br><span class="line">   0x08048d59 &lt;+49&gt;:mov    0x18(%esp),%eax                   &#x2F;&#x2F;eax&#x3D;M(0x18+esp)</span><br><span class="line">   0x08048d5d &lt;+53&gt;:and    $0xf,%eax                         &#x2F;&#x2F;eax&#x3D;eax &amp; 0xf</span><br><span class="line">   0x08048d60 &lt;+56&gt;:mov    %eax,0x18(%esp)                   &#x2F;&#x2F;M(0x18+esp)&#x3D;eax</span><br><span class="line">   0x08048d64 &lt;+60&gt;:cmp    $0xf,%eax                         &#x2F;&#x2F;compare eax with 0xf</span><br><span class="line">   0x08048d67 &lt;+63&gt;:je     0x8048d93 &lt;phase_5+107&gt;           &#x2F;&#x2F;if zf&#x3D;1, jump 0x8048d93 &lt;phase_5+107&gt;</span><br><span class="line">   0x08048d69 &lt;+65&gt;:mov    $0x0,%ecx                         &#x2F;&#x2F;ecx&#x3D;0x0</span><br><span class="line">   0x08048d6e &lt;+70&gt;:mov    $0x0,%edx                         &#x2F;&#x2F;edx&#x3D;0x0</span><br><span class="line">   0x08048d73 &lt;+75&gt;:add    $0x1,%edx                         &#x2F;&#x2F;edx&#x3D;edx+1</span><br><span class="line">   0x08048d76 &lt;+78&gt;:mov    0x804a240(,%eax,4),%eax           &#x2F;&#x2F;eax&#x3D;M(0x804a240+4*eax)&#x3D;array[eax]</span><br><span class="line">   0x08048d7d &lt;+85&gt;:add    %eax,%ecx                         &#x2F;&#x2F;ecx&#x3D;ecx+eax</span><br><span class="line">   0x08048d7f &lt;+87&gt;:cmp    $0xf,%eax                         &#x2F;&#x2F;compare eax with 0xf</span><br><span class="line">   0x08048d82 &lt;+90&gt;:jne    0x8048d73 &lt;phase_5+75&gt;            &#x2F;&#x2F;if zf&#x3D;0, jump 0x8048d73 &lt;phase_5+75&gt;</span><br><span class="line">   0x08048d84 &lt;+92&gt;:mov    %eax,0x18(%esp)                   &#x2F;&#x2F;M(0x18+esp)&#x3D;eax</span><br><span class="line">   0x08048d88 &lt;+96&gt;:cmp    $0xf,%edx                         &#x2F;&#x2F;compare edx with 0xf</span><br><span class="line">   0x08048d8b &lt;+99&gt;:jne    0x8048d93 &lt;phase_5+107&gt;           &#x2F;&#x2F;if zf&#x3D;0, jump 0x8048d93 &lt;phase_5+107&gt;</span><br><span class="line">   0x08048d8d &lt;+101&gt;:cmp    0x1c(%esp),%ecx                   &#x2F;&#x2F;compare ecx with M(0x1c+esp)</span><br><span class="line">   0x08048d91 &lt;+105&gt;:je     0x8048d98 &lt;phase_5+112&gt;           &#x2F;&#x2F;if zf&#x3D;1, jump 0x8048d98 &lt;phase_5+112&gt; </span><br><span class="line">   0x08048d93 &lt;+107&gt;:call   0x80490f6 &lt;explode_bomb&gt;          &#x2F;&#x2F;调用explode_bomb()</span><br><span class="line">   0x08048d98 &lt;+112&gt;:add    $0x2c,%esp                        &#x2F;&#x2F;栈帧释放空间</span><br><span class="line">   0x08048d9b &lt;+115&gt;:ret                                      &#x2F;&#x2F;返回地址出栈，且跳转到返回地址</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><ul><li><p>还是先看输入，还是两个整数<br><img src="/2021/05/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94LAB-3_BombLab/image-20210501104814076.png" alt="image-20210501104814076"></p></li><li><p>过程：保存求和结果的<code>ecx</code>和发挥计数作用的<code>edx</code>都初始化为0<br><code>edx</code>加1，输入的<code>M(0x18+esp)</code>作为下标将<code>array[M(0x18+esp)]</code>存到<code>eax</code>，<code>ecx</code>加上<code>eax</code>也就是这个元素值<code>array[M(0x18+esp)]</code><br><code>edx</code>加1，将<code>eax</code>作为数组元素的下标将元素<code>array[eax]</code>存到<code>eax</code>，<code>ecx</code>加上这个元素值<code>eax</code>；<br>。。。这个过程持续到<code>eax</code>等于<code>0xf</code>就是当下标等于<code>0xf</code>时结束，同时<code>edx</code>等于<code>0xf</code>也就是这个过程刚好进行15次。</p><ul><li>我们查看这个数组<br><img src="/2021/05/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94LAB-3_BombLab/image-20210501113814480.png" alt="image-20210501113814480"></li><li>发现<code>0xf</code>元素的下标为<code>6=0x6</code>，<br><code>0x6</code>元素的下标为<code>14=0xe</code>，<br><code>0xe</code>元素的下标为<code>2=0x2</code><br><code>0x2</code>元素的下表为<code>1=0x1</code>。。。。继续往下。。。。</li><li>我们得到的序列为：<code>f 6 e 2 1 a 0 8 4 9 d b 7 3 c 5 </code></li><li>所以第一个输入是<code>5</code></li></ul></li><li><p>第二个输入等于<code>%ecx</code>，因为只进行15次加法，所以最后和少了<code>array[15]=5</code>，所以是结果是<code>115</code></p></li><li><p>所以答案是<code>5 115</code>，验证，成功。<br><img src="/2021/05/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94LAB-3_BombLab/image-20210501120859183.png" alt="image-20210501120859183"></p></li></ul><h4 id="phase-6："><a href="#phase-6：" class="headerlink" title="phase_6："></a><code>phase_6</code>：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">Dump of assembler code for function phase_6:               &#x2F;&#x2F;phase_6(input)</span><br><span class="line">   0x08048d9c &lt;+0&gt;:    push   %esi                        &#x2F;&#x2F;esi入栈</span><br><span class="line">   0x08048d9d &lt;+1&gt;:    push   %ebx                        &#x2F;&#x2F;ebx入栈</span><br><span class="line">   0x08048d9e &lt;+2&gt;:    sub    $0x44,%esp                  &#x2F;&#x2F;栈帧预留0x44字节的空间</span><br><span class="line">   0x08048da1 &lt;+5&gt;:    lea    0x10(%esp),%eax             &#x2F;&#x2F;eax&#x3D;0x10+esp</span><br><span class="line">   0x08048da5 &lt;+9&gt;:    mov    %eax,0x4(%esp)              &#x2F;&#x2F;M(0x4+esp)&#x3D;eax&#x3D;0x10+esp</span><br><span class="line">   0x08048da9 &lt;+13&gt;:mov    0x50(%esp),%eax             &#x2F;&#x2F;eax&#x3D;M(0x50+esp)&#x3D;input</span><br><span class="line">   0x08048dad &lt;+17&gt;:mov    %eax,(%esp)                 &#x2F;&#x2F;M(esp)&#x3D;eax&#x3D;input</span><br><span class="line">   0x08048db0 &lt;+20&gt;:call   0x804922b &lt;read_six_numbers&gt;&#x2F;&#x2F;调用read_six_numbers(input,0x10+esp)</span><br><span class="line">   0x08048db5 &lt;+25&gt;:mov    $0x0,%esi                   &#x2F;&#x2F;esi&#x3D;0x0</span><br><span class="line">   0x08048dba &lt;+30&gt;:mov    0x10(%esp,%esi,4),%eax      &#x2F;&#x2F;eax&#x3D;M(0x10+esp+4*esi)&#x3D;array[esi]</span><br><span class="line">   0x08048dbe &lt;+34&gt;:sub    $0x1,%eax                   &#x2F;&#x2F;eax&#x3D;eax-1&#x3D;array[esi]-1</span><br><span class="line">   0x08048dc1 &lt;+37&gt;:cmp    $0x5,%eax                   &#x2F;&#x2F;compare eax&#x3D;array[esi]-1 with 0x5</span><br><span class="line">   0x08048dc4 &lt;+40&gt;:jbe    0x8048dcb &lt;phase_6+47&gt;      &#x2F;&#x2F;if 0&lt;&#x3D;eax&lt;&#x3D;5, jump 0x8048dcb &lt;phase_6+47&gt;</span><br><span class="line">   0x08048dc6 &lt;+42&gt;:call   0x80490f6 &lt;explode_bomb&gt;    &#x2F;&#x2F;调用explode_bomb()</span><br><span class="line">   0x08048dcb &lt;+47&gt;:add    $0x1,%esi                   &#x2F;&#x2F;esi&#x3D;esi+1</span><br><span class="line">   0x08048dce &lt;+50&gt;:cmp    $0x6,%esi                   &#x2F;&#x2F;compare esi with 0x6</span><br><span class="line">   0x08048dd1 &lt;+53&gt;:je     0x8048dee &lt;phase_6+82&gt;      &#x2F;&#x2F;if zf&#x3D;1, jump 0x8048dee &lt;phase_6+82&gt;</span><br><span class="line">   0x08048dd3 &lt;+55&gt;:mov    %esi,%ebx                   &#x2F;&#x2F;ebx&#x3D;esi</span><br><span class="line">   0x08048dd5 &lt;+57&gt;:mov    0x10(%esp,%ebx,4),%eax      &#x2F;&#x2F;eax&#x3D;M(0x10+esp+ebx*4)&#x3D;array[ebx]</span><br><span class="line">   0x08048dd9 &lt;+61&gt;:cmp    %eax,0xc(%esp,%esi,4)   &#x2F;&#x2F;compare M(0xc+esp+4*esi)&#x3D;array[esi-1] with eax</span><br><span class="line">   0x08048ddd &lt;+65&gt;:jne    0x8048de4 &lt;phase_6+72&gt;      &#x2F;&#x2F;if zf&#x3D;0, jump 0x8048de4 &lt;phase_6+72&gt;</span><br><span class="line">   0x08048ddf &lt;+67&gt;:call   0x80490f6 &lt;explode_bomb&gt;    &#x2F;&#x2F;调用explode_bomb()</span><br><span class="line">   0x08048de4 &lt;+72&gt;:add    $0x1,%ebx                   &#x2F;&#x2F;ebx&#x3D;ebx+1</span><br><span class="line">   0x08048de7 &lt;+75&gt;:cmp    $0x5,%ebx                   &#x2F;&#x2F;compare ebx with 0x5</span><br><span class="line">   0x08048dea &lt;+78&gt;:jle    0x8048dd5 &lt;phase_6+57&gt;      &#x2F;&#x2F;if ebx&lt;&#x3D;5,jump 0x8048dd5 &lt;phase_6+57&gt;</span><br><span class="line">   0x08048dec &lt;+80&gt;:jmp    0x8048dba &lt;phase_6+30&gt;      &#x2F;&#x2F;jump 0x8048dba &lt;phase_6+30&gt;</span><br><span class="line">   &#x2F;*输入六个数到array[x]，每一个数都进行限制，必须与它之后数字不同，而且必须处于范围1-6 *&#x2F;</span><br><span class="line">   0x08048dee &lt;+82&gt;:lea    0x10(%esp),%eax             &#x2F;&#x2F;eax&#x3D;0x10+esp</span><br><span class="line">   0x08048df2 &lt;+86&gt;:lea    0x28(%esp),%ebx           &#x2F;&#x2F;ebx&#x3D;0x28+esp&#x3D;0x10+esp+0x4*6</span><br><span class="line">   0x08048df6 &lt;+90&gt;:mov    $0x7,%ecx                   &#x2F;&#x2F;ecx&#x3D;0x7</span><br><span class="line">   0x08048dfb &lt;+95&gt;:mov    %ecx,%edx                   &#x2F;&#x2F;edx&#x3D;ecx&#x3D;0x7</span><br><span class="line">   0x08048dfd &lt;+97&gt;:sub    (%eax),%edx                 &#x2F;&#x2F;edx&#x3D;edx-M(eax)&#x3D;0x7-array[eax-(0x10+esp)]</span><br><span class="line">   0x08048dff &lt;+99&gt;:mov    %edx,(%eax)                 &#x2F;&#x2F;array[eax-(0x10+esp)]&#x3D;M(eax)&#x3D;edx</span><br><span class="line">   0x08048e01 &lt;+101&gt;:add    $0x4,%eax                   &#x2F;&#x2F;eax&#x3D;eax+0x4</span><br><span class="line">   0x08048e04 &lt;+104&gt;:cmp    %ebx,%eax                   &#x2F;&#x2F;compare eax with ebx&#x3D;0x10+esp+0x4*6</span><br><span class="line">   0x08048e06 &lt;+106&gt;:jne    0x8048dfb &lt;phase_6+95&gt;      &#x2F;&#x2F;if zf&#x3D;0, jump 0x8048dfb &lt;phase_6+95&gt;</span><br><span class="line">   &#x2F;*将这六个数组元素都分别被7减，所得结果还是存到他们原来的位置，也就是array[x]&#x3D;7-array[x] *&#x2F;</span><br><span class="line">   0x08048e08 &lt;+108&gt;:mov    $0x0,%ebx                   &#x2F;&#x2F;ebx&#x3D;0x0</span><br><span class="line">   0x08048e0d &lt;+113&gt;:jmp    0x8048e25 &lt;phase_6+137&gt;     &#x2F;&#x2F;jump 0x8048e25 &lt;phase_6+137&gt;</span><br><span class="line">   0x08048e0f &lt;+115&gt;:mov    0x8(%edx),%edx              &#x2F;&#x2F;edx&#x3D;M(0x8+edx)</span><br><span class="line">   0x08048e12 &lt;+118&gt;:add    $0x1,%eax                   &#x2F;&#x2F;eax&#x3D;eax+0x1</span><br><span class="line">   0x08048e15 &lt;+121&gt;:cmp    %ecx,%eax                   &#x2F;&#x2F;compare eax with ecx&#x3D;array[ebx]</span><br><span class="line">   0x08048e17 &lt;+123&gt;:jne    0x8048e0f &lt;phase_6+115&gt;     &#x2F;&#x2F;if zf&#x3D;0, jump 0x8048e0f &lt;phase_6+115&gt;</span><br><span class="line">   0x08048e19 &lt;+125&gt;:mov    %edx,0x28(%esp,%esi,4)      &#x2F;&#x2F;array[6+esi]&#x3D;M(0x28+esp+4*esi)&#x3D;edx</span><br><span class="line">   0x08048e1d &lt;+129&gt;:add    $0x1,%ebx                   &#x2F;&#x2F;ebx&#x3D;ebx+0x1</span><br><span class="line">   0x08048e20 &lt;+132&gt;:cmp    $0x6,%ebx                   &#x2F;&#x2F;compare ebx with 0x6</span><br><span class="line">   0x08048e23 &lt;+135&gt;:je     0x8048e3c &lt;phase_6+160&gt;     &#x2F;&#x2F;if zf&#x3D;1, jump 0x8048e3c &lt;phase_6+160&gt;</span><br><span class="line">   0x08048e25 &lt;+137&gt;:mov    %ebx,%esi                   &#x2F;&#x2F;esi&#x3D;ebx</span><br><span class="line">   0x08048e27 &lt;+139&gt;:mov    0x10(%esp,%ebx,4),%ecx      &#x2F;&#x2F;ecx&#x3D;M(0x10+esp+4*ebx)&#x3D;array[ebx]</span><br><span class="line">   0x08048e2b &lt;+143&gt;:mov    $0x1,%eax                   &#x2F;&#x2F;eax&#x3D;0x1</span><br><span class="line">   0x08048e30 &lt;+148&gt;:mov    $0x804c13c,%edx             &#x2F;&#x2F;edx&#x3D;0x804c13c</span><br><span class="line">   0x08048e35 &lt;+153&gt;:cmp    $0x1,%ecx                   &#x2F;&#x2F;compare ecx&#x3D;array[ebx] with 0x1</span><br><span class="line">   0x08048e38 &lt;+156&gt;:jg     0x8048e0f &lt;phase_6+115&gt;     &#x2F;&#x2F;if ecx&gt;0x1, jump 0x8048e0f &lt;phase_6+115&gt;</span><br><span class="line">   0x08048e3a &lt;+158&gt;:jmp    0x8048e19 &lt;phase_6+125&gt;     &#x2F;&#x2F;jump 0x8048e19 &lt;phase_6+125&gt;</span><br><span class="line">   &#x2F;* 0&lt;&#x3D;x&lt;&#x3D;5，初始化edx&#x3D;0x804c13c，循环array[x]-1次edx&#x3D;M(edx+0x8)，最后edx存到array[x+6]中 *&#x2F;</span><br><span class="line">   0x08048e3c &lt;+160&gt;:mov    0x28(%esp),%ebx             &#x2F;&#x2F;ebx&#x3D;M(0x28+esp)&#x3D;array[6]</span><br><span class="line">   0x08048e40 &lt;+164&gt;:mov    0x2c(%esp),%eax             &#x2F;&#x2F;eax&#x3D;M(0x2c+esp)&#x3D;array[7]</span><br><span class="line">   0x08048e44 &lt;+168&gt;:mov    %eax,0x8(%ebx)              &#x2F;&#x2F;M(0x8+array[6])&#x3D;M(0x8+ebx)&#x3D;eax&#x3D;array[7]</span><br><span class="line">   0x08048e47 &lt;+171&gt;:mov    0x30(%esp),%edx             &#x2F;&#x2F;edx&#x3D;M(0x30+esp)&#x3D;array[8]</span><br><span class="line">   0x08048e4b &lt;+175&gt;:mov    %edx,0x8(%eax)              &#x2F;&#x2F;M(0x8+array[7])&#x3D;M(0x8+eax)&#x3D;edx&#x3D;array[8]</span><br><span class="line">   0x08048e4e &lt;+178&gt;:mov    0x34(%esp),%eax             &#x2F;&#x2F;eax&#x3D;M(0x34+esp)&#x3D;array[9]</span><br><span class="line">   0x08048e52 &lt;+182&gt;:mov    %eax,0x8(%edx)              &#x2F;&#x2F;M(0x8+array[8])&#x3D;M(0x8+edx)&#x3D;eax&#x3D;array[9]</span><br><span class="line">   0x08048e55 &lt;+185&gt;:mov    0x38(%esp),%edx             &#x2F;&#x2F;edx&#x3D;M(0x38+esp)&#x3D;array[10]</span><br><span class="line">   0x08048e59 &lt;+189&gt;:mov    %edx,0x8(%eax)              &#x2F;&#x2F;M(0x8+array[9])&#x3D;M(0x8+eax)&#x3D;edx&#x3D;array[10]</span><br><span class="line">   0x08048e5c &lt;+192&gt;:mov    0x3c(%esp),%eax             &#x2F;&#x2F;eax&#x3D;M(0x3c+esp)&#x3D;array[11]</span><br><span class="line">   0x08048e60 &lt;+196&gt;:mov    %eax,0x8(%edx)              &#x2F;&#x2F;M(0x8+array[10])&#x3D;M(0x8+edx)&#x3D;eax&#x3D;array[11]</span><br><span class="line">   0x08048e63 &lt;+199&gt;:movl   $0x0,0x8(%eax)              &#x2F;&#x2F;M(0x8+array[11])&#x3D;M(0x8+eax)&#x3D;0x0</span><br><span class="line">   &#x2F;* M(0x8+array[6+x])&#x3D;array[6+x+1]，也就是对链表重新进行排序*&#x2F;</span><br><span class="line">   0x08048e6a &lt;+206&gt;:mov    $0x5,%esi                   &#x2F;&#x2F;esi&#x3D;0x5</span><br><span class="line">   0x08048e6f &lt;+211&gt;:mov    0x8(%ebx),%eax              &#x2F;&#x2F;eax&#x3D;M(0x8+ebx)</span><br><span class="line">   0x08048e72 &lt;+214&gt;:mov    (%eax),%edx                 &#x2F;&#x2F;edx&#x3D;M(eax)</span><br><span class="line">   0x08048e74 &lt;+216&gt;:cmp    %edx,(%ebx)                 &#x2F;&#x2F;compare M(ebx) with edx</span><br><span class="line">   0x08048e76 &lt;+218&gt;:jge    0x8048e7d &lt;phase_6+225&gt;    &#x2F;&#x2F;if M(ebx)&gt;&#x3D;edx, jump 0x8048e7d &lt;phase_6+225&gt;</span><br><span class="line">   0x08048e78 &lt;+220&gt;:call   0x80490f6 &lt;explode_bomb&gt;    &#x2F;&#x2F;调用explode_bomb()</span><br><span class="line">   0x08048e7d &lt;+225&gt;:mov    0x8(%ebx),%ebx              &#x2F;&#x2F;ebx&#x3D;M(0x8+ebx)</span><br><span class="line">   0x08048e80 &lt;+228&gt;:sub    $0x1,%esi                   &#x2F;&#x2F;esi&#x3D;esi-1</span><br><span class="line">   0x08048e83 &lt;+231&gt;:jne    0x8048e6f &lt;phase_6+211&gt;     &#x2F;&#x2F;if zf&#x3D;0, jump 0x8048e6f &lt;phase_6+211&gt;</span><br><span class="line">   &#x2F;* 排序后的链表，前一个节点的值大于等于后一节点的值，*&#x2F;</span><br><span class="line">   0x08048e85 &lt;+233&gt;:add    $0x44,%esp                  &#x2F;&#x2F;栈帧释放空间</span><br><span class="line">   0x08048e88 &lt;+236&gt;:pop    %ebx                        &#x2F;&#x2F;出栈ebx</span><br><span class="line">   0x08048e89 &lt;+237&gt;:pop    %esi                        &#x2F;&#x2F;出栈esi</span><br><span class="line">   0x08048e8a &lt;+238&gt;:ret                                &#x2F;&#x2F;返回地址出栈，跳转到返回地址</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><ul><li><p>打印查看<code>0x804c13c</code>地址所存，发现它是一个结构体，三个成员是：<code>value</code>、<code>id</code>、<code>next</code>。<br>依次查看各个节点。<br><img src="/2021/05/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94LAB-3_BombLab/image-20210501183605731.png" alt="image-20210501183605731"></p></li><li><p>所以我们知道<code>array[x+6]</code>存的是<code>id=array[x]</code>的节点的地址；<br><code>M(array[x+6])</code>存的是<code>id=array[x]</code>的节点的<code>value</code>；<br><code>M(array[x+6]+8)</code>存的是<code>id=array[x]</code>的节点的<code>next</code>;</p></li><li><p>函数执行过程是：先输入<code>array[x]</code>并判断是否在<code>[1,6]</code>且各不相同；</p><p>对这六个元素都执行<code>array[x]=7-array[x]</code>；</p><p>将<code>id=array[x]</code>的节点地址存到<code>array[x+6]</code>；</p><p>将<code>id=array[x]</code>的节点的地址的<code>next</code>成员改写成<code>id=array[x+1]</code>的节点的地址，也就是<code>array[x+6]-&gt;next=array[x+6+1]</code>；</p><p>判断排序后的链表节点的<code>value</code>成员大小是否是递减的。</p></li><li><p>所以我们输入的数，其实是6个节点的<code>id</code>成员，函数按照输入<code>id</code>的顺序，将这六个节点排序，排序后的链表是递减的。</p></li><li><p>将这六个节点的<code>value</code>转化为10进制的数</p><table><thead><tr><th align="center">id</th><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th><th align="center">5</th><th align="center">6</th></tr></thead><tbody><tr><td align="center"><strong>value</strong></td><td align="center">495</td><td align="center">476</td><td align="center">197</td><td align="center">612</td><td align="center">890</td><td align="center">249</td></tr></tbody></table></li><li><p>正确的<code>id</code>序列：<code>5 4 1 2 6 3</code></p></li><li><p>但是因为执行过<code>array[x]=7-array[x]</code>，所以正确的输入是：<code>2 3 6 5 1 4</code> </p></li><li><p>验证，输出提示语<br><img src="/2021/05/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94LAB-3_BombLab/image-20210502160922650.png" alt="image-20210502160922650"></p></li></ul><h4 id="phase-defused"><a href="#phase-defused" class="headerlink" title="phase_defused"></a><code>phase_defused</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">Dump of assembler code for function phase_defused:    &#x2F;&#x2F;phase_defused()</span><br><span class="line">   0x0804927b &lt;+0&gt;:sub    $0x8c,%esp                 &#x2F;&#x2F;栈帧预留0x8c字节的空间</span><br><span class="line">   0x08049281 &lt;+6&gt;:mov    %gs:0x14,%eax              &#x2F;&#x2F;eax&#x3D;gs:0x14</span><br><span class="line">   0x08049287 &lt;+12&gt;:mov    %eax,0x7c(%esp)        &#x2F;&#x2F;M(0x7c+esp)&#x3D;eax</span><br><span class="line">   0x0804928b &lt;+16&gt;:xor    %eax,%eax              &#x2F;&#x2F;eax&#x3D;eax^eax</span><br><span class="line">   0x0804928d &lt;+18&gt;:cmpl   $0x6,0x804c3cc         &#x2F;&#x2F;compare M(0x804c3cc) with 0x6</span><br><span class="line">   &#x2F;&#x2F;0x804c3cc &lt;num_input_strings&gt;:0x00         记录关卡数</span><br><span class="line">   0x08049294 &lt;+25&gt;:jne    0x8049308 &lt;phase_defused+141&gt;&#x2F;&#x2F;if zf&#x3D;0,jump 0x8049308 &lt;phase_defused+141&gt;</span><br><span class="line">   0x08049296 &lt;+27&gt;:lea    0x2c(%esp),%eax        &#x2F;&#x2F;eax&#x3D;0x2c+esp</span><br><span class="line">   0x0804929a &lt;+31&gt;:mov    %eax,0x10(%esp)        &#x2F;&#x2F;M(0x10+esp)&#x3D;eax</span><br><span class="line">   0x0804929e &lt;+35&gt;:lea    0x28(%esp),%eax        &#x2F;&#x2F;eax&#x3D;0x28+esp</span><br><span class="line">   0x080492a2 &lt;+39&gt;:mov    %eax,0xc(%esp)         &#x2F;&#x2F;M(0xc+esp)&#x3D;eax</span><br><span class="line">   0x080492a6 &lt;+43&gt;:lea    0x24(%esp),%eax        &#x2F;&#x2F;eax&#x3D;0x24+esp</span><br><span class="line">   0x080492aa &lt;+47&gt;:mov    %eax,0x8(%esp)         &#x2F;&#x2F;M(0x8+esp)&#x3D;eax</span><br><span class="line">   0x080492ae &lt;+51&gt;:movl   $0x804a3e9,0x4(%esp)   &#x2F;&#x2F;M(0x4+esp)&#x3D;0x804a3e9</span><br><span class="line">   &#x2F;&#x2F; 0x804a3e9: &quot;%d %d %s&quot;</span><br><span class="line">   0x080492b6 &lt;+59&gt;:movl   $0x804c4d0,(%esp)      &#x2F;&#x2F;M(esp)&#x3D;0x804c4d0</span><br><span class="line">   &#x2F;&#x2F; 0x804c4d0: &quot;&quot;             这个地址在某一关被赋值</span><br><span class="line">   0x080492bd &lt;+66&gt;:call   0x8048870 &lt;__isoc99_sscanf@plt&gt; &#x2F;&#x2F;__isoc99_sscanf@plt(0x804c4d0,0x804a3e9,0x24+esp,0x28+esp,0x2c+esp)</span><br><span class="line">   0x080492c2 &lt;+71&gt;:cmp    $0x3,%eax              &#x2F;&#x2F;compare 返回值eax with 0x3</span><br><span class="line">   0x080492c5 &lt;+74&gt;:jne    0x80492fc &lt;phase_defused+129&gt;&#x2F;&#x2F;if zf&#x3D;0,jump 0x80492fc &lt;phase_defused+129&gt;</span><br><span class="line">   0x080492c7 &lt;+76&gt;:movl   $0x804a3f2,0x4(%esp)   &#x2F;&#x2F;M(0x4+esp)&#x3D;0x804a3f2</span><br><span class="line">   &#x2F;&#x2F; 0x804a3f2: &quot;DrEvil&quot;</span><br><span class="line">   0x080492cf &lt;+84&gt;:lea    0x2c(%esp),%eax         &#x2F;&#x2F;eax&#x3D;0x2c+esp</span><br><span class="line">   0x080492d3 &lt;+88&gt;:mov    %eax,(%esp)             &#x2F;&#x2F;M(esp)&#x3D;eax</span><br><span class="line">   0x080492d6 &lt;+91&gt;:call   0x8048fe4 &lt;strings_not_equal&gt; &#x2F;&#x2F;调用strings_not_equal(0x2c+esp,0x804a3f2)</span><br><span class="line">   0x080492db &lt;+96&gt;:test   %eax,%eax                &#x2F;&#x2F;eax&amp;eax</span><br><span class="line">   0x080492dd &lt;+98&gt;:jne    0x80492fc &lt;phase_defused+129&gt;&#x2F;&#x2F;if zf&#x3D;0,jump 0x80492fc &lt;phase_defused+129&gt;</span><br><span class="line">   0x080492df &lt;+100&gt;:movl   $0x804a2b8,(%esp)        &#x2F;&#x2F;M(esp)&#x3D;0x804a2b8</span><br><span class="line">   &#x2F;&#x2F;0x804a2b8: &quot;Curses, you&#39;ve found the secret phase!&quot;</span><br><span class="line">   0x080492e6 &lt;+107&gt;:call   0x8048800 &lt;puts@plt&gt;     &#x2F;&#x2F;调用puts@plt(0x804a2b8)</span><br><span class="line">   0x080492eb &lt;+112&gt;:movl   $0x804a2e0,(%esp)        &#x2F;&#x2F;M(esp)&#x3D;0x804a2e0</span><br><span class="line">   &#x2F;&#x2F;0x804a2e0: &quot;But finding it and solving it are quite different...&quot;</span><br><span class="line">   0x080492f2 &lt;+119&gt;:call   0x8048800 &lt;puts@plt&gt;     &#x2F;&#x2F;调用puts@plt(0x804a2e0)</span><br><span class="line">   0x080492f7 &lt;+124&gt;:call   0x8048edc &lt;secret_phase&gt;  &#x2F;&#x2F;进入隐藏关卡</span><br><span class="line">   0x080492fc &lt;+129&gt;:movl   $0x804a318,(%esp)         &#x2F;&#x2F;M(esp)&#x3D;0x804a318</span><br><span class="line">   &#x2F;&#x2F;0x804a318: &quot;Congratulations! You&#39;ve defused the bomb!&quot;</span><br><span class="line">   0x08049303 &lt;+136&gt;:call   0x8048800 &lt;puts@plt&gt;     &#x2F;&#x2F;调用puts@plt(0x804a318)</span><br><span class="line">   0x08049308 &lt;+141&gt;:mov    0x7c(%esp),%eax          &#x2F;&#x2F;eax&#x3D;M(0x7c+esp)</span><br><span class="line">   0x0804930c &lt;+145&gt;:xor    %gs:0x14,%eax            &#x2F;&#x2F;eax ^ %gs:0x14</span><br><span class="line">   0x08049313 &lt;+152&gt;:je     0x804931a &lt;phase_defused+159&gt;&#x2F;&#x2F;if zf&#x3D;1,jump 0x804931a &lt;phase_defused+159&gt;</span><br><span class="line">   0x08049315 &lt;+154&gt;:call   0x80487d0 &lt;__stack_chk_fail@plt&gt; &#x2F;&#x2F;调用__stack_chk_fail@plt()</span><br><span class="line">   0x0804931a &lt;+159&gt;:add    $0x8c,%esp                &#x2F;&#x2F;栈帧释放空间</span><br><span class="line">   0x08049320 &lt;+165&gt;:ret                              &#x2F;&#x2F;返回地址出栈，并跳转到返回地址</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><ul><li>查看一下炸弹拆除函数汇编代码，发现<code>0x080492f7 &lt;+124&gt;:    call   0x8048edc &lt;secret_phase&gt;</code>隐藏关卡</li><li>只有在第六关之后，而且<code>0x2c+esp</code>地址的字符串等于内置的<code>DrEvil</code>，我们才能进入隐藏关卡<ul><li>但是<code>0x804c4d0</code>什么时候被赋值的呢，我们进行调试，调试发现它是在第四关被赋值的，所以我们要将<code>DrEvil</code>放在第四关<br><img src="/2021/05/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94LAB-3_BombLab/image-20210503173426765.png" alt="image-20210503173426765"></li><li>放进之后我们成功触发了隐藏关<br><img src="/2021/05/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94LAB-3_BombLab/image-20210503173643070.png" alt="image-20210503173643070"></li></ul></li></ul><h5 id="secret-phase"><a href="#secret-phase" class="headerlink" title="secret_phase"></a><code>secret_phase</code></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Dump of assembler code for function secret_phase:     &#x2F;&#x2F;secret_phase()</span><br><span class="line">   0x08048edc &lt;+0&gt;:push   %ebx                       &#x2F;&#x2F;push ebx</span><br><span class="line">   0x08048edd &lt;+1&gt;:    sub    $0x18,%esp             &#x2F;&#x2F;栈帧预留0x18字节</span><br><span class="line">   0x08048ee0 &lt;+4&gt;:    call   0x804911d &lt;read_line&gt;  &#x2F;&#x2F;调用read_line()</span><br><span class="line">   0x08048ee5 &lt;+9&gt;:    movl   $0xa,0x8(%esp)         &#x2F;&#x2F;M(0x8+esp)&#x3D;0xa</span><br><span class="line">   0x08048eed &lt;+17&gt;:movl   $0x0,0x4(%esp)         &#x2F;&#x2F;M(0x4+esp)&#x3D;0x0</span><br><span class="line">   0x08048ef5 &lt;+25&gt;:mov    %eax,(%esp)            &#x2F;&#x2F;M(esp)&#x3D;eax&#x3D;input</span><br><span class="line">   0x08048ef8 &lt;+28&gt;:call   0x80488e0 &lt;strtol@plt&gt;&#x2F;&#x2F;调用strtol@plt(input,0x0,0xa)返回值为字符串转化的整数</span><br><span class="line">   0x08048efd &lt;+33&gt;:mov    %eax,%ebx              &#x2F;&#x2F;ebx&#x3D;eax&#x3D;input</span><br><span class="line">   0x08048eff &lt;+35&gt;:lea    -0x1(%eax),%eax        &#x2F;&#x2F;eax&#x3D;-0x1+eax</span><br><span class="line">   0x08048f02 &lt;+38&gt;:cmp    $0x3e8,%eax            &#x2F;&#x2F;compare eax with 0x3e8&#x3D;1000</span><br><span class="line">   0x08048f07 &lt;+43&gt;:jbe    0x8048f0e &lt;secret_phase+50&gt;&#x2F;&#x2F;if 0&lt;&#x3D;eax&lt;&#x3D;1000,jump 0x8048f0e &lt;secret_phase+50&gt;</span><br><span class="line">   0x08048f09 &lt;+45&gt;:call   0x80490f6 &lt;explode_bomb&gt;&#x2F;&#x2F;调用explode_bomb()</span><br><span class="line">   0x08048f0e &lt;+50&gt;:mov    %ebx,0x4(%esp)         &#x2F;&#x2F;M(0x4+esp)&#x3D;ebx</span><br><span class="line">   0x08048f12 &lt;+54&gt;:movl   $0x804c088,(%esp)      &#x2F;&#x2F;M(esp)&#x3D;0x804c088</span><br><span class="line">   &#x2F;&#x2F; 0x804c088:0x24</span><br><span class="line">   0x08048f19 &lt;+61&gt;:call   0x8048e8b &lt;fun7&gt;       &#x2F;&#x2F;调用fun7(0x804c088,ebx)</span><br><span class="line">   0x08048f1e &lt;+66&gt;:cmp    $0x5,%eax              &#x2F;&#x2F;compare eax with 0x5</span><br><span class="line">   0x08048f21 &lt;+69&gt;:je     0x8048f28 &lt;secret_phase+76&gt;  &#x2F;&#x2F;if zf&#x3D;1, jump 0x8048f28 &lt;secret_phase+76&gt;</span><br><span class="line">   0x08048f23 &lt;+71&gt;:call   0x80490f6 &lt;explode_bomb&gt; &#x2F;&#x2F;调用explode_bomb()</span><br><span class="line">   0x08048f28 &lt;+76&gt;:movl   $0x804a1e8,(%esp)       &#x2F;&#x2F;M(esp)&#x3D;0x804a1e8</span><br><span class="line">   &#x2F;&#x2F; 0x804a1e8: &quot;Wow! You&#39;ve defused the secret stage!&quot;</span><br><span class="line">   0x08048f2f &lt;+83&gt;:call   0x8048800 &lt;puts@plt&gt;    &#x2F;&#x2F;调用puts@plt(0x804a1e8)</span><br><span class="line">   0x08048f34 &lt;+88&gt;:call   0x804927b &lt;phase_defused&gt; &#x2F;&#x2F;调用phase_defused()</span><br><span class="line">   0x08048f39 &lt;+93&gt;:add    $0x18,%esp              &#x2F;&#x2F;栈帧释放空间</span><br><span class="line">   0x08048f3c &lt;+96&gt;:pop    %ebx                    &#x2F;&#x2F;出栈ebx</span><br><span class="line">   0x08048f3d &lt;+97&gt;:ret                            &#x2F;&#x2F;返回地址出栈，并跳转到返回地址</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><ul><li>如果<code>&lt;fun7&gt;</code>的返回值<code>%eax</code>如果等于5我们就能成功拆除炸弹</li><li>查看<code>fun7</code>函数</li></ul><h5 id="fun7"><a href="#fun7" class="headerlink" title="fun7"></a><code>fun7</code></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Dump of assembler code for function fun7:             &#x2F;&#x2F;fun7(address,number)</span><br><span class="line">   0x08048e8b &lt;+0&gt;:push   %ebx                       &#x2F;&#x2F;ebx入栈</span><br><span class="line">   0x08048e8c &lt;+1&gt;:sub    $0x18,%esp                 &#x2F;&#x2F;栈帧预留0x18字节的空间</span><br><span class="line">   0x08048e8f &lt;+4&gt;:    mov    0x20(%esp),%edx        &#x2F;&#x2F;edx&#x3D;M(0x20+esp)&#x3D;address</span><br><span class="line">   0x08048e93 &lt;+8&gt;:    mov    0x24(%esp),%ecx        &#x2F;&#x2F;ecx&#x3D;M(0x24+esp)&#x3D;number</span><br><span class="line">   0x08048e97 &lt;+12&gt;:test   %edx,%edx              &#x2F;&#x2F;edx &amp; edx</span><br><span class="line">   0x08048e99 &lt;+14&gt;:je     0x8048ed2 &lt;fun7+71&gt;    &#x2F;&#x2F;if zf&#x3D;1, jump 0x8048ed2 &lt;fun7+71&gt;</span><br><span class="line">   0x08048e9b &lt;+16&gt;:mov    (%edx),%ebx            &#x2F;&#x2F;ebx&#x3D;M(edx)&#x3D;*address</span><br><span class="line">   0x08048e9d &lt;+18&gt;:cmp    %ecx,%ebx              &#x2F;&#x2F;compare ebx with ecx&#x3D;number</span><br><span class="line">   0x08048e9f &lt;+20&gt;:jle    0x8048eb4 &lt;fun7+41&gt;    &#x2F;&#x2F;if ebx&lt;&#x3D;ecx&#x3D;number, jump 0x8048eb4 &lt;fun7+41&gt;</span><br><span class="line">   0x08048ea1 &lt;+22&gt;:mov    %ecx,0x4(%esp)         &#x2F;&#x2F;M(0x4+esp)&#x3D;ecx&#x3D;number</span><br><span class="line">   0x08048ea5 &lt;+26&gt;:mov    0x4(%edx),%eax         &#x2F;&#x2F;eax&#x3D;M(0x4+edx)&#x3D;*(address+4)</span><br><span class="line">   0x08048ea8 &lt;+29&gt;:mov    %eax,(%esp)            &#x2F;&#x2F;M(esp)&#x3D;eax&#x3D;*(address+4)</span><br><span class="line">   0x08048eab &lt;+32&gt;:call   0x8048e8b &lt;fun7&gt;       &#x2F;&#x2F;fun7(*(address+4),number)</span><br><span class="line">   0x08048eb0 &lt;+37&gt;:add    %eax,%eax              &#x2F;&#x2F;eax&#x3D;eax+eax</span><br><span class="line">   0x08048eb2 &lt;+39&gt;:jmp    0x8048ed7 &lt;fun7+76&gt;    &#x2F;&#x2F;jump 0x8048ed7 &lt;fun7+76&gt;</span><br><span class="line">   0x08048eb4 &lt;+41&gt;:mov    $0x0,%eax              &#x2F;&#x2F;eax&#x3D;0x0</span><br><span class="line">   0x08048eb9 &lt;+46&gt;:cmp    %ecx,%ebx              &#x2F;&#x2F;compare ebx&#x3D;*address with ecx&#x3D;number</span><br><span class="line">   0x08048ebb &lt;+48&gt;:je     0x8048ed7 &lt;fun7+76&gt;    &#x2F;&#x2F;if zf&#x3D;1, jump 0x8048ed7 &lt;fun7+76&gt;</span><br><span class="line">   0x08048ebd &lt;+50&gt;:mov    %ecx,0x4(%esp)         &#x2F;&#x2F;M(0x4+esp)&#x3D;ecx&#x3D;number</span><br><span class="line">   0x08048ec1 &lt;+54&gt;:mov    0x8(%edx),%eax         &#x2F;&#x2F;eax&#x3D;M(0x8+edx)&#x3D;*(address+8)</span><br><span class="line">   0x08048ec4 &lt;+57&gt;:mov    %eax,(%esp)            &#x2F;&#x2F;M(esp)&#x3D;eax&#x3D;*(address+8)</span><br><span class="line">   0x08048ec7 &lt;+60&gt;:call   0x8048e8b &lt;fun7&gt;       &#x2F;&#x2F;调用fun7(*(address+8),number)</span><br><span class="line">   0x08048ecc &lt;+65&gt;:lea    0x1(%eax,%eax,1),%eax  &#x2F;&#x2F;eax&#x3D;0x1+eax+eax</span><br><span class="line">   0x08048ed0 &lt;+69&gt;:jmp    0x8048ed7 &lt;fun7+76&gt;    &#x2F;&#x2F;jump 0x8048ed7 &lt;fun7+76&gt;</span><br><span class="line">   0x08048ed2 &lt;+71&gt;:mov    $0xffffffff,%eax       &#x2F;&#x2F;返回值eax&#x3D;-1</span><br><span class="line">   0x08048ed7 &lt;+76&gt;:add    $0x18,%esp             &#x2F;&#x2F;栈帧释放空间</span><br><span class="line">   0x08048eda &lt;+79&gt;:pop    %ebx                   &#x2F;&#x2F;出栈ebx</span><br><span class="line">   0x08048edb &lt;+80&gt;:ret                           &#x2F;&#x2F;返回地址出栈，并跳转到返回地址</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><ul><li><p>我们将<code>fun7</code>翻译成c语言函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun7</span><span class="params">(<span class="keyword">int</span> *address, <span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (address == null)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span> (*address &lt;= number) &#123;</span><br><span class="line"><span class="keyword">if</span> (*address == number )</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="number">2</span> * fun7(*(address + <span class="number">8</span>), number) + <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line"><span class="number">2</span> * fun7(*(address + <span class="number">4</span>), number);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>因为返回值要为5，推导：0-&gt;1-&gt;2-&gt;5，所以地址变化：加8、加4、加8，依次查看，答案是<code>0x2f=47</code><br><img src="/2021/05/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94LAB-3_BombLab/image-20210503163503472.png" alt="image-20210503163503472"></p></li><li><p>这个过程其实是：36&lt;=47地址加8，50&gt;47小地址加4，45&lt;=47地址加8，47=47返回值为0<br><img src="/2021/05/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94LAB-3_BombLab/image-20210503181401052.png" alt="image-20210503181401052"></p></li><li><p>完成验证<br><img src="/2021/05/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94LAB-3_BombLab/image-20210503160027467.png" alt="image-20210503160027467"></p></li></ul><h2 id="第一次总结"><a href="#第一次总结" class="headerlink" title="第一次总结"></a>第一次总结</h2><p><code>bomb lab</code>这个实验让我对<code>gdb</code>调试更加熟悉，对于汇编代码不至于每一个都要去查，这实验还是很有用处的。</p><p>问题总是出现在函数的参数、各种跳转上，其实还是对寄存器、内存地址以及栈帧的认识不够，还需继续努力。</p><p>第一次做的时候连栈帧图都不会画，所以不仅做得效率低下而且也不太明白。</p><p><strong>为了更加好看，正在对过程的重写中。。。。</strong></p><h2 id="第二次总结"><a href="#第二次总结" class="headerlink" title="第二次总结"></a>第二次总结</h2><p>即将进行实验验收，今天终于完成了对炸弹实验过程的重写。</p><p>这个过程之所以写的这么详细，不只是过关，其实也是为了加强自己对汇编代码的阅读和理解能力。</p><p>总之，这个实验花了很久的时间，同样也收获了很多。</p><p><strong>完结撒花！</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;深入理解计算机系统——LAB-3-Bomb-Lab&quot;&gt;&lt;a href=&quot;#深入理解计算机系统——LAB-3-Bomb-Lab&quot; class=&quot;headerlink&quot; title=&quot;深入理解计算机系统——LAB-3_Bomb_Lab&quot;&gt;&lt;/a&gt;深入理解计算机系统——</summary>
      
    
    
    
    <category term="CS:APP" scheme="https://sun-ruijiang.github.io/categories/CS-APP/"/>
    
    
    <category term="LAB" scheme="https://sun-ruijiang.github.io/tags/LAB/"/>
    
    <category term="课程作业" scheme="https://sun-ruijiang.github.io/tags/%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A/"/>
    
  </entry>
  
  <entry>
    <title>FIFO+HM62256电路+双FIFO缓冲</title>
    <link href="https://sun-ruijiang.github.io/2021/05/11/FIFO+HM62256%E7%94%B5%E8%B7%AF+%E5%8F%8CFIFO%E7%BC%93%E5%86%B2/"/>
    <id>https://sun-ruijiang.github.io/2021/05/11/FIFO+HM62256%E7%94%B5%E8%B7%AF+%E5%8F%8CFIFO%E7%BC%93%E5%86%B2/</id>
    <published>2021-05-10T16:00:00.000Z</published>
    <updated>2021-05-11T10:14:02.374Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2021/05/11/FIFO+HM62256%E7%94%B5%E8%B7%AF+%E5%8F%8CFIFO%E7%BC%93%E5%86%B2/0001.jpg" alt="0001"></p><p><img src="/2021/05/11/FIFO+HM62256%E7%94%B5%E8%B7%AF+%E5%8F%8CFIFO%E7%BC%93%E5%86%B2/0002.jpg" alt="0002"></p><p><img src="/2021/05/11/FIFO+HM62256%E7%94%B5%E8%B7%AF+%E5%8F%8CFIFO%E7%BC%93%E5%86%B2/0003.jpg" alt="0003"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2021/05/11/FIFO+HM62256%E7%94%B5%E8%B7%AF+%E5%8F%8CFIFO%E7%BC%93%E5%86%B2/0001.jpg&quot; alt=&quot;0001&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/05/11/F</summary>
      
    
    
    
    <category term="Others" scheme="https://sun-ruijiang.github.io/categories/Others/"/>
    
    
    <category term="课程作业" scheme="https://sun-ruijiang.github.io/tags/%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A/"/>
    
  </entry>
  
  <entry>
    <title>健康打卡</title>
    <link href="https://sun-ruijiang.github.io/2021/05/10/%E5%81%A5%E5%BA%B7%E6%89%93%E5%8D%A1/"/>
    <id>https://sun-ruijiang.github.io/2021/05/10/%E5%81%A5%E5%BA%B7%E6%89%93%E5%8D%A1/</id>
    <published>2021-05-09T16:00:00.000Z</published>
    <updated>2021-06-01T13:00:34.337Z</updated>
    
    <content type="html"><![CDATA[<h1 id="健康打卡"><a href="#健康打卡" class="headerlink" title="健康打卡"></a>健康打卡</h1><blockquote><p>截止目前，乐跑才3次。。。明天乐跑要跑起来了！</p><p>立个flag！每天跑1.6公里，走也得走完！每周一结！</p></blockquote><h2 id="第一周（5-10——5-16）"><a href="#第一周（5-10——5-16）" class="headerlink" title="第一周（5.10——5.16）"></a>第一周（5.10——5.16）</h2><ul><li><p>5月10日</p><blockquote><p>晚九点夜跑，2.5公里配速接近7分，最后冲刺一圈，差点死在荫马塘。</p><p>感受：</p><blockquote><p>明天要一定穿短裤跑步，汗流浃背是真的难受。</p><p>茶颜晚十点的人是真的少，很好。</p><p>今天跑完有点头晕，希望明天能好一点。</p></blockquote></blockquote></li><li><p>5月11日</p><blockquote><p>晚九点半夜跑，2.1公里配速7</p><p>感受：下了30秒的雨也没有阻止我，获得成就：风雨无阻！</p></blockquote></li><li><p>5月12日</p><blockquote><p>晚九点夜跑，2.3公里配速6</p><p>感受：有点心急，早早回来了，坚持！（没买到茶颜）</p></blockquote></li><li><p>5月13日</p><blockquote><p>没跑，乐公交了，配速3是真的快。</p></blockquote></li><li><p>5月14日</p><blockquote><p>打完王者晚八点半夜跑。1,6公里配速5，没去荫马塘，就在园区</p><p>感受：王者是真的累，感觉比跑步要累。。。</p><p>绕我们宿舍楼三圈就是1.6公里，没有用的冷知识get！</p></blockquote></li><li><p>5月15日</p><blockquote><p>晚九点夜跑，应该说散步，1.6公里，配速6，感觉跟散步没区别。。。</p><p>今天终于上了王者，算是没有遗憾了</p></blockquote></li><li><p>5月16日</p><blockquote><p>晚九点夜跑，散步，买夜宵。</p><p>我这个人是真的恶心:)</p></blockquote></li></ul><h2 id="第二周（5-17——5-23）"><a href="#第二周（5-17——5-23）" class="headerlink" title="第二周（5.17——5.23）"></a>第二周（5.17——5.23）</h2><ul><li><p>5月17日</p><blockquote><p>晚九点半，散步</p></blockquote></li><li><p>5月18日</p><blockquote><p>晚九点，散步</p></blockquote></li><li><p>5月19日</p><blockquote><p>晚九点，散步</p></blockquote></li><li><p>5月20日</p><blockquote><p>晚十点小班做完，极限运动，勉强完成。</p><p>不限制速度的跑步不叫跑步！</p></blockquote></li><li><p>5月21日</p><blockquote><p> 雨很大，没跑完，累成狗了配速也不够。</p><p>大半夜在楼道跑来跑去的我像个sb。</p></blockquote></li><li><p>5月22日</p><blockquote><p>晚上跑步</p></blockquote></li><li><p>5月23日</p><blockquote><p>今天好累，休息一天</p></blockquote></li></ul><h2 id="第三周（5-24——5-30）"><a href="#第三周（5-24——5-30）" class="headerlink" title="第三周（5.24——5.30）"></a>第三周（5.24——5.30）</h2><ul><li><p>5月24日</p><blockquote><p>下雨天跑回来路程不够，在天台散步了一会。</p></blockquote></li><li><p>5月25日</p><blockquote><p>晚九点散步</p></blockquote></li><li><p>5月26日</p><blockquote><p>晚10点帮舍友一起跑了</p></blockquote></li><li><p>5月27日</p><blockquote><p>今天体测，1000米耗时3min56s（老师放水），顺便刷了乐跑。</p><p>头晕脚疼，但是恢复很快，虽然还是很弱，但也算是这几天有所提升吧。</p></blockquote></li><li><p>5月28日</p><blockquote><p>晚九点半跑步，买夜宵。</p></blockquote></li><li><p>5月29日</p><blockquote><p>有跑</p></blockquote></li><li><p>5月30日</p><blockquote><p>跑了</p></blockquote></li></ul><h2 id="第四周（5-31——6-6）"><a href="#第四周（5-31——6-6）" class="headerlink" title="第四周（5.31——6.6）"></a>第四周（5.31——6.6）</h2><ul><li><p>5月31日</p><blockquote><p>坐公交车了。。</p></blockquote></li><li><p>6月1日</p><blockquote><p>买茶颜顺便跑了</p><p>发现人果然是活在当下的生物，昨天的我和今天的我完全不是一个人</p></blockquote></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;健康打卡&quot;&gt;&lt;a href=&quot;#健康打卡&quot; class=&quot;headerlink&quot; title=&quot;健康打卡&quot;&gt;&lt;/a&gt;健康打卡&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;截止目前，乐跑才3次。。。明天乐跑要跑起来了！&lt;/p&gt;
&lt;p&gt;立个flag！每天跑1.6公里，走也</summary>
      
    
    
    
    <category term="life" scheme="https://sun-ruijiang.github.io/categories/life/"/>
    
    
    <category term="打卡" scheme="https://sun-ruijiang.github.io/tags/%E6%89%93%E5%8D%A1/"/>
    
  </entry>
  
  <entry>
    <title>数据通信实验报告</title>
    <link href="https://sun-ruijiang.github.io/2021/05/06/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/"/>
    <id>https://sun-ruijiang.github.io/2021/05/06/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/</id>
    <published>2021-05-05T16:00:00.000Z</published>
    <updated>2021-05-09T09:53:47.749Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据通信实验报告"><a href="#数据通信实验报告" class="headerlink" title="数据通信实验报告"></a>数据通信实验报告</h1><p><img src="/2021/05/06/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/0001.jpg" alt="0001"></p><p><img src="/2021/05/06/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/0002.jpg" alt="0002"></p><p><img src="/2021/05/06/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/0003.jpg" alt="0003"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数据通信实验报告&quot;&gt;&lt;a href=&quot;#数据通信实验报告&quot; class=&quot;headerlink&quot; title=&quot;数据通信实验报告&quot;&gt;&lt;/a&gt;数据通信实验报告&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2021/05/06/%E6%95%B0%E6%8D%AE%E9%80</summary>
      
    
    
    
    <category term="Others" scheme="https://sun-ruijiang.github.io/categories/Others/"/>
    
    
    <category term="课程作业" scheme="https://sun-ruijiang.github.io/tags/%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A/"/>
    
  </entry>
  
  <entry>
    <title>深入理解计算机系统——基础知识</title>
    <link href="https://sun-ruijiang.github.io/2021/05/03/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>https://sun-ruijiang.github.io/2021/05/03/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</id>
    <published>2021-05-02T16:00:00.000Z</published>
    <updated>2021-06-01T13:13:50.950Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深入理解计算机系统——基础知识"><a href="#深入理解计算机系统——基础知识" class="headerlink" title="深入理解计算机系统——基础知识"></a>深入理解计算机系统——基础知识</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>为了方便我查询一些我可能会忘记的基础知识，我写下这篇博客</p><p>中间可能有自己的一些经验看法</p><p>以下的知识没有先后顺序，用时特定自查</p><h2 id="通用寄存器"><a href="#通用寄存器" class="headerlink" title="通用寄存器"></a>通用寄存器</h2><p><img src="/2021/05/03/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20210503221648779.png" alt="image-20210503221648779"></p><ul><li><p><code>EAX</code> 是”累加器”(accumulator)，它是很多<strong>加法乘法</strong>指令的<strong>缺省寄存器</strong>。</p></li><li><p><code>EBX</code> 是”基地址”(base)寄存器，在<strong>内存寻址</strong>时存放<strong>基地址</strong>。</p></li><li><p><code>ECX</code> 是计数器(counter)，是重复(<strong>REP</strong>)前缀指令和<strong>LOOP</strong>指令的<strong>内定计数器</strong>。</p></li><li><p><code>EDX </code>则总是被用来放<strong>整数除法</strong>产生的<strong>余数</strong>。</p></li><li><p><code>ESI/EDI</code> 分别叫做”源/目标索引寄存器”(source/destination index)，因为在很多<strong>字符串操作</strong>指令中，<code>DS:ESI</code>指向<strong>源串</strong>,而<code>ES:EDI</code>指向<strong>目标串</strong>.</p></li><li><p><code>EBP</code> 是”基址指针”(BASE POINTER)，它最经常被用作高级语言函数调用的”<strong>框架指针</strong>“(frame pointer)， 在破解的时候,经常可以看见一个标准的函数起始代码（左为目标寄存器）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">push ebp ;保存前一个函数帧指针ebp</span><br><span class="line">mov ebp,esp ;EBP设为当前帧指针</span><br><span class="line">sub esp, xxx ;预留xxx字节给函数临时变量.</span><br></pre></td></tr></table></figure></li></ul><ul><li><code>ESP</code> 专门用作堆栈指针，被形象地称为<strong>栈顶指针</strong>，堆栈的顶部是地址小的区域，压入堆栈的数据越多，<strong>ESP也就越来越小</strong>。在<strong>32位系统</strong>中，<code>ESP</code><strong>每次减少4字节</strong>。</li><li>使用惯例：<code>eax</code>,<code>edx</code>,<code>ecx</code>被划分为<strong>调用者</strong>保存寄存器；<code>ebx</code>,<code>esi</code>,<code>edi</code>被划分为<strong>被调用者</strong>保存寄存器</li></ul><h2 id="专用寄存器"><a href="#专用寄存器" class="headerlink" title="专用寄存器"></a>专用寄存器</h2><ul><li><p><code>EIP</code>指令指针（Instruction Pointer.）。代码段中下一个指令的指针。自动更新。</p></li><li><p><code>ESP</code>堆栈指针（Stack pointer.）。指针指向栈顶（在<code>SS</code>（Stack Segment）栈段寄存器）。与POP、PUSH、CALL等指令一起使用</p></li></ul><h2 id="段寄存器"><a href="#段寄存器" class="headerlink" title="段寄存器"></a>段寄存器</h2><table><thead><tr><th>寄存器名</th><th>寄存器功能</th></tr></thead><tbody><tr><td>CS</td><td>Code Segment. 代码段</td></tr><tr><td>DS</td><td>Data Segment. 数据段</td></tr><tr><td>SS</td><td>Stack Segment. 栈堆段</td></tr><tr><td>ES</td><td>Extra Data Segment. 额外数据段</td></tr><tr><td>FS</td><td>Extra Data Segment.额外数据段</td></tr><tr><td>GS</td><td>Extra Data Segment.额外数据段</td></tr></tbody></table><h2 id="EFLAGS寄存器"><a href="#EFLAGS寄存器" class="headerlink" title="EFLAGS寄存器"></a>EFLAGS寄存器</h2><p><code>EFLAGS(program status and control) register</code>主要用于<strong>提供程序的状态</strong>及<strong>进行相应的控制</strong></p><p><code>EFLAGS</code> 标志。<code>cpu</code>中各种条件的状态。 <code>EFLAGS</code>寄存器的各个位的用途如下所述：</p><p><img src="/2021/05/03/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20210508092423969.png" alt="image-20210508092423969"></p><ul><li><code>00 Carry (CF)</code>：保存加法后的进位或者减法后的借位。 也指示错误情况。</li><li><code>02 Parity (PF)</code>：奇数位数为0，偶数位数为1。<code>80x86</code>的过时功能。</li><li><code>04 Auxiliary Carry (AF)</code>：BCD加法或者减法后，<code>DAA</code>和<code>DAS</code>指令使用的高度专用标志。</li><li><code>06 Zero (ZF)</code>：如果算术或逻辑指令的结果为0，则<code>ZF</code>为1。</li><li><code>07 Sign (SF)</code>：如果算术或逻辑指令的结果符号为负，则<code>SF</code>为1。</li><li><code>08 Trap (TF)</code>：陷阱使能。微处理器在调试和控制寄存器指示的条件下中断指令流。</li><li><code>09 Interrupt (IF)</code>：控制<code>INTR</code>(Interrupt request)引脚的操作。如果为1，中断使能。由<code>STI</code>和<code>CLI</code>指令设置。</li><li><code>10 Direction (DF)</code>：指定在<strong>字符串指令</strong>期间<code>DI</code>和/或<code>SI</code>寄存器的<strong>递增或递减模式</strong>。如果<code>DF</code>为1，寄存器<strong>自动递减</strong>。由<code>STD</code>和<code>CLD</code>指令设定。</li><li><code>11 Overflow (OF)</code>：为加法和减法指令设置。</li><li><code>12 and 13 I/O privilege level (IOPL)</code>：保持代码必须运行的特权级别，以便执行任何与输入输出相关的指令。00是最高的。</li><li><code>14 Trap Nested Task (NT)</code>：当一个系统任务在保护模式下通过<code>call</code>指令调用另一个系统任务时设置。</li></ul><p><img src="/2021/05/03/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20210508102645978.png" alt="image-20210508102645978"></p><ul><li>下半部分不记录了，用不到</li></ul><h2 id="一些容易忽略的指令"><a href="#一些容易忽略的指令" class="headerlink" title="一些容易忽略的指令"></a>一些容易忽略的指令</h2><ul><li><p><code>call</code>指令：过程调用，将返回地址入栈，并跳转到被调用过程的起始处。返回地址就是紧跟在<code>call</code>后的那条指令的地址。</p></li><li><p><code>ret</code>指令：从过程调用中返回，将返回地址出栈，并跳转到返回地址。</p></li><li><p><code>push</code>指令：入栈，<code>esp</code>减4字节，操作数就是入栈的数据</p></li><li><p><code>pop</code>指令：出栈，<code>esp</code>加4字节，操作数就是出栈的数据保存的地址</p></li><li><p><code>cmp</code>指令：比较指令，<code>cmp s2,s1</code>基于<code>s1-s2</code>，只设置条件码</p></li><li><p><code>test</code>指令：测试指令，<code>test s2,s1</code>基于<code>s1&amp;s2</code>，只设置条件码</p></li><li><p><code>leave</code>指令：为返回准备栈，等价于</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">movl  %ebp,%esp            &#x2F;&#x2F;栈指针设置为帧指针</span><br><span class="line">popl  %ebp                 &#x2F;&#x2F;ebp存储一开始被保存的旧的ebp,esp指向返回地址的节点</span><br></pre></td></tr></table></figure></li></ul><h2 id="栈帧图"><a href="#栈帧图" class="headerlink" title="栈帧图"></a>栈帧图</h2><p><img src="/2021/05/03/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/OIP.we3zQsK494hBkOLbzxQIiwHaFH" alt="img"></p><p>用c语言描述函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">( (<span class="keyword">void</span>)arrgument <span class="number">1</span>, (<span class="keyword">void</span>)arrgument <span class="number">2</span>, ....... ,(<span class="keyword">void</span>)arrgument n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> local variable <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">void</span> local variable <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">void</span> local variable <span class="number">3</span>;</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">void</span> local variable n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图中的地址从上往下递减的，栈顶在下，栈底在上。</p><p><code>Return address</code>和<code>Previous frame pointer</code>分别是<strong>返回地址</strong>和<strong>调用者的帧指针</strong>。</p><h2 id="跳转指令"><a href="#跳转指令" class="headerlink" title="跳转指令"></a>跳转指令</h2><table><thead><tr><th align="center">指令</th><th align="center">功能</th><th align="center">条件</th></tr></thead><tbody><tr><td align="center"><code>JE</code></td><td align="center">相等则跳转</td><td align="center"><code>ZF</code>=1</td></tr><tr><td align="center"><code>JNE</code></td><td align="center">不相等则跳转</td><td align="center"><code>ZF</code>=0</td></tr><tr><td align="center"><code>JA</code></td><td align="center">无符号大于则跳转</td><td align="center"><code>CF</code>=0 and<code>ZF</code>=0</td></tr><tr><td align="center"><code>JG</code></td><td align="center">有符号大于则跳转</td><td align="center"></td></tr><tr><td align="center"><code>JS</code></td><td align="center">为负则跳转</td><td align="center"></td></tr><tr><td align="center"><code>jle</code></td><td align="center">有符号小于或者等于跳转</td><td align="center"></td></tr><tr><td align="center"><code>JGE</code></td><td align="center">有符号大于或等于跳转</td><td align="center"></td></tr><tr><td align="center"><code>JBE</code></td><td align="center">无符号小于等于则跳转</td><td align="center"></td></tr></tbody></table><h2 id="优化程序性能"><a href="#优化程序性能" class="headerlink" title="优化程序性能"></a>优化程序性能</h2><p><strong>程序优化的第一步</strong>就是<strong>消除不必要的内容</strong>，让代码尽可能有效地执行它期望的工作。<strong>这包括消除不必要的函数调用、条件测试和存储器引用</strong>。使用<strong>图形数据流表示法</strong>，可以使处理器对指令的执行形象化，我们还可以利用它预测程序的性能。、</p><p><strong>程序优化的第二步</strong>，<strong>利用处理器提供的指令级并行能力，同时执行多条指令</strong>。</p><p><strong>Amdahl定律</strong>，可以量化对系统某个部分进行优化所带来的整体效果。<strong>主要思想</strong>是当我们加快系统一个部分的速度时，对系统整体性能的影响依赖于<strong>这个部分有多重要</strong>和<strong>速度提高了多少</strong>。所以<strong>要想大幅度提高系统的速度，我们必须按提高系统很大一部分的速度。</strong></p><p><strong>关键路径</strong>是在循环的反腐执行过程中形成的<strong>数据相关链</strong>，常常通过确认关键路径来决定<strong>执行一个循环所需要的时间</strong>。</p><p><strong>存储器别名使用</strong>是指两个指针可能同时指向同一个存储器的位置的情况。在只考虑执行安全的优化中，编译器必须假设不同的指针可能会指向存储器的同一个位置，这造成了<strong>第一个妨碍优化的因素</strong>，这也是可能严重限制编译器产生优化代码机会的程序的一个方面。如果编译器不能确定指针的指向，它就会假设所有的情况都有可能，所以我们需要做的就是在<strong>编写程序的时候明确指针的指向</strong>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*q=y; *p=x;</span><br><span class="line">t1=*q;      <span class="comment">//t1= x or y?</span></span><br></pre></td></tr></table></figure><p><strong>函数调用</strong>是<strong>第二个妨碍优化的因素</strong>。尽可能减少函数的调用可以优化程序，但是编译器会假设最糟糕的情况，并<strong>保持所有的函数调用不变</strong>。所以，我们需要在<strong>编写程序的时候将函数调用的次数尽可能减少</strong>，这件事情只能coder来做，编译器为了安全是不会去做的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> f() + f() + f() + f();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">4</span> * f();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 这两个函数看似得到的是同一个结果，而且fun2函数明显要优于fun1，因为函数调用次数少。 */</span></span><br><span class="line"><span class="comment">/* 如果f()代码如下    */</span></span><br><span class="line"><span class="keyword">int</span> counter=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> counter++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 因为f改变了全局变量counter，所以fun1和fun2的功能完全不同，分别是return (0+1+2+3)和return 4*0</span></span><br><span class="line"><span class="comment">** 所以，我们不能期望编译器自己将fun1改变成fun2去优化程序，因为这种情况不安全     </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>用内联函数优化函数调用</strong>是指<strong>将函数调用替换为函数体</strong>。这样做既<strong>减少函数调用的开销</strong>，也允许对展开的函数做<strong>进一步的优化</strong>。</p><p><strong>每元素的周期数</strong>（Cycles Per Element ，<strong>CPE</strong>）作为<strong>程序性能的度量标准</strong>。它的计算过程是：先得到函数的元素个数和周期的散点图，后经过<strong>最小二乘方拟合</strong>得到折线图，其中<strong>折线的斜率</strong>表明<strong>每元素的周期数CPE</strong>。</p><p><strong>消除循环的低效率</strong>，<code>for(i=0;i&lt;vec_length();i++)</code>调用函数作为循环的测试条件，意味着我们需要调用很多次函数，这是非常低效的。<strong>代码移动</strong>可以优化事变要执行很多次却不改变计算结果的计算，在本例中，我们将<strong>循环内部的的函数调用移到循环前面</strong>。</p><p><strong>减少过程调用</strong>，还是减少循环中函数的调用，这次是<strong>用数组直接取值来代替用函数取值</strong>。</p><p><strong>消除不必要的存储器引用</strong>，直接用指针来取值会对<strong>存储器</strong>进行读出或写入的操作，我们用<strong>临时变量来代替指针取值</strong>，可以直接在<strong>寄存器</strong>上操作，这会大大增强函数性能。</p><h2 id="算术运算的延迟和发射时间"><a href="#算术运算的延迟和发射时间" class="headerlink" title="算术运算的延迟和发射时间"></a>算术运算的延迟和发射时间</h2><p><img src="/2021/05/03/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20210524204719636.png" alt="image-20210524204719636"></p><h2 id="利用微处理器微体系结构的优化"><a href="#利用微处理器微体系结构的优化" class="headerlink" title="利用微处理器微体系结构的优化"></a>利用微处理器微体系结构的优化</h2><p><strong>指令级并行</strong>指，在实际的处理器中，是<strong>同时对多条指令求值</strong>。在代码级上，似乎是一次执行一条指令，每条指令都包括从寄存器或存储器取值，执行一个操作，并把结果存回到一个寄存器或存储器位置。但是复杂奇异的微处理器结构让多条指令可以并行地执行，同时又呈现一种简单地顺序执行指令的表象。</p><p><img src="/2021/05/03/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20210522105640532.png" alt="image-20210522105640532"></p><p><strong>两种界限描述了程序的最大性能</strong>：</p><ul><li><strong>延迟界限</strong>：当一系列操作必须严格顺序执行时，就会遇到延迟界限，因为在下一条指令开始前，这条指令必须结束。给出了函数所需要的最小CPE值。</li><li><strong>吞吐量界限</strong>：刻画了处理器功能单元的原始计算能力。这个界限是程序性能的终极限制。</li></ul><p><strong>分支预测技术</strong>，分支是指<strong>条件转移指令</strong>，现代处理器会猜测是否会选择分支，同时还预测分支的目标地址。使用<strong>投机执行</strong>的技术，处理器会开始取出位于它预测的分支会跳到的地方的指令，并对指令译码，甚至在它确定分支预测是否正确之前就开始执行这些操作。如<strong>果预测错误</strong>，会将状态重新设置到分支点的状态，并开始取出和执行另一个方向上的指令。</p><p><strong>边界检查</strong>是通过条件语句判断的，所以利用<strong>分支预测技术</strong>可以让处理器预测分支结果，不会让边界检查对程序执行中关键路径的指令取值和处理产生太大影响。所以<strong>不要过分关心可预测的分支</strong>。</p><p>对于<strong>本质上无法预测的情况</strong>，如果编译器能够产生使用<strong>条件数据传送</strong>而不是<strong>条件控制转移</strong>的代码，可以极大提高程序的性能。</p><p><strong>每个运算都是由两个周期计数值来刻画的：</strong></p><ul><li><strong>延迟</strong>：表示完成运算所需要的总时间。</li><li><strong>发射时间</strong>：表示两个连续的同类型运算之间需要的最小时钟周期数，发射时间的倒数是这个功能单元的最大吞吐量。</li><li><strong>我理解的延迟和发射时间</strong>：因为使用<strong>流水线</strong>实现运算，所以延迟是指<strong>完成一个流水线所需要的周期数</strong>，而发射时间指的是在流水线开始后，<strong>完成一个运算所需要的时钟周期数</strong>，它的倒数就是指每个周期可以完成多少运算，也就是功能单元的最大吞吐量。例如：整数加法的发射时间是0.33倒数是3，延迟是1，它有能力每个周期执行三个加法，但如果只执行一个加法，那时间还是一个周期。</li></ul><p><strong>完全流水化的功能单元</strong>是指发<strong>射时间为1的功能单元</strong>，每个时钟周期可以开始一个新的运算，</p><p>程序的<strong>数据流表示</strong>，作为分析在现代处理器上执行的机器级程序性能的一个工具，这是一种图形化的表示方法，展示了不同操作之间的<strong>数据相关</strong>是如何<strong>限制它们的执行顺序</strong>的。这种限制形成了图中的<strong>关键路径</strong>，这是<strong>执行一组机器指令所需时钟周期数的一个下界</strong>。</p><p> <strong>从机器级代码到数据流图：</strong></p><ul><li><strong>机器级代码</strong><br><img src="/2021/05/03/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20210522120656135.png" alt="image-20210522120656135"></li><li><strong>第一步</strong>，<strong>将机器级代码译码成操作</strong>。如图所示：<strong>左边的</strong>方框和线给出各个指令是如何使用和更新寄存器的，<strong>顶部的</strong>方框表示开始时的寄存器值，<strong>底部的</strong>方框表示最后寄存器的值，<strong>右边的</strong>是各种操作，<strong>弧线</strong>表示操作产生的不对应于任何寄存器的值，相连的两个操作具有相关性（A-&gt;B，指必须等A结束，B才能进行）。</li></ul><p><img src="/2021/05/03/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20210522121059669.png" alt="image-20210522121059669"></p><ul><li><strong>第二步</strong>，<strong>将操作抽象城数据流图</strong>。<strong>重新排列操作符</strong>，更清晰地表明了从顶部<strong>源寄存器</strong>（只读寄存器和循环寄存器）到底部<strong>目的寄存器</strong>（只写寄存器和循环寄存器）的<strong>数据流</strong>。如图所示：白色操作符表示无关操作符（不属于某个循环寄存器之间的相关链），蓝色操作符则相反。</li></ul><p><img src="/2021/05/03/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20210522121658954.png" alt="image-20210522121658954"></p><ul><li><strong>第三步</strong>，<strong>消除了白色的操作符，只保留了循环寄存器</strong>。所以<strong>两大数据相关链条</strong>是：mul对程序值acc的修改、add对程序值i的修改。因为整数加法延迟1个周期，而单精度乘法延迟为4个周期，所以<strong>关键路径</strong>是mul对acc的修改，因为另一条链不会制约程序性能。<br><img src="/2021/05/03/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20210522124136039.png" alt="image-20210522124136039"></li><li><strong>最后</strong>，我们将循环扩展，并将关键路径标出，得到数据流图。从图中我们看到，<strong>关键路径长为L*n</strong>，也就是说程序至少需要L*n个周期才能执行完。除了整数加法之外，测量出的CPE也确实等于<strong>运算的延迟 L</strong>。<br><img src="/2021/05/03/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20210522160424013.png" alt="image-20210522160424013"></li></ul><p>除了<strong>关键路径</strong>之外，还有其他的<strong>影响性能因素</strong>，包括<strong>可用的功能单元的数量</strong>和任何一步中<strong>功能单元之间能够传递数据值的数量</strong>，这也是为什么<strong>整数加法</strong>不等于<strong>关键路径期望的CPE</strong>。</p><p>看上去，延迟界限是基本的界限，限制了合并运算能执行的速度。接下来的优化是调整操作的结构，增强指令级并行性。</p><p>我们想对程序做变换，使得唯一的限制变成吞吐量界限。</p><p><strong>循环展开</strong>是一种程序变换，<strong>通过增加每次迭代计算的元素的数量，减少循环的迭代次数</strong>。<strong>首先，</strong>它减少了不直接有助于程序结果的操作的数量，例如循环索引计算和条件分支。<strong>其次，</strong>它提供了一些方法（例如<strong>重关联变换优化</strong>，就是改变值合并的顺序），可以进一步变化代码，减少整个计算中关键路径上的操作数量。</p><p><strong>提高并行性</strong>，因为<strong>数据相关</strong>，虽然<strong>功能单元</strong>能够做到<strong>采用流水线一个周期开始一个新的操作</strong>，但是它只会<strong>每L（延迟）个周期开始一个新的操作</strong>。我们需要打破这种顺序相关，得到比延迟界限更好性能的方法。</p><ul><li><strong>多个累计变量</strong>，<strong>多个关键路径并行</strong>，这种方法利用了<strong>功能单元的流水线</strong>能力。在k更大一些，CPE不会更低是因为功能单元已经在最大负荷下工作了，也就是吞吐量界限。</li><li><strong>重新结合变换</strong>，<strong>减少关键路径上操作的数量</strong>，另一种打破顺序相关从而使性能提高到延迟界限之外的方法。另一条数据相关链可以很快得进行处理，不会影响程序性能。样例中<code>(x * array[n-1]) * array[n] =&gt; x * (array[n-1] * array[n]) </code></li></ul><h2 id="理解存储器性能"><a href="#理解存储器性能" class="headerlink" title="理解存储器性能"></a>理解存储器性能</h2><p><strong>加载操作对性能的影响</strong></p><ul><li><p>加载操作是将内存中的数据读出到寄存器中。</p></li><li><p>一个包含加载操作的程序的性能既依赖于流水线的能力，也依赖于加载单元的延迟。</p></li><li><p>由于加载单元的每个时钟周期只能启动一条加载操作，所以CPE不可能小于1。</p></li><li><p>对于每个被计算的元素必须加载k个值的应用，我们不可能获得低于k的CPE</p></li><li><p>计算当前加载地址，需要先获取上一轮的地址，由此加载操作之间就存在数据相关，就需要考虑加载延迟了</p></li></ul><p><strong>存储操作对性能的影响</strong></p><ul><li>存储操作是将寄存器中的数据保存到内存中，所以存储操作不会产生数据相关，但是存储操作会影响加载操作，出现<strong>写/读相关</strong></li><li>首先需要先了解加载和存储单元的细节。在存储单元中会有一个<strong>存储缓冲区</strong>，用来保存发射到存储单元但是还未保存到数据高速缓存的存储操作的地址和数据，由此避免存储操作之间的等待。</li><li>加载操作会检查存储缓冲区中是否有需要的地址，如果有，则直接将存储缓冲区中的数据作为加载操作的结果。</li><li>要在更大范围观察<strong>写/读相关</strong>，不一定存在一个迭代中，可能在相邻迭代中，只要发现<strong>有存储操作，而后执行相同地址的加载操作</strong>，就会有写/读相关，<strong>必须等存储操作进行完成，才能进行加载操作</strong>。</li></ul><h2 id="存储器层次"><a href="#存储器层次" class="headerlink" title="存储器层次"></a>存储器层次</h2><p><strong>存储器层次的中心思想</strong>，对于每个位于k层的更快、更小的存储设备<strong>作为</strong>位于k+1层的更大、更慢的存储设备的<strong>缓存</strong>。</p><p><strong>存储层次为什么有效？</strong>由于<strong>局部性</strong>，相对于层次 k+1 的数据，程序趋向于更<strong>频繁访问层次 k 的数据</strong>。因此，允许层次 k+1 的存取速度更慢，空间更大，单位价格更便宜。</p><p><img src="/2021/05/03/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20210522203909444.png" alt="image-20210522203909444"></p><p>这种<strong>存储层次</strong>构建了一个<strong>价格接近最底层存储层次</strong>、<strong>大容量存储</strong>，而<strong>读取数据的速率接近最顶层</strong>的<strong>存储层次</strong>。</p><p><strong>读吞吐率 ( 读带宽 )</strong> ：单位时间从<strong>存储器读出字节</strong>的数量 (MB/s)</p><p><strong>存储器山：</strong> <strong>读带宽</strong>的时间和<strong>空间局部性</strong>的二维函数</p><p><img src="/2021/05/03/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20210522225311861.png" alt="image-20210522225311861"></p><h2 id="RAM随机访问存储器"><a href="#RAM随机访问存储器" class="headerlink" title="RAM随机访问存储器"></a>RAM随机访问存储器</h2><p>SRAM静态随机访问存储器，一个六晶体管电路实现，更贵更快。</p><p>DRAM动态随机访问存储器，一个电容和一个访问晶体管组成，便宜速度慢。</p><p><img src="/2021/05/03/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20210522205457630.png" alt="image-20210522205457630"></p><h2 id="高速缓存cache"><a href="#高速缓存cache" class="headerlink" title="高速缓存cache"></a>高速缓存cache</h2><p><img src="/2021/05/03/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20210522214639517.png" alt="image-20210522214639517"></p><p>CPU向cache<strong>请求数据块</strong>，会发生两种情况：</p><ul><li><p><strong>命中：</strong>我们需要的<strong>数据块存在于高速缓存中</strong>，就命中了。</p></li><li><p><strong>不命中：</strong>我们需要的<strong>数据块不在cache中</strong>，需要在下一层存储器层次（主存等）中去找，称为不命中。</p><ul><li><strong>冷不命中：</strong>如果<strong>k层缓存是空的</strong>，则对任何数据的访问都是不命中的。属于<strong>短暂事件</strong>，在缓存暖身后不会出现。</li><li><strong>冲突不命中：</strong><ul><li><strong>k层缓存</strong>比k +1层缓存空间更小，<strong>只能存放k+1层缓存数据块的子集</strong> 。<br>例如，k+1层的块 i 必须放在 k层 的 (i mod 4) 块中 （严格放置策略），</li><li>缓存够大，但是<strong>所需的多个数据块都被映射到同一个缓存块</strong>中，导致一直发生<strong>冲突不命中</strong><br>例如，块0和块8映射到同一个缓存块，反复引用块 0, 8, 0, 8, 0, 8, … 那么每次都会产生冲突</li></ul></li><li><strong>容量不命中：</strong>如果程序执行时，因为<strong>请求的数据块大小超过cache大小</strong>，所需的块不能全部调入Cache 中，则<strong>当某些块被替换后，若又重新被访问，就会发生失效</strong>。这种失效称为<strong>容量失效</strong>。</li></ul></li></ul><p><strong>不命中率：</strong>不命中次数所占的百分比。具体计算：</p><ul><li>在c语言中，数组是以<strong>行优先的方式</strong>去保存在存储器中的。</li><li>如果我们按<code>a[0][0]、a[0][1]、......、a[0][n]</code>的顺序去访问或者读取，那么强制不命中率=单个元素字节数/cache数据块大小</li><li>如果我们按<code>a[0][0]、a[1][0]、......、a[n][0]</code>的顺序去访问或者读取，那么强制不命中率=100%</li><li>若Cache<strong>命中</strong>时间是<strong>1周期</strong>，则其<strong>不命中</strong>处罚时间达到<strong>100周期</strong>，所以<strong>命中率为97%和99%<strong>的</strong>周期数分别是2和4</strong>，差距很大。</li></ul><p><strong>当把一个数据块调入高一层(靠近CPU)存储器时，可以放在哪些位置上？（映像规则）</strong>，一共有三种：</p><ul><li><strong>全相联映像</strong>：主存中的任一块可以被放置到Cache中的<strong>任意一个位置</strong>。空间利用率最高，冲突概率最低，实现最复杂。<br><img src="/2021/05/03/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20210522214311584.png" alt="image-20210522214311584"><br><strong>全相连Cache：</strong>S=1，只有一组，包括所有的行</li><li><strong>直接映象</strong>：主存中的每一块只能被放置到Cache中<strong>唯一的一个位置</strong>。空间利用率最低，冲突概率最高，实现最简单<br><img src="/2021/05/03/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20210522214332643.png" alt="image-20210522214332643"><br><strong>E-路组相连Cache：</strong>E=E，每组有E行</li><li><strong>组相连映象：</strong>主存中的每一块可以被放置到Cache中<strong>唯一的一个组中的任何一个位置</strong>。作为两种映像的折中。<br><img src="/2021/05/03/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20210522214350625.png" alt="image-20210522214350625"><br><strong>E-路组相连Cache：</strong>E=E，每组有E行</li></ul><p><strong>当所要访问的块在高一层存储器中时，如何找到该块?（查找算法）</strong><br><img src="/2021/05/03/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20210522215621798.png" alt="image-20210522215621798"><br>我们通过一个地址在cache查找数据块，地址组成：标记t、组索引s、偏移量b</p><ul><li>定位到<strong>组</strong></li><li>检查组内任意行是否与<strong>标记</strong>匹配。如果<strong>匹配</strong>且<strong>行</strong>有效（有效位为1），则命中</li><li>以<strong>偏移量</strong>定位数据</li></ul><p><strong>当发生失效时，应替换哪一块？ （替换算法）</strong></p><ul><li><p><strong>先进先出法(FIFO)：</strong>如果不匹配，新行替换旧行。</p></li><li><p><strong>随机法：</strong>为了均匀使用组中的各块，这种方法随机地选择被替换的块。</p></li><li><p><strong>最近最少使用法LRU (Least Recently Used)：</strong>选择近期最少被访问的块作为被替换的块。但由于实现比较困难，现在实际上实现的LRU都只是选择最久没有被访问过的块作为被替换的块。</p></li></ul><p><strong>当进行写访问时，应进行哪些操作（写策略）</strong></p><p><img src="/2021/05/03/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/20201015223402749.png" alt="img"></p><h2 id="局部性原理"><a href="#局部性原理" class="headerlink" title="局部性原理"></a>局部性原理</h2><p>一个编写良好的程序倾向于<strong>引用最近引用过的数据本身</strong>，或者<strong>引用的数据项邻近于其最近引用过的数据项</strong></p><ul><li><p><strong>时间局部性(Temporal locality)：</strong>最近被引用过的数据很可能很快会被多次引用</p></li><li><p><strong>空间局部性(Spatial locality)：</strong>一个存储位置被引用了一次，很可能很快其附近存储位置也会被引用。</p></li></ul><p><strong>步长：</strong>按顺序、连续的对 v 的引用，我们称为<strong>步长为1的引用模式。</strong>同理，在一个连续的向量中，每隔k个元素对向量进行访问，称为<strong>步长为k的引用。</strong>一般来说，<strong>随着步长的增加，空间局部性会下降</strong>。</p><p><strong>取指令的局部性</strong>：<strong>指令存在于存储器中</strong>，cpu 要读指令就必须取出指令。所以也能评价对于取指令的局部性。在循环中，循环体内的指令多次被执行，所以有<strong>良好的时间和空间局部性</strong>。</p><p><strong>对cache友好</strong>的代码要有良好的<strong>局限性</strong>，我们对代码<strong>评价局部性的简单原则</strong>：</p><ol><li><strong>重复引用同一个变量</strong>有良好的<strong>时间局部性</strong></li><li>对于步长为k的引用的程序，<strong>步长越小，空间局部性越好。</strong></li><li>对于<strong>取指令</strong>来说、<strong>循环</strong>有较好的时间和空间局部性。</li><li>我们需要优化内循环内部的引用（例如：矩阵分块），大部分计算和存储器的访问都在这里。</li></ol><h2 id="编译系统"><a href="#编译系统" class="headerlink" title="编译系统"></a>编译系统</h2><p>GCC<strong>编译器驱动程序</strong>读取<strong>源程序hello.c</strong>，并把它<strong>翻译</strong>成一个<strong>可执行目标文件hello</strong>。</p><p><img src="/2021/05/03/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20210527224841457.png" alt="image-20210527224841457"></p><ul><li><strong>预处理阶段。预处理器（cpp）</strong>根据<strong>字符#开头</strong>的命令，修改原始的c程序。</li><li><strong>编译阶段。编译器（ccl）</strong>将<strong>文本文件hello.i</strong>翻译成<strong>文本文件hello.s</strong>，它包含一个<strong>汇编语言程序</strong>。</li><li><strong>汇编阶段。</strong>接下来，<strong>汇编器（as）</strong>将<strong>hello.s</strong>翻译成<strong>机器语言指令</strong>，并把这些指令打包成一个叫做<strong>可重定位目标程序的格式</strong>。</li><li><strong>链接阶段。</strong>如果，hello程序调用了一个printf函数，它是每个c编译器都会提供的标准C库中的一个函数。<strong>printf函数</strong>存在于一个名为<strong>printf.o</strong>的单独的预编译好了的目标文件中，而这个文件必须<strong>以某种方式合并到我们的hello.o程序</strong>中。<strong>链接器（ld）</strong>就负责处理这种合并。结果就得到hello文件，它是一个<strong>可执行目标文件（简称可执行文件）</strong>，可以<strong>被加载到内存中，由系统执行</strong>。</li></ul><h2 id="链接和链接器"><a href="#链接和链接器" class="headerlink" title="链接和链接器"></a>链接和链接器</h2><p><strong>链接（linking）</strong>是将<strong>各种代码和数据部分</strong>收集起来并组合成为一个<strong>单一文件</strong>的过程，<strong>这个文件可被加载（或被拷贝）到存储器执行。</strong></p><p><strong>链接器（ld）</strong>在软件开发中扮演着一个关键的角色，因为它们使得<strong>分离编译（separate compilation）</strong>成为可能。我们可以将一个大型的应用程序<strong>分解成几个更小的、更好管理的模块</strong>，可以独立地修改和编译这些模块。<strong>当我们改变其中一个模块时，只需要重新编译它</strong>，并重新链接应用，而<strong>不必重新编译其他文件。</strong></p><p><strong>链接器做了什么？</strong></p><ul><li><strong>符号解析。</strong>将每个<strong>符号引用</strong>和刚好和一个<strong>符号定义联系</strong>起来。</li><li><strong>重定位。</strong>将<strong>各自的代码和数据合并</strong>到一起。将<strong>可重定位文件</strong>中符号的<strong>相对位置</strong>重定位到<strong>可执行文件</strong>中该符号相应的的<strong>绝对存储位置</strong>。更新所有的<strong>符号引用</strong>到其<strong>绝对位置</strong>。</li></ul><h2 id="目标文件"><a href="#目标文件" class="headerlink" title="目标文件"></a>目标文件</h2><p>目标文件三种形式：</p><ul><li><strong>可重定位目标文件</strong>。包含二进制代码和数据。多个可重定位目标文件合并起来创建一个可执行文件。</li><li><strong>可执行目标文件</strong>。包含二进制代码和数据。可被直接拷贝到存储器执行。</li><li><strong>共享目标文件</strong>。一种特殊的可重定位目标文件。</li></ul><p>下图是一种<strong>ELF（Executable and Linkable Format，可执行可链接的格式）可重定位目标文件</strong>格式。</p><p><img src="/2021/05/03/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20210529120012252.png" alt="image-20210529120012252"></p><ul><li><strong>ELF头</strong>。<ul><li>以一个<strong>十六字节的序列</strong>开始，这个序列描述了<strong>生成该文件的系统的字的大小和字节顺序</strong>。</li><li>ELF头剩下的部分包含<strong>帮助链接器语法分析和解释目标文件的信息</strong>。<ul><li>ELF头的大小。</li><li>目标文件的类型（如可重定位、可执行或者是共享的）</li><li>机器类型（IA32）</li><li>节头部表的文件偏移</li><li>节头部表中的条目大小和数量。</li></ul></li></ul></li><li>夹在ELF头和节头部表之间的都是<strong>节</strong>。一个典型的ELF可重定位目标文件包含下面几个节：<ul><li><strong>.text：</strong>已编译程序的机器代码。</li><li><strong>.rodata：</strong>只读数据。比如printf语句中的格式串和switch语句的跳转表。</li><li><strong>.data：</strong>已初始化的全局C变量。局部C变量在运行时保存在栈中，链接器不关心它。</li><li><strong>.bss：</strong>未初始化的全局C变量。在目标文件中，未初始化变量不需要占据任何实际的磁盘空间，仅仅是为了空间效率的占位符。</li><li><strong>.symtab：</strong>一个符号表，它存放在程序中定义和引用的函数和全局变量的信息。</li><li><strong>.rel.text：</strong>一个.text节中位置的列表，在与其他可重定位目标文件结合时需要修改这些位置。</li><li><strong>.rel.data：</strong>被模块引用或定义的任何全局变量的重定位信息。</li><li><strong>.debug：</strong>一个调试符号表。包括局部变量、全局变量以及原始的C源文件。只有用<code>-g</code>选项才会得到这张表。</li><li><strong>.line：</strong>原始C源程序中的行号和.text节中机器指令之间的映射。只有用<code>-g</code>选项才会得到这张表。</li><li><strong>.strtab：</strong>一个字符串表，其内容包括.symtab和.debug节中的符号表，以及节头部中的节名字。</li></ul></li><li><strong>节头部表</strong>描述不同节的位置和大小，目标文件中每个节都有一个固定大小的<strong>条目（entry）</strong>。</li></ul><p>下图是一种<strong>ELF（Executable and Linkable Format，可执行可链接的格式）可执行文件</strong>格式。</p><p><img src="/2021/05/03/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20210601202041685.png" alt="image-20210601202041685"></p><ul><li><strong>ELF头</strong>，描述文件的总体格式。</li><li><strong>段头部表</strong>，将连续的节映射到存储器段。</li><li><strong>节</strong>部分，与可重定位目标文件相似，不同之处在于<ul><li><strong>.init节</strong>定义了一个函数_init，<strong>程序初始化</strong>会调用它。</li><li>因为已经重定位完成，所以不再需要**.rel前缀的节**了</li></ul></li></ul><h2 id="链接器符号和符号表"><a href="#链接器符号和符号表" class="headerlink" title="链接器符号和符号表"></a>链接器符号和符号表</h2><p><strong>链接器符号是什么？符号表又是什么？</strong></p><ul><li><p><strong>链接器符号</strong>其实就是程序中的变量名、函数名。</p></li><li><p><strong>符号表</strong>是编译器为存储变量名、函数名、对象、类、接口等各种实体的出现情况而创建和维护的一种重要的<strong>数据结构</strong>。</p></li></ul><p><strong>链接器符号分为三种：</strong></p><ul><li><strong>Global symbols（模块内部定义的全局符号）：</strong>由<strong>本模块定义并能被其他模块引用</strong>。对应于<strong>非静态的的c函数</strong>以及被定义为<strong>不带c语言static属性的全局变量</strong>。</li><li><strong>External symbols（外部定义的全局符号）：</strong>由<strong>其他模块定义并被模块引用的全局符号。</strong>对应于<strong>定义在其他模块中的c语言函数和变量</strong>。</li><li><strong>Local symbols（本模块的局部符号）：</strong>仅由<strong>本模块定义和引用的本地符号</strong>。对应于<strong>在模块中定义的带static的C语言函数和全局变量</strong>，这些函数和变量<strong>只能在本模块中引用</strong>，不能在其他模块中引用。</li><li> <strong>注意：</strong>链接器的局部符号<strong>不是</strong>指程序中的<strong>局部变量</strong>（分配在栈中的临时性变量），链接器不关心这种局部变量。</li></ul><p><strong>全局符号的强弱：</strong></p><ul><li>在编译时，<strong>编译器向汇编器输出</strong>的每个<strong>全局符号</strong>，或者是<strong>强符号</strong>，或者是<strong>弱符号</strong>。</li><li><strong>强符号</strong>：函数和已初始化的全局变量。</li><li><strong>弱符号</strong>：未初始化的全局变量。</li><li>对于<strong>多重定义的全局符号</strong>：强符号和弱符号中选强符号，强符号只能有一个，如果没有则选弱符号其中之一。</li><li>所以我们在<strong>编程时要注意</strong>尽可能地<strong>避免使用全局变量</strong>，若要使用需要合理使用<strong>static、extern</strong>，记得<strong>变量初始化</strong>。</li></ul><p><strong>.symtab节的中包含的ELF符号表举例：</strong></p><p><img src="/2021/05/03/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20210529134717830.png" alt="image-20210529134717830"></p><h2 id="重定位"><a href="#重定位" class="headerlink" title="重定位"></a>重定位</h2><p>在符号解析完成之后，进行<strong>重定位，分为两步</strong>：</p><ul><li><strong>重定位节和符号定义</strong>。链接器将所有<strong>相同类型的节</strong>合并成同一类型的新的<strong>聚合节</strong>。然后，链接器将<strong>运行时存储器地址</strong>赋给新的<strong>聚合节</strong>。程序的<strong>每个指令和全局变量</strong>都有<strong>唯一的运行时存储器地址</strong>。</li><li><strong>重定位节中的符号引用</strong>。链接器依赖<strong>重定位条目</strong>修改代码节和数据节中对每个<strong>符号的引用</strong>，使得它们<strong>指向正确的运行时地址</strong>。</li></ul><p><strong>重定位条目的格式：</strong></p><p><img src="/2021/05/03/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20210530231721288.png" alt="image-20210530231721288"></p><ul><li><strong>offset</strong>是需要被修改的<strong>引用的节偏移</strong>。</li><li><strong>symbol标识</strong>被修改的<strong>引用应该指向的符号</strong>，就是<strong>符号名</strong>。</li><li><strong>type</strong>告知链接器<strong>如何修改新的引用</strong>，也就是<strong>重定位类型</strong>。</li></ul><p><strong>两种最基本的重定位类型：</strong></p><ul><li><strong>R_386_PC32：</strong>重定位一个使用32位<strong>PC相对地址</strong>的引用。<strong>PC相对地址</strong>就是距离<strong>程序计数器PC</strong>的<strong>当前运行时值的偏移量</strong>，PC值就是<strong>下一条指令的地址</strong>，PC=PC+value。</li><li><strong>R_386_32：</strong>重定位一个使用32位<strong>绝对地址</strong>的引用。</li></ul><p><img src="/2021/05/03/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20210530233504042.png" alt="image-20210530233504042"></p><ul><li><p>refptr = .text + r.offset，重定位条目r的偏移加上.text节开始的位置，即需要被重定位的32位地址</p></li><li><p><strong>对于R_386_PC32 类型</strong>，将这32位的值* refptr修改为ADDR(r.symbol)+ *reptr - refaddr(我认为等于reptr)，所以 *reptr 修改为<strong>引用与修改位置的相对距离</strong>与<strong>现在位置的值</strong>相加。</p></li><li><p><strong>对于R_386_32类型</strong>，将这32位的值* refptr修改为ADDR(r.symbol)+ *reptr ，所以 *reptr 修改为<strong>引用的绝对位置</strong>与<strong>现在位置的值</strong>相加。</p></li></ul><h2 id="库"><a href="#库" class="headerlink" title="库"></a>库</h2><p><strong>静态库（.a存档文件集）：</strong> <strong>一组</strong>连接起来的<strong>可重定位目标文件</strong>集合，有一个<strong>头部</strong>用来<strong>描述每个成员目标文件的大小和位置。</strong>允许增量更新</p><p><strong>使用静态库的链接器行为：</strong>通过在一个或多个<strong>存档</strong>中<strong>查找符号</strong>来<strong>解析外部引用</strong>。若一个存档成员文件<strong>解析了引用</strong>，则可将其<strong>连接到可执行文件</strong>。</p><p><img src="/2021/05/03/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20210529212040663.png" alt="image-20210529212040663"></p><p><strong>使用静态库</strong>时，<strong>链接器</strong>如何<strong>查找符号</strong>并<strong>解析外部引用</strong>？</p><ul><li><strong>按照命令行的顺序扫描可重定位文件和存档文件集。</strong></li><li><strong>在扫描过程中</strong>，维护一个<strong>当前未解析引用</strong>的列表。依据目标文件的符号定义，对遇到的每一个新**.o或.a 文件**, <strong>尝试解析</strong>上述列表中每一个<strong>未解析的引用</strong>。</li><li><strong>若在扫描结束时</strong>，未解析列表中<strong>仍有条目存在</strong>，则<strong>报错</strong></li><li>所以命令行执行顺序很重要，原则上将<strong>库文件</strong>放在<strong>命令行末尾。</strong></li></ul><p><strong>静态库的缺点：</strong></p><ul><li><strong>对系统库进行修复</strong>时，需要对使用到这个库的所有程序进行<strong>重新链接</strong>。</li><li>在存储中和运行中的可执行文件都有多个副本。</li></ul><p><strong>共享库（动态链接库，DLLs， .so 文件）：包含代码和数据的目标文件</strong>，或者<strong>在加载时</strong>，或者<strong>在执行时</strong>，被<strong>动态加载和链接到应用中</strong></p><p><strong>使用共享库，加载时的动态链接：</strong>当<strong>创建可执行文件时</strong>，<strong>静态</strong>执行一部分<strong>链接</strong>，然后在<strong>程序加载时</strong>，<strong>动态完成链接</strong>过程。</p><p><img src="/2021/05/03/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20210529223133606.png" alt="image-20210529223133606"></p><ul><li>在静态链接时，没有任何数据和代码被拷贝到可执行文件中。反之，链接器拷贝到一些<strong>重定位信息和符号信息</strong>，它们使得<strong>运行时可以解析对共享库中代码和数据的引用</strong>。</li><li>在加载时，执行<strong>动态链接</strong>，根据静态链接得到的信息，比如.interp节中的动态链接器的路径名，重定位共享库的<strong>数据和代码</strong>到<strong>存储器段</strong>和重定位可执行文件中所有由共享库定义的<strong>符号的引用</strong>，完成链接任务。</li></ul><p><strong>使用共享库，运行时的动态链接：</strong>将<strong>动态生成内容</strong>的每个<strong>函数</strong>打包在共享库中。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;深入理解计算机系统——基础知识&quot;&gt;&lt;a href=&quot;#深入理解计算机系统——基础知识&quot; class=&quot;headerlink&quot; title=&quot;深入理解计算机系统——基础知识&quot;&gt;&lt;/a&gt;深入理解计算机系统——基础知识&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="CS:APP" scheme="https://sun-ruijiang.github.io/categories/CS-APP/"/>
    
    
    <category term="Tutorial" scheme="https://sun-ruijiang.github.io/tags/Tutorial/"/>
    
  </entry>
  
  <entry>
    <title>深入理解计算机系统——课程作业2</title>
    <link href="https://sun-ruijiang.github.io/2021/05/03/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A2/"/>
    <id>https://sun-ruijiang.github.io/2021/05/03/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A2/</id>
    <published>2021-05-02T16:00:00.000Z</published>
    <updated>2021-05-08T14:50:21.721Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深入理解计算机系统——课程作业2"><a href="#深入理解计算机系统——课程作业2" class="headerlink" title="深入理解计算机系统——课程作业2"></a>深入理解计算机系统——课程作业2</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>五一放假还有作业。。。</p><p>课程作业2共有三个题，都是分析汇编代码</p><h2 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//include &quot;stdio.h&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//define H ?  //定义常数H          //H=37</span></span><br><span class="line"><span class="comment">//define J ?  //定义常数J          //J=16</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> array1[H][J]; </span><br><span class="line"><span class="keyword">int</span> array2[J][H]; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    array1[x][y] = x+<span class="number">2</span>*y;</span><br><span class="line">    array2[y][x] = y-x*x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>Ubuntu 32位</code>系统下经过<code>gcc</code>汇编后，得到的函数f汇编代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">f:</span><br><span class="line">pushl     %ebp            &#x2F;&#x2F;ebp入栈</span><br><span class="line">movl     %esp, %ebp       &#x2F;&#x2F;ebp设为现在的帧指针</span><br><span class="line">pushl     %ebx            &#x2F;&#x2F;ebx入栈</span><br><span class="line">movl     8(%ebp), %ecx    &#x2F;&#x2F;ecx&#x3D; M(8+ebp)&#x3D;x</span><br><span class="line">movl     12(%ebp), %edx   &#x2F;&#x2F;edx&#x3D; M(12+ebp)&#x3D;y</span><br><span class="line">movl     12(%ebp), %eax   &#x2F;&#x2F;eax&#x3D; M(12+ebp)&#x3D;y</span><br><span class="line">addl     %eax, %eax       &#x2F;&#x2F;eax&#x3D;2*eax&#x3D;2*y</span><br><span class="line">addl     8(%ebp), %eax    &#x2F;&#x2F;eax&#x3D; M(8+ebp)+eax&#x3D;x+2*y</span><br><span class="line">sall     $4, %ecx         &#x2F;&#x2F;ecx&#x3D;ecx*16&#x3D;16*x</span><br><span class="line">leal     (%ecx,%edx), %edx  &#x2F;&#x2F;edx&#x3D; ecx+edx &#x3D;16*x+y,so J&#x3D;16</span><br><span class="line">movl     %eax, array1(,%edx,4)   &#x2F;&#x2F;array1[edx]&#x3D;eax</span><br><span class="line">movl     12(%ebp), %edx   &#x2F;&#x2F;edx&#x3D;M(12+ebp)&#x3D;y</span><br><span class="line">movl     8(%ebp), %ebx    &#x2F;&#x2F;ebx&#x3D;M(8+ebp)&#x3D;x</span><br><span class="line">movl     8(%ebp), %eax    &#x2F;&#x2F;eax&#x3D;M(8+ebp)&#x3D;x</span><br><span class="line">imull     8(%ebp), %eax    &#x2F;&#x2F;eax&#x3D;eax*M(8+ebp)&#x3D;x*x</span><br><span class="line">movl     12(%ebp), %ecx    &#x2F;&#x2F;ecx&#x3D;M(12+ebp)&#x3D;y</span><br><span class="line">subl     %eax, %ecx       &#x2F;&#x2F;ecx&#x3D;ecx-eax&#x3D;y-x*x</span><br><span class="line">movl     %edx, %eax       &#x2F;&#x2F;eax&#x3D;edx&#x3D;y</span><br><span class="line">sall     $3, %eax          &#x2F;&#x2F;eax&#x3D;eax*8&#x3D;8*y</span><br><span class="line">addl     %edx, %eax       &#x2F;&#x2F;eax&#x3D;eax+edx&#x3D;8*y+y</span><br><span class="line">sall     $2, %eax         &#x2F;&#x2F;eax&#x3D;eax*4&#x3D;9*y*4</span><br><span class="line">addl     %edx, %eax       &#x2F;&#x2F;eax&#x3D;edx+eax&#x3D;36*y+y</span><br><span class="line">addl     %ebx, %eax        &#x2F;&#x2F;eax&#x3D;ebx+eax&#x3D;37*y+x,so H&#x3D;37</span><br><span class="line">movl     %ecx, array2(,%eax,4)   &#x2F;&#x2F;array2[eax]&#x3D;ecx&#x3D;y-x*x</span><br><span class="line">popl     %ebx              &#x2F;&#x2F;ebx出栈</span><br><span class="line">popl     %ebp              &#x2F;&#x2F;ebp出栈</span><br><span class="line">ret</span><br></pre></td></tr></table></figure><p>请分析每一行汇编代码的意义，并给出常数<code>H</code>和<code>J</code>的值。（20.0分）</p><h2 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h2><p>如下为一个c语言程序中的函数及其在32位系统下编译得到的汇编语言程序代码，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">aprod</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, x, y, z;</span><br><span class="line">    <span class="keyword">int</span> r = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; （  <span class="number">1</span>  ）; （  <span class="number">2</span>  ）) &#123;       <span class="comment">//i&lt;(n-2)    i+=3</span></span><br><span class="line">        （  <span class="number">3</span>  ）;                           <span class="comment">//x=a[i]</span></span><br><span class="line">        （  <span class="number">4</span>  ）;                           <span class="comment">//y=a[i+1]</span></span><br><span class="line">        （  <span class="number">5</span>  ）;                           <span class="comment">//z=a[i+2]</span></span><br><span class="line">        （  <span class="number">6</span>  ）;                           <span class="comment">//r=r*x*y*z</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (; i &lt; n; i++)</span><br><span class="line">        （  <span class="number">7</span>  ）;                           <span class="comment">//r=a[i]*r  </span></span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在32位系统中用<code>gcc</code>编译后，函数<code>aprod</code>对应的汇编语言程序代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">aprod:</span><br><span class="line">pushl     %ebp           &#x2F;&#x2F;ebp入栈</span><br><span class="line">movl     %esp, %ebp      &#x2F;&#x2F;ebp设为现在的帧指针</span><br><span class="line">subl     $32, %esp       &#x2F;&#x2F;esp&#x3D;esp-32，预留32字节给函数临时变量</span><br><span class="line">movl     $1, -20(%ebp)   &#x2F;&#x2F;r&#x3D;M(ebp-20)&#x3D;1</span><br><span class="line">movl     $0, -4(%ebp)    &#x2F;&#x2F;i&#x3D;M(ebp-4)&#x3D;0</span><br><span class="line">jmp      .l2             &#x2F;&#x2F;无条件跳转到.l2</span><br><span class="line"></span><br><span class="line">.l3:</span><br><span class="line">movl     -4(%ebp), %eax  &#x2F;&#x2F;eax&#x3D;M(ebp-4)&#x3D;i</span><br><span class="line">sall     $2, %eax        &#x2F;&#x2F;eax&#x3D;eax*4&#x3D;i*4</span><br><span class="line">addl     8(%ebp), %eax   &#x2F;&#x2F;eax&#x3D;eax+M(8+ebp)&#x3D;4i+a[]</span><br><span class="line">movl     (%eax), %eax    &#x2F;&#x2F;eax&#x3D;M(eax)&#x3D;a[i]</span><br><span class="line">movl     %eax, -8(%ebp)  &#x2F;&#x2F;x&#x3D;M(ebp-8)&#x3D;eax&#x3D;a[i]</span><br><span class="line">movl     -4(%ebp), %eax  &#x2F;&#x2F;eax&#x3D;M(ebp-4)&#x3D;i</span><br><span class="line">addl     $1, %eax        &#x2F;&#x2F;eax&#x3D;eax+1&#x3D;i+1</span><br><span class="line">sall     $2, %eax        &#x2F;&#x2F;eax&#x3D;eax*4&#x3D;4*(i+1)</span><br><span class="line">addl     8(%ebp), %eax   &#x2F;&#x2F;eax&#x3D;M(8+ebp)&#x3D;4*[i+1]+a[]</span><br><span class="line">movl     (%eax), %eax    &#x2F;&#x2F;eax&#x3D;M(eax)&#x3D;a[i+1]</span><br><span class="line">movl     %eax, -12(%ebp) &#x2F;&#x2F;y&#x3D;M(ebp-12)&#x3D;eax&#x3D;a[i+1]</span><br><span class="line">movl     -4(%ebp), %eax  &#x2F;&#x2F;eax&#x3D;(ebp-4)&#x3D;i</span><br><span class="line">addl     $2, %eax        &#x2F;&#x2F;eax&#x3D;eax+2&#x3D;i+2</span><br><span class="line">sall     $2, %eax         &#x2F;&#x2F;eax&#x3D;eax*4&#x3D;4*(i+2)</span><br><span class="line">addl     8(%ebp), %eax    &#x2F;&#x2F;eax&#x3D;eax+M(8+ebp)&#x3D;a[]+4*(i+2)</span><br><span class="line">movl     (%eax), %eax     &#x2F;&#x2F;eax&#x3D;M(eax)&#x3D;a[i+2]</span><br><span class="line">movl     %eax, -16(%ebp)  &#x2F;&#x2F;z&#x3D;M(-16+ebp)&#x3D;eax&#x3D;a[i+2]</span><br><span class="line">movl     -20(%ebp), %eax  &#x2F;&#x2F;eax&#x3D;M(-20+ebp)&#x3D;r</span><br><span class="line">imull     -8(%ebp), %eax  &#x2F;&#x2F;eax*&#x3D;M(-8+ebp)&#x3D;r*x</span><br><span class="line">imull     -12(%ebp), %eax &#x2F;&#x2F;eax*&#x3D;M(-12+ebp)&#x3D;r*x*y</span><br><span class="line">imull     -16(%ebp), %eax  &#x2F;&#x2F;eax*&#x3D;M(-16+ebp)&#x3D;r*x*y*z</span><br><span class="line">movl     %eax, -20(%ebp)  &#x2F;&#x2F;r&#x3D;M(-20+ebp)&#x3D;eax&#x3D;r*x*y*z</span><br><span class="line">addl     $3, -4(%ebp)     &#x2F;&#x2F;i&#x3D;M(-4+ebp)+&#x3D;3&#x3D;i+3</span><br><span class="line"></span><br><span class="line">.l2:</span><br><span class="line">movl     12(%ebp), %eax    &#x2F;&#x2F;eax&#x3D;M(12+ebp)&#x3D;n</span><br><span class="line">subl     $2, %eax          &#x2F;&#x2F;eax&#x3D;eax-2&#x3D;n-2</span><br><span class="line">cmpl     -4(%ebp), %eax    &#x2F;&#x2F;compare eax&#x3D;n-2 with M(ebp-4)&#x3D;i</span><br><span class="line">jg       .l3               &#x2F;&#x2F;eax&#x3D;n-2 &gt; M(ebp-4)&#x3D;i则跳转.l3</span><br><span class="line">jmp      .l4               &#x2F;&#x2F;无条件跳转.l4</span><br><span class="line"></span><br><span class="line">.l5:</span><br><span class="line">movl     -4(%ebp), %eax   &#x2F;&#x2F;eax&#x3D;M(-4+ebp)&#x3D;i</span><br><span class="line">sall     $2, %eax         &#x2F;&#x2F;eax&#x3D;eax*4&#x3D;4*i</span><br><span class="line">addl     8(%ebp), %eax    &#x2F;&#x2F;eax&#x3D;eax+M(8+ebp)&#x3D;a[]+4*i</span><br><span class="line">movl     (%eax), %eax     &#x2F;&#x2F;eax&#x3D;M(eax)&#x3D;a[i]</span><br><span class="line">movl     -20(%ebp), %edx   &#x2F;&#x2F;edx&#x3D;M(-20+ebp)&#x3D;r</span><br><span class="line">imull     %edx, %eax      &#x2F;&#x2F;eax&#x3D;eax*edx&#x3D;a[i]*r</span><br><span class="line">movl     %eax, -20(%ebp)   &#x2F;&#x2F;r&#x3D;M(-20+ebp)&#x3D;eax&#x3D;a[i]*r</span><br><span class="line">addl     $1, -4(%ebp)      &#x2F;&#x2F;i&#x3D;M(-4+ebp)+1</span><br><span class="line"></span><br><span class="line">.l4:</span><br><span class="line">movl     -4(%ebp), %eax    &#x2F;&#x2F;eax&#x3D;M(-4+ebp)&#x3D;i</span><br><span class="line">cmpl     12(%ebp), %eax    &#x2F;&#x2F;compare eax&#x3D;i with M(12+ebp)&#x3D;n</span><br><span class="line">jl       .l5               &#x2F;&#x2F;eax&#x3D;i &lt; M(12+ebp)&#x3D;n则跳转</span><br><span class="line">movl     -20(%ebp), %eax   &#x2F;&#x2F;eax&#x3D;M(-20+ebp)&#x3D;r，返回值为r</span><br><span class="line">leave</span><br><span class="line">ret</span><br></pre></td></tr></table></figure><p>请详细说明每条汇编语句的意义，并将这个函数补充完整。（40.0分）</p><h2 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h2><p>如下为一个c语言程序中的函数及其在32位系统下编译得到的汇编语言程序代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//incl  ude &lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">frac</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;           </span><br><span class="line">    <span class="keyword">if</span>(a&lt;<span class="number">2</span>) <span class="keyword">return</span> ______;           <span class="comment">//a*a</span></span><br><span class="line">    <span class="keyword">return</span> _______;                  <span class="comment">//frac(a-2)+a</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c= ______;                  <span class="comment">// frac(a+b)</span></span><br><span class="line">    <span class="keyword">return</span> ______;                  <span class="comment">// 2*c+b</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">10</span>,j=<span class="number">6</span>;</span><br><span class="line">    <span class="keyword">int</span> k=sum(_______,______);       <span class="comment">//int k=sum(j-i,i++);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的汇编代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">frac:</span><br><span class="line">pushl  %ebp             &#x2F;&#x2F;ebp入栈</span><br><span class="line">movl  %esp, %ebp        &#x2F;&#x2F;ebp&#x3D;esp，设为当前的帧指针</span><br><span class="line">subl  $24, %esp         &#x2F;&#x2F;esp&#x3D;esp-24，预留24字节给临时变量</span><br><span class="line">cmpl  $1, 8(%ebp)       &#x2F;&#x2F;compare a&#x3D;M(8+ebp) with 1</span><br><span class="line">jg    .l2                &#x2F;&#x2F;a&#x3D;M(8+ebp) &gt; 1则跳转到.l2</span><br><span class="line">movl  8(%ebp), %eax      &#x2F;&#x2F;eax&#x3D;M(8+ebp)&#x3D;a</span><br><span class="line">imull  8(%ebp), %eax     &#x2F;&#x2F;eax*&#x3D;M(8+ebp)&#x3D;a*a</span><br><span class="line">jmp   .l3                 &#x2F;&#x2F;无条件跳转.l3</span><br><span class="line"></span><br><span class="line">.l2:</span><br><span class="line">movl  8(%ebp), %eax      &#x2F;&#x2F;eax&#x3D;M(8+ebp)&#x3D;a</span><br><span class="line">subl  $2, %eax           &#x2F;&#x2F;eax&#x3D;eax-2&#x3D;a-2</span><br><span class="line">movl  %eax, (%esp)        &#x2F;&#x2F;M(esp)&#x3D;eax&#x3D;a-2</span><br><span class="line">call  frac               &#x2F;&#x2F;递归fun(a-2)</span><br><span class="line">addl  8(%ebp), %eax       &#x2F;&#x2F;eax&#x3D;eax+M(8+ebp)&#x3D;fun(a-2)+a</span><br><span class="line"></span><br><span class="line">.l3:</span><br><span class="line">leave</span><br><span class="line">ret</span><br><span class="line"></span><br><span class="line">sum:</span><br><span class="line">pushl  %ebp              &#x2F;&#x2F;ebp入栈</span><br><span class="line">movl  %esp, %ebp         &#x2F;&#x2F;ebp&#x3D;esp,设为现在的栈指针</span><br><span class="line">subl  $40, %esp          &#x2F;&#x2F;esp&#x3D;esp-40,预留40字节给临时变量</span><br><span class="line">movl  12(%ebp), %eax     &#x2F;&#x2F;eax&#x3D;M(ebp+12)&#x3D;b</span><br><span class="line">movl  8(%ebp), %edx      &#x2F;&#x2F;edx&#x3D;M(ebp+8)&#x3D;a</span><br><span class="line">addl  %edx, %eax         &#x2F;&#x2F;eax&#x3D;eax+edx&#x3D;a+b</span><br><span class="line">movl  %eax, (%esp)       &#x2F;&#x2F;M(esp)&#x3D;eax&#x3D;a+b</span><br><span class="line">call  frac               &#x2F;&#x2F;调用frac(a+b)</span><br><span class="line">movl  %eax, -12(%ebp)    &#x2F;&#x2F;c&#x3D;M(ebp-12)&#x3D;eax&#x3D;frac(a+b)</span><br><span class="line">movl  -12(%ebp), %eax    &#x2F;&#x2F;eax&#x3D;M(ebp-12)&#x3D;c</span><br><span class="line">addl  %eax, %eax         &#x2F;&#x2F;eax&#x3D;2*eax&#x3D;2*c</span><br><span class="line">addl  12(%ebp), %eax     &#x2F;&#x2F;eax&#x3D;eax+M(ebp+12)&#x3D;2*c+b</span><br><span class="line">leave</span><br><span class="line">ret</span><br><span class="line"></span><br><span class="line">main:</span><br><span class="line">pushl  %ebp           &#x2F;&#x2F;ebp入栈</span><br><span class="line">movl  %esp, %ebp      &#x2F;&#x2F;ebp设为现在的栈指针</span><br><span class="line">andl  $-16, %esp      &#x2F;&#x2F;esp&#x3D;esp &amp; 0xfffffff0</span><br><span class="line">subl  $32, %esp       &#x2F;&#x2F;esp&#x3D;esp-32,预留32位字节给临时变量</span><br><span class="line">movl  $10, 20(%esp)   &#x2F;&#x2F;i&#x3D;M(20+esp)&#x3D;10</span><br><span class="line">movl  $6, 24(%esp)    &#x2F;&#x2F;j&#x3D;M(24+esp)&#x3D;6</span><br><span class="line">movl  20(%esp), %eax  &#x2F;&#x2F;eax&#x3D;M(20+esp)&#x3D;i</span><br><span class="line">movl  24(%esp), %edx  &#x2F;&#x2F;edx&#x3D;M(24+esp)&#x3D;j</span><br><span class="line">subl  %eax, %edx       &#x2F;&#x2F;edx&#x3D;edx-eax&#x3D;j-i&#x3D;-4</span><br><span class="line">movl  20(%esp), %eax   &#x2F;&#x2F;eax&#x3D;M(20+esp)&#x3D;i&#x3D;10</span><br><span class="line">addl  $1, 20(%esp)     &#x2F;&#x2F;i&#x3D;M(20+esp)+1&#x3D;11</span><br><span class="line">movl  %edx, 4(%esp)    &#x2F;&#x2F;M(4+esp)&#x3D;edx&#x3D;-4</span><br><span class="line">movl  %eax, (%esp)     &#x2F;&#x2F;M(esp)&#x3D;eax&#x3D;10</span><br><span class="line">call  sum              &#x2F;&#x2F;调用sum(j-i,i++)</span><br><span class="line">movl  %eax, 28(%esp)   &#x2F;&#x2F;k&#x3D;M(28+esp)&#x3D;eax，将sum函数返回值赋给k</span><br><span class="line">movl  $0, %eax         &#x2F;&#x2F;eax&#x3D;0, return 0</span><br><span class="line">leave</span><br><span class="line">ret</span><br></pre></td></tr></table></figure><p>请详细说明每条汇编语句的意义，并将这个函数补充完整。（40.0分）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;深入理解计算机系统——课程作业2&quot;&gt;&lt;a href=&quot;#深入理解计算机系统——课程作业2&quot; class=&quot;headerlink&quot; title=&quot;深入理解计算机系统——课程作业2&quot;&gt;&lt;/a&gt;深入理解计算机系统——课程作业2&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="CS:APP" scheme="https://sun-ruijiang.github.io/categories/CS-APP/"/>
    
    
    <category term="课程作业" scheme="https://sun-ruijiang.github.io/tags/%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A/"/>
    
  </entry>
  
  <entry>
    <title>贪心算法——会场安排问题</title>
    <link href="https://sun-ruijiang.github.io/2021/04/27/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E4%BC%9A%E5%9C%BA%E5%AE%89%E6%8E%92%E9%97%AE%E9%A2%98/"/>
    <id>https://sun-ruijiang.github.io/2021/04/27/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E4%BC%9A%E5%9C%BA%E5%AE%89%E6%8E%92%E9%97%AE%E9%A2%98/</id>
    <published>2021-04-26T16:00:00.000Z</published>
    <updated>2021-04-27T13:31:41.145Z</updated>
    
    <content type="html"><![CDATA[<h1 id="贪心算法——会场安排问题"><a href="#贪心算法——会场安排问题" class="headerlink" title="贪心算法——会场安排问题"></a>贪心算法——会场安排问题</h1><h2 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h2><p>假设要在足够多的会场里安排一批活动，并希望使用尽可能少的会场。</p><p>设计一个有效的贪心算法进行安排。</p><h2 id="算法设计："><a href="#算法设计：" class="headerlink" title="算法设计："></a>算法设计：</h2><p>对于给定的k个待安排的活动，计算使用最少会场的时间表。</p><h2 id="数据输入："><a href="#数据输入：" class="headerlink" title="数据输入："></a>数据输入：</h2><p>由文件<code>input.txt</code>给出输入数据。</p><p>第一行有1个正整数k，表示有k个待安排的活动。</p><p>接下来的k行中，每行有两个正整数，分别表示k个待安排的活动开始时间和活动结束时间。</p><p>时间以0点开始的分钟计。</p><h2 id="结果输出："><a href="#结果输出：" class="headerlink" title="结果输出："></a>结果输出：</h2><p>将计算的最小会场数输出到文件<code>output.txt</code>。</p><ul><li>输入文件示例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">input.txt</span><br><span class="line">5</span><br><span class="line">1 23</span><br><span class="line">12 28</span><br><span class="line">25 35</span><br><span class="line">27 80</span><br><span class="line">36 50</span><br></pre></td></tr></table></figure><ul><li>输出文件示例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">output.txt</span><br><span class="line">78 52</span><br></pre></td></tr></table></figure><h2 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h2><ul><li>贪心算法，选择局部最优解</li><li>即按开始时间升序排列，再由后一个活动的开始时间大于或等于前一个活动的结束时间作为筛选条件，直到所有的活动都安排完成。</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std ;</span><br><span class="line"></span><br><span class="line"><span class="function">ifstream <span class="title">infile</span><span class="params">(<span class="string">&quot;input.txt&quot;</span>)</span></span>;</span><br><span class="line"><span class="function">ofstream <span class="title">outfile</span><span class="params">(<span class="string">&quot;output.txt&quot;</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line">infile &gt;&gt; k;</span><br><span class="line"><span class="keyword">int</span> start[k], end[k];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">infile &gt;&gt; start[i] &gt;&gt; end[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(start, start + k);</span><br><span class="line"><span class="built_in">sort</span>(end, end + k);</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (start[i] &lt; end[j]) &#123;</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">outfile &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;贪心算法——会场安排问题&quot;&gt;&lt;a href=&quot;#贪心算法——会场安排问题&quot; class=&quot;headerlink&quot; title=&quot;贪心算法——会场安排问题&quot;&gt;&lt;/a&gt;贪心算法——会场安排问题&lt;/h1&gt;&lt;h2 id=&quot;问题描述：&quot;&gt;&lt;a href=&quot;#问题描述：&quot; c</summary>
      
    
    
    
    <category term="Algorithm" scheme="https://sun-ruijiang.github.io/categories/Algorithm/"/>
    
    
    <category term="贪心算法" scheme="https://sun-ruijiang.github.io/tags/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>回溯法——子集和问题</title>
    <link href="https://sun-ruijiang.github.io/2021/04/24/%E5%9B%9E%E6%BA%AF%E6%B3%95%E2%80%94%E2%80%94%E5%AD%90%E9%9B%86%E5%92%8C%E9%97%AE%E9%A2%98/"/>
    <id>https://sun-ruijiang.github.io/2021/04/24/%E5%9B%9E%E6%BA%AF%E6%B3%95%E2%80%94%E2%80%94%E5%AD%90%E9%9B%86%E5%92%8C%E9%97%AE%E9%A2%98/</id>
    <published>2021-04-23T16:00:00.000Z</published>
    <updated>2021-04-24T03:54:12.590Z</updated>
    
    <content type="html"><![CDATA[<h1 id="子集和问题"><a href="#子集和问题" class="headerlink" title="子集和问题"></a>子集和问题</h1><h2 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h2><p>子集和问题的一个实例为<code>&lt;S,t&gt;</code>。</p><p>其中，<code>S=&#123;s1,x2,...,xn&#125;</code>是一个正整数的集合，c是一个正整数。</p><p>子集和问题判定是否存在S的一个子集<code>S1</code>，使得集合中所有元素的和等于c。</p><p>试设计一个解子集和问题的回溯法。</p><h2 id="算法设计："><a href="#算法设计：" class="headerlink" title="算法设计："></a>算法设计：</h2><p>对于给定的正整数集合<code>S=&#123;s1,x2,...,xn&#125;</code>和正整数c，计算S的一个子集，使得子集和为c</p><h2 id="数据输入："><a href="#数据输入：" class="headerlink" title="数据输入："></a>数据输入：</h2><p>由文件<code>input.txt</code>提供输入数据。</p><p>文件第1行有2个整数n和c，n表示S的大小，c是子集和的目标值。</p><p>接下来的1行中，有n个正整数，表示集合S中的元素。</p><h2 id="结果输出："><a href="#结果输出：" class="headerlink" title="结果输出："></a>结果输出：</h2><p>将子集和问题的解输出到文件<code>output.txt</code>。</p><p>当问题无解时，输出“No Solution！”。</p><ul><li>输入文件示例</li></ul><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">input.txt</span><br><span class="line">5 10</span><br><span class="line">2 2 6 5 4</span><br></pre></td></tr></table></figure><ul><li>输出文件示例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">output.txt</span><br><span class="line">2 2 6</span><br></pre></td></tr></table></figure><h2 id="算法思路："><a href="#算法思路：" class="headerlink" title="算法思路："></a>算法思路：</h2><ul><li>回溯法的步骤为：<ul><li>修改当前节点状态</li><li>递归子节点状态</li><li>回改当前节点状态</li></ul></li><li><code>backtracking</code>函数：<ul><li>我们将<code>value</code>的值加上当前节点的值，同时添加当前元素到<code>tem</code>数组里。</li><li>递归下一节点，<code>backtracking(i + 1, n, c, S, tem, answer, value);</code></li><li>弹出<code>tem</code>数组刚刚添加的元素，<code>value</code>减去刚才加上的值</li><li>如果<code>value</code>值等于<code>c</code>，那么就添加此时的<code>tem</code>数组到<code>answer</code>二维数组中</li></ul></li><li><code>ssumc</code>函数：<ul><li>如果<code>answer</code>二维数组为空，则返回<code>tem</code>数组</li><li>如果<code>answer</code>不为空，则返回<code>answer</code>数组的第一个元素</li></ul></li><li><code>main</code>函数：<ul><li>从文件输入n、c、S数组</li><li>数组<code>ans</code>等于函数<code>ssumc</code>函数的返回值</li><li>输出数组元素，如果为空，则输出“No Solution！”到文件中</li></ul></li></ul><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std ;</span><br><span class="line"></span><br><span class="line"><span class="function">ifstream <span class="title">infile</span><span class="params">(<span class="string">&quot;input.txt&quot;</span>)</span></span>;</span><br><span class="line"><span class="function">ofstream <span class="title">outfile</span><span class="params">(<span class="string">&quot;outfile.txt&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">backtracking</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> &amp;n, <span class="keyword">int</span> &amp;c, vector&lt;<span class="keyword">int</span>&gt; S, vector&lt;<span class="keyword">int</span>&gt; &amp;tem,  vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; &amp;answer, <span class="keyword">int</span> value)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">ssumc</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> c, vector&lt;<span class="keyword">int</span>&gt; S)</span> </span>&#123;</span><br><span class="line">vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; answer;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; tem;</span><br><span class="line"><span class="keyword">int</span> value = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">backtracking</span>(i, n, c, S, tem, answer, value);</span><br><span class="line"><span class="keyword">if</span> (!answer.<span class="built_in">empty</span>())</span><br><span class="line"><span class="keyword">return</span> answer[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> tem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">backtracking</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> &amp;n, <span class="keyword">int</span> &amp;c, vector&lt;<span class="keyword">int</span>&gt; S, vector&lt;<span class="keyword">int</span>&gt; &amp;tem, vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; &amp;answer, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (value == c) &#123;</span><br><span class="line">answer.<span class="built_in">push_back</span>(tem);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = pos; i &lt; n; i++) &#123;</span><br><span class="line">tem.<span class="built_in">push_back</span>(S[i]);</span><br><span class="line">value += S[i];</span><br><span class="line"></span><br><span class="line"><span class="built_in">backtracking</span>(i + <span class="number">1</span>, n, c, S, tem, answer, value);</span><br><span class="line"></span><br><span class="line">tem.<span class="built_in">pop_back</span>();</span><br><span class="line">value -= S[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; S;</span><br><span class="line"><span class="keyword">int</span> n, c;</span><br><span class="line">infile &gt;&gt; n &gt;&gt; c;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> tem;</span><br><span class="line">infile &gt;&gt; tem;</span><br><span class="line">S.<span class="built_in">push_back</span>(tem);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; ans = <span class="built_in">ssumc</span>(n, c, S);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = ans.<span class="built_in">begin</span>(); it != ans.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">outfile &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ans.<span class="built_in">empty</span>())</span><br><span class="line">outfile &lt;&lt; <span class="string">&quot;No Soution!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>顾名思义，回溯法的核心是回溯。</p><p>在搜索到某一节点的时候，如果我们发现目前的节点（及其子节点）并不是需求目标时，我们回退到原来的节点继续搜索，并且把在目前节点修改的状态还原。</p><p>这样的好处是我们可以始终只对图的总状态进行修改，而非每次遍历时新建一个图来储存状态。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;子集和问题&quot;&gt;&lt;a href=&quot;#子集和问题&quot; class=&quot;headerlink&quot; title=&quot;子集和问题&quot;&gt;&lt;/a&gt;子集和问题&lt;/h1&gt;&lt;h2 id=&quot;问题描述：&quot;&gt;&lt;a href=&quot;#问题描述：&quot; class=&quot;headerlink&quot; title=&quot;问题描</summary>
      
    
    
    
    <category term="Algorithm" scheme="https://sun-ruijiang.github.io/categories/Algorithm/"/>
    
    
    <category term="回溯算法" scheme="https://sun-ruijiang.github.io/tags/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>动态规划算法——双机调度问题</title>
    <link href="https://sun-ruijiang.github.io/2021/04/05/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E5%8F%8C%E6%9C%BA%E8%B0%83%E5%BA%A6%E9%97%AE%E9%A2%98/"/>
    <id>https://sun-ruijiang.github.io/2021/04/05/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E5%8F%8C%E6%9C%BA%E8%B0%83%E5%BA%A6%E9%97%AE%E9%A2%98/</id>
    <published>2021-04-04T16:00:00.000Z</published>
    <updated>2021-04-15T14:52:07.156Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述:"></a>问题描述:</h3><p>用2台处理机<code>A</code>和<code>B</code>处理<code>n</code>个作业。设第<code>i</code>个作业交给机器A处理时需要时间<code>ai</code>，若由机器<code>B</code>来处理,则需要时间bi。</p><p>由于各作业的特点和机器的性能关系，很可能对于某些<code>i</code>，有<code>ai ≥ bi</code>，而对于某些<code>j ≠ i</code>，有<code>aj &lt; bj</code>。既不能将一个作业分开由2台机器处理，也没有一台机器能同时处理2个作业。</p><p>研究一个实例:</p><p><code>(a1, a2, a3, a4, a5, a6) = (2, 5, 7, 10, 5, 2)</code></p><p><code>(b1, b2, b3, b4, b5, b6) = (3, 8, 4, 11, 3, 4)</code></p><h3 id="算法设计"><a href="#算法设计" class="headerlink" title="算法设计:"></a>算法设计:</h3><p>对于给定的n个作业，找出一个最优调度方案，使<code>A</code>、<code>B</code>两台机器处理完这n个作业的时间最短。</p><h3 id="数据输入"><a href="#数据输入" class="headerlink" title="数据输入:"></a>数据输入:</h3><p>由文件<code>input. txt</code>提供输入数据。</p><p>文件的第1行是1个正整数<code>n</code>,表示要处理<code>n</code>个作业</p><p>在接下来的2行中,每行有n个正整数，分别表示处理机<code>A</code>和<code>B</code>处理第<code>i</code>个作业需要的处理时间。</p><h3 id="结果输出"><a href="#结果输出" class="headerlink" title="结果输出:"></a>结果输出:</h3><p>将计算出的最短处理时间输出到文件<code>output txt</code>。</p><ul><li><p>输入文件示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">input.txt</span><br><span class="line"></span><br><span class="line">6</span><br><span class="line">2 5 7 10 5 2</span><br><span class="line">3 8 4 11 3 4</span><br></pre></td></tr></table></figure></li><li><p>输出文件示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">output.txt</span><br><span class="line"></span><br><span class="line">15</span><br></pre></td></tr></table></figure></li></ul><h2 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h2><ul><li>找出<code>n</code>个任务所有耗时中最大的数<code>m</code>，也就是<code>A</code>和<code>B</code>数组的最大值。</li><li>设置三维布尔量数组<code>p[mn][mn][n]</code>，布尔量<code>p[i][j][k]</code>表示前<code>k</code>个作业可以在处理机<code>A</code>用时不超过<code>i</code>，处理机B不超过<code>j</code>的时间内完成。动态规划算法：<code>p[i][j][k] = p[i-ak][j][k-1] | p[i][j-bk][k-1]</code>（<code>|</code>为按位与运算符）</li><li>由上一步所得的结果我们可以找到时间最短的答案，具体是遍历布尔量为1的<code>k = n</code>的数组，取<code>min(i, j)</code>，如果比前一个小则取这个</li><li>具体算法如下</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ifstream infile ;</span><br><span class="line">infile.<span class="built_in">open</span>( <span class="string">&quot;input.txt&quot;</span> ) ;</span><br><span class="line">infile &gt;&gt; n ;</span><br><span class="line"></span><br><span class="line">a = <span class="keyword">new</span> <span class="keyword">int</span>[n] ;</span><br><span class="line">b = <span class="keyword">new</span> <span class="keyword">int</span>[n] ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">infile &gt;&gt; a[i] ;</span><br><span class="line">m = <span class="built_in">max</span>( a[i] , m ) ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">infile &gt;&gt; b[i] ;</span><br><span class="line">m = <span class="built_in">max</span>( b[i] , m ) ;</span><br><span class="line">&#125;</span><br><span class="line">mn = m * n ;</span><br><span class="line"></span><br><span class="line">infile.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dyna</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">bool</span>*** p = <span class="keyword">new</span> <span class="keyword">bool</span>** [mn+<span class="number">1</span>] ;</span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt;= mn ; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">p[i] = <span class="keyword">new</span> <span class="keyword">bool</span>* [mn+<span class="number">1</span>] ;</span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">int</span> j = <span class="number">0</span> ; j &lt;= mn ; j++ )</span><br><span class="line">&#123;</span><br><span class="line">p[i][j] = <span class="keyword">new</span> <span class="keyword">bool</span> [n+<span class="number">1</span>] ;</span><br><span class="line">p[i][j][<span class="number">0</span>] = <span class="literal">true</span> ;</span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">int</span> k = <span class="number">1</span> ; k &lt;= n ; k ++ )</span><br><span class="line">&#123;</span><br><span class="line">p[i][j][k] = <span class="literal">false</span> ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">int</span> k = <span class="number">1</span> ; k &lt;= n ; k ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt;= mn ; i++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">int</span> j = <span class="number">0</span> ; j &lt;= mn ; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>( i - a[k<span class="number">-1</span>] &gt;= <span class="number">0</span> ) p[i][j][k] = p[i-a[k<span class="number">-1</span>]][j][k<span class="number">-1</span>] ;</span><br><span class="line"><span class="keyword">if</span>( j - b[k<span class="number">-1</span>] &gt;= <span class="number">0</span> ) p[i][j][k] = p[i][j][k] || p[i][j-b[k<span class="number">-1</span>]][k<span class="number">-1</span>] ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> opt = mn ;</span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt;= mn ; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">int</span> j= <span class="number">0</span> ; j &lt;= mn ; j++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>( p[i][j][n] )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> tmp = <span class="built_in">max</span>( i , j ) ;</span><br><span class="line"><span class="keyword">if</span>( tmp &lt; opt ) opt = tmp ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ofstream outfile ;</span><br><span class="line">outfile.<span class="built_in">open</span>( <span class="string">&quot;output.txt&quot;</span> ) ;</span><br><span class="line">outfile &lt;&lt; opt &lt;&lt; endl ;</span><br><span class="line"> outfile.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">read</span>() ;</span><br><span class="line"><span class="built_in">dyna</span>() ;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上述算法的时间复杂度为<code>O(m2n3) </code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述:&quot;&gt;&lt;/a&gt;问题描述:&lt;</summary>
      
    
    
    
    <category term="Algorithm" scheme="https://sun-ruijiang.github.io/categories/Algorithm/"/>
    
    
    <category term="Dynamic programming" scheme="https://sun-ruijiang.github.io/tags/Dynamic-programming/"/>
    
  </entry>
  
  <entry>
    <title>hexo写作——我的第一篇博客</title>
    <link href="https://sun-ruijiang.github.io/2021/04/04/hexo%E5%86%99%E4%BD%9C%E2%80%94%E2%80%94%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>https://sun-ruijiang.github.io/2021/04/04/hexo%E5%86%99%E4%BD%9C%E2%80%94%E2%80%94%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</id>
    <published>2021-04-03T16:00:00.000Z</published>
    <updated>2021-05-04T01:55:54.985Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>大体上建好了网站，现在我们来学习一下如何在<code>hexo</code>上写作，并同步你的第一篇文章到GitHub上</p></blockquote><h2 id="现在开始"><a href="#现在开始" class="headerlink" title="现在开始"></a>现在开始</h2><h3 id="创建一篇博客"><a href="#创建一篇博客" class="headerlink" title="创建一篇博客"></a>创建一篇博客</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post &lt;My New Post&gt;</span><br></pre></td></tr></table></figure><p>如果不想使用命令行，直接在<code>source/_post</code>文件夹创建即可</p><p>需要注意的是，在文件编写的开头需要加上，<code>title</code>、<code>date</code>、<code>tag</code>、<code>category</code>、<code>author</code>、<code>Topping</code>这几个信息</p><h3 id="打开hexo服务器"><a href="#打开hexo服务器" class="headerlink" title="打开hexo服务器"></a>打开<code>hexo</code>服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>打开一个shell，输入这行命令</p><p>这是为了在本地观察渲染后的博客网站，显示一个<code>http://localhost:4000</code>网址，可以再这里观察网站变化</p><h3 id="生成静态网页"><a href="#生成静态网页" class="headerlink" title="生成静态网页"></a>生成静态网页</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate --watch</span><br></pre></td></tr></table></figure><p>打开另一个shell，输入命令·</p><p>如果不输入这行命令，网页是不会变化的，需要不断重复打开</p><p>输入命令后，我们可以刷新网页以更新变化，也可以在shell中看到网站的改变</p><h3 id="部署到GitHub仓库"><a href="#部署到GitHub仓库" class="headerlink" title="部署到GitHub仓库"></a>部署到GitHub仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>部署命令·，可能出错，如果出现<code>SSL Connection</code>错误，就是因为网络不好</p><p>再次输入部署命令就好了</p><h3 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h3><p>为了实现插入图片，我们需要进行这几个操作：</p><ul><li><p>安装<code>hexo</code>插件：<code>npm install hexo-renderer-marked</code></p></li><li><p>修改配置文件<code>_config.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">marked:</span></span><br><span class="line">  <span class="attr">prependRoot:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">postAsset:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p><code>Typora</code>的偏好设置中，我们将图片存储到指定路径<code>./$&#123;filename&#125;</code></p></li><li><p>具体使用：随便粘贴一张图到文章中，<code>ctrl+f</code>寻找<code>&lt;md文件名&gt;/</code>将它替换为空</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;大体上建好了网站，现在我们来学习一下如何在&lt;code&gt;hexo&lt;/code&gt;上写作，并同步你的第一篇文章到GitHub上&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;现在开始&quot;&gt;&lt;a href=&quot;#现在开始&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="Others" scheme="https://sun-ruijiang.github.io/categories/Others/"/>
    
    
    <category term="hexo" scheme="https://sun-ruijiang.github.io/tags/hexo/"/>
    
    <category term="Tutorial" scheme="https://sun-ruijiang.github.io/tags/Tutorial/"/>
    
  </entry>
  
</feed>
